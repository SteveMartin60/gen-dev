//..............................................................................

console.time    ('Spell Checker Modules Loaded           ');

const Spellchecker = require('hunspell-spellchecker');

const
{
    deClutterString,
    getUniqueArray,
    isExcludedFilename,
    isNumberString,
    isUppercaseString,
    isWebAddress,
    loadTextFileIntoArray,
    loadTextFileIntoString,
    replaceAll,
} = require('./helpers/doc-utils');

const
{
    stringSeparator,
} = require('./static/doc-constants');

var
{
    productDocStructure,
} = require('./helpers/doc-structure-object');

const {fs, path} = cxq;

console.timeEnd('Spell Checker Modules Loaded           ');
//..............................................................................
var currentMarkdownFileContents = [];
var currentMarkdownFile         = '';
//..............................................................................
var dictionaryFolder     = path.resolve(__dirname + '/dictionaries');
var dictionaryUS         = 'en_US-large.dic';
var dictionaryHelperUS   = 'en_US-large.aff';
var measurementUnitsList = 'measurementUnits.dic';
var meshevenDictionary   = 'mesheven.dic';
var meshevenWebAddress   = 'mesheven.com';
var meshevenWebAddressCN = 'mesheven.com.cn';
var customDictionaries   = [];
var knownExcludedWords   = [];
var spellErrors          = [];
var wordsToCheck         = [];
var wordToCheck          = '';
var markdownCompendium   = [];
var punctuationMarks     = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '-', '=', '{', '}', '|', '[', ']', '\\', ':', '"', ';', '\'', '<', '>', '?', ',', '.', '/', '`', '~', '\-'];

//..............................................................................
var spellchecker = new Spellchecker();

var DICT;
DICT = spellchecker.parse(
    {
        aff: fs.readFileSync(dictionaryFolder + '/' + dictionaryHelperUS),
        dic: fs.readFileSync(dictionaryFolder + '/' + dictionaryUS)
    });

spellchecker.use(DICT);

//..............................................................................

//..............................................................................
var spellingChecker =
{
    checkSpelling : function()
    {
        doSpellCheck();
    }
};
//..............................................................................

//..............................................................................
function doSpellCheck()
{
    console.time   ('Do Spell Check                         ');

    console.log    ('Doing Spell Check                      ');

    loadKnownExcludedWords();

    for (var i = 0; i < productDocStructure.filesMD.length; i++)
    {
        currentMarkdownFileContents = [];
        markdownCompendium = [];

        currentMarkdownFile = productDocStructure.filesMD[i].fullPath;

        currentMarkdownFileContents = loadTextFileIntoString(currentMarkdownFile);

        getMarkdownCompendium();

        checkSpelling();
    }
    console.log    ('---------------------------------------');
    console.timeEnd('Do Spell Check                         ');
    console.log    ('---------------------------------------');
}
//..............................................................................

//..............................................................................
function getMarkdownCompendium()
{
    currentMarkdownFileContents = replaceAll(currentMarkdownFileContents, ',', ' ');
    currentMarkdownFileContents = replaceAll(currentMarkdownFileContents, '(', ' ');
    currentMarkdownFileContents = replaceAll(currentMarkdownFileContents, ')', ' ');
    currentMarkdownFileContents = currentMarkdownFileContents.replace(/[^\w.'-.]+/g, '+');

    markdownCompendium = (currentMarkdownFileContents.split('+'));
    markdownCompendium = getUniqueArray(markdownCompendium);

    for (var i = 0; i < markdownCompendium.length; i++) markdownCompendium[i] = deClutterString(markdownCompendium[i]);

    return markdownCompendium;
}
//..............................................................................

//..............................................................................
function loadKnownExcludedWords()
{
    var i;

    var devicePossessionStrings = [];

    customDictionaries = loadCustomDictionaries(customDictionaries);

    devicePossessionStrings = getDevicePossessionStrings(devicePossessionStrings);

    for (i = 0; i < devicePossessionStrings.length; i++) knownExcludedWords.push(devicePossessionStrings  [i].valueOf().trim());
    for (i = 0; i < customDictionaries     .length; i++) knownExcludedWords.push(customDictionaries       [i].valueOf().trim());
    for (i = 0; i < punctuationMarks       .length; i++) knownExcludedWords.push(punctuationMarks         [i].valueOf().trim());
    for (i = 0; i < productDocStructure             .devicePages.length; i++)
    {
        knownExcludedWords.push(productDocStructure.devicePages[i].deviceIdFolder);
        knownExcludedWords.push(productDocStructure.devicePages[i].deviceIdMdFile);
        knownExcludedWords.push(productDocStructure.devicePages[i].deviceName    );
    }

    for (i = 0; i < productDocStructure             .filesFound.length; i++)
    {
        knownExcludedWords.push(productDocStructure.filesFound [i].lastFolder);
        knownExcludedWords.push(productDocStructure.filesFound [i].filename);
    }

    knownExcludedWords = getUniqueArray((knownExcludedWords));
}
//..............................................................................

//..............................................................................
function checkSpelling()
{
    var i;
    var isRight;

    spellErrors .length = 0;
    wordsToCheck.length = 0;

    getWordsToCheck();

    for (i = 0; i < wordsToCheck.length; i++) wordToCheck = deClutterString(wordToCheck);

    for (i = 0; i < wordsToCheck.length; i++)
    {
        wordToCheck = wordsToCheck[i].trim();

        isRight = spellchecker.check(wordToCheck);

        if (!isRight)
        {
            spellErrors.push(wordToCheck);
        }
    }

    spellErrors = getUniqueArray(spellErrors);

    for (i = 0; i < spellErrors.length; i++)
    {
        // if (!isExcludedWord(deClutterString(spellErrors[i])))
        if (!isExcludedWord(spellErrors[i]))
        {
            productDocStructure.docErrors.push('Spell Error' + stringSeparator + deClutterString(spellErrors[i]));
        }
    }

    productDocStructure.docErrors = getUniqueArray(productDocStructure.docErrors);
}
//..............................................................................

//..............................................................................
function getWordsToCheck()
{
    for (var i = 0; i < markdownCompendium.length; i++)
    {
        wordToCheck = deClutterString(markdownCompendium[i]).trim();

        if (!knownExcludedWords.includes(wordToCheck)) wordsToCheck.push(wordToCheck);
    }

    wordsToCheck = getUniqueArray(wordsToCheck);
}
//..............................................................................

//..............................................................................
function isExcludedWord(wordToCheck)
{
    var i;
    if (wordToCheck.length < 1)             return true;

    if (wordToCheck.indexOf('---') !== -1)  return true;

    if (wordToCheck           .includes(meshevenWebAddress))        return true;

    if (wordToCheck           .includes(meshevenWebAddressCN))      return true;

    if (isUppercaseString (wordToCheck))       return true;

    if (isWebAddress      (wordToCheck))       return true;

    if (isExcludedFilename(wordToCheck))       return true;

    if (isNumberString    (wordToCheck))       return true;

    if (parseInt          (wordToCheck) > -1)  return true;

    for (i = 0; i < productDocStructure.codeBlocks.length; i++)
    {
        var code = productDocStructure.codeBlocks[i].code;

        for (var j = 0; i < code.length; j++)
            if (code[j].includes(wordToCheck))  return true;
    }

    for (i = 0; i < productDocStructure.codeLines.length; i++)
    {
        if (productDocStructure.codeLines[i].includes(wordToCheck)) return true;
    }

    for (i = 0; i < productDocStructure.markdownLinks.length; i++)
        if (productDocStructure.markdownLinks[i].href.includes(wordToCheck)) return true;

    return false;
}
//..............................................................................

//..............................................................................
function loadCustomDictionaries(customDictionaries)
{
    var customDictionary = loadTextFileIntoArray(dictionaryFolder + '/' + measurementUnitsList);

    for (var i = 0; i < customDictionary.length; i++)
    {
        customDictionaries.push(customDictionary[i].valueOf().trim());
    }

    customDictionary = loadTextFileIntoArray(dictionaryFolder + '/' + meshevenDictionary);

    for (i = 0; i < customDictionary.length; i++)
    {
        customDictionaries.push(customDictionary[i].valueOf().trim());
    }

    return customDictionaries;
}
//..............................................................................

//..............................................................................
function  getDevicePossessionStrings(devicePossessionStrings)
{
    var s1 = `'s`;
    var s2 = `â€™s`;
    var dt = '';

    for (var i = 0; i < productDocStructure.devicePages.length; i++)
    {
        dt = productDocStructure.devicePages[i].deviceName + s1;

        devicePossessionStrings.push(dt.trim());
        devicePossessionStrings.push(dt.toUpperCase().trim());
    }

    for (i = 0; i < productDocStructure.devicePages.length; i++)
    {
        dt = productDocStructure.devicePages[i].deviceName + s2;

        devicePossessionStrings.push(dt.trim());
        devicePossessionStrings.push(dt.toUpperCase().trim());
    }

    return devicePossessionStrings;
}
//..............................................................................

//..............................................................................

var exported  =
{
    spellingChecker,
};
//..............................................................................

//..............................................................................

module.exports = exported;
