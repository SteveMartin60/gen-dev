//..............................................................................

const
{
    docUtils,
    docConstants,
    meshevenColors,
    getComponentInfo,
    getDocDataObject,
    util,
} = cxq;

const{addToNameSpace } = util;

const{constDeviceSheet} = require('./static/device-sheet'        );

const
{
    colorsHex,
    getColorByNet,
} = meshevenColors;

const
{
    appendArrayToArray,
    getLanguageSuffix,
    writeFileToDisk,
    isInArray,
    isValidHexColor,
    insertIntoArrayAt,
    replaceAll,
} = docUtils;

const
{
    directoryNames,
    fileExtensions,
    fileNames,
    stringsElectronics,
    stringsTemplate,
    languages,
} = docConstants;

const
{
} = require('./helpers/definitions-mb');

//..............................................................................

//..............................................................................

const systemPowerNets =
[
    'GND',
    '3V3',
    '3V3_IN',
    '3V3_OUT',
    '5V0',
    '5V',
    '5V0_IN',
    '5V0_OUT',
    '5V_IN',
    '5V_OUT',
    '9V_OUT',
    'VBAT',
    'VA_IN',
    'VB_IN',
];

var svgDefs             = [];
var svgElements         = {};
var svgDeviceSheet      = [];
var svgPinGroups        = {};
var componentInfo       = {};
var deviceSheetSchParts = [];
var standardGroups      = [];
var useElements         = [];
var meshMetaData        = {};
var sheetLanguage       = '';

//..............................................................................

//..............................................................................
const fontsDS =
{
    fontPort        : 'Times New Roman',
    fontSchPart     : 'Times New Roman',
    fontLabel       : 'Arial',
    fontTitle       : 'Arial',
    fontDescription : 'Arial',
    fontTextAdv     : 'Arial',
};
//..............................................................................

//..............................................................................
const fontSizes =
{
    fontSizeDeviceSheet : 9,
    fontSizeSchPart     : 10,
    fontSizeStandardMB  : 0.22,
};
//..............................................................................

//..............................................................................
const pinTypesPower =
[
    'ground',
    'power_consumer',
    'power_provider',

];
//..............................................................................

//..............................................................................
const specialFunctionNames =
[
    'RESET',
    'SPI',
    'SPI_MCU',
    'I2C',
    'I2C_MCU',
    'SW_DEBUG',
    'WAKE_IN_OUT',
];
//..............................................................................

//..............................................................................
function getDeviceSheetLogoBlockTemplate()
{
    return [
        '    <!-- .................................................................  -->',
        '    <!-- Logo Block  -->',
        '    <!-- .................................................................  -->',
        '        <svg',
        '            id          ="LOGO-CXQ-NON-DISPLAY"',
        '            x           ="0"',
        '            y           ="0"',
        '            overflow    ="visible"',
        '            stroke-width="0.1"',
        '            font-size   ="9"',
        '            >',
        '            <rect width="28" height="14" x="-14" y="-7" fill="' + colorsHex.colorSchBkLogo + '"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M-12.81-6.44l-.365 2.281h1.326l.219-1.26h1.134l.226 1.293h1.32l-.326-2.34z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M-13.186-3.738v5.562h4.38V.614h-3.057v-3.358h1.51v1.745h-.966V.004h2.354v-3.751z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M-8.468.623v1.182h3.217v-8.348h-1.36V.623z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M-8.458-6.195V.239h1.332v-6.453z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M -4 -6.224 v  1.032 h7.916  v -1.022H.696v-.29H-.73v.28z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M 3.885  -4.76  l -7.888   .047  v  2.222h7.888zm-6.425.853h4.924v.563H-2.54z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M -4 -2.05 h 7.85 v 0.704 L  2.9 -0.718 h 0.976 V 0.286 H 2.74 v 1.51 h -6.74 V 0.633 h 5.28 V 0.258 h -5.28 V -0.746 h 5.309 l 0.628 -0.403 h -5.93 z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M5.12-4.851v6.645h1.074V-4.85z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M7.815-4.851v6.645H8.89V-4.85z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M5.107-6.191v1.008h1.286v6.977h1.22v-6.95h1.3v-1.061H7.562v-.306H6.447v.319z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M9.179-6.55v.956h1.366v.942H9.192v.902h1.167L9.205-2.105h.266V1.78h1.353v-4.059l.41-.57.452.61v3.966l1.3.013v-3.873h.225l-1.1-1.632h1.074v-.941h-1.313l.026-.889h1.273v-.955z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M-9.515 6.55h-.73V4.08l-.607 2.47h-1.018l-.606-2.47v2.47h-.73V2.558h1.029l.83 3.22.834-3.22h.998z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M-6.451 6.542h-2.47v-3.99h2.463v.72h-1.754v.795h1.748v.72h-1.748v1.035h1.76z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M-3.187 5.823c0 .235-.057.408-.18.536-.12.12-.294.183-.528.183H-5.93v-.72h2.035V4.775h-1.38a.707.707 0 0 1-.51-.183c-.129-.118-.195-.297-.195-.535v-.784c0-.23.066-.409.194-.532a.701.701 0 0 1 .51-.188h1.923v.72h-1.922v.784h1.38c.217 0 .386.065.518.196.128.13.19.304.19.522z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M.298 6.55h-.71V4.773h-1.472v1.775h-.719V2.56h.719v1.499h1.472v-1.5h.71z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M3.443 6.55h-2.5V2.558h2.494v.72H1.665v.795H3.43v.72H1.665v1.035h1.778z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M6.732 2.559l-1.215 3.99H4.81L3.635 2.56h.777l.766 2.887.817-2.887z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M9.806 6.55h-2.71V2.558h2.7v.72H7.88v.795H9.79v.72H7.88v1.035h1.927z"/>',
        '            <path fill="' + colorsHex.colorTextLight + '" d="M13.194 6.55h-.553l-1.857-2.675v2.674h-.725v-3.99h.71l1.704 2.535V2.56h.721z"/>',
        '        </svg>',
        '        <svg',
        '            id          ="GROUP-LOGO-BLOCK"',
        '            x           ="712"',
        '            y           ="680"',
        '            overflow ="visible"',
        '            shape-rendering="crispEdges"',
        '            font-family="Arial Narrow"',
        '            text-anchor="middle"',
        '            font-weight="600" ',
        '            >',
        '            <rect x="0" y="0" width="270" height="80" fill="' + colorsHex.colorSchBkLight + '" />',
        '            <rect x="0" y="0" width="270" height="32" fill="' + colorsHex.colorSchBkLogo + '" />',
        '            <rect x="0" y="0" width="24"  height="80" fill="' + colorsHex.colorSchBkLogo + '" />',
        '',
        '            <use href="#LOGO-CXQ-NON-DISPLAY" x="59.5" y="7" shape-rendering="geometricPrecision" transform="scale(5.713)"/>',
        '',
        '            <!-- H Line Black -->',
        '            <line x1="0"   x2="260" y1="45" y2="45" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="0"   x2="260" y1="67" y2="67" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="0"   x2="260" y1="80" y2="80" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '',
        '            <!-- V Line Black -->',
        '            <line x1="98"  x2="98"  y1="32" y2="45" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="147" x2="147" y1="32" y2="67" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="196" x2="196" y1="32" y2="45" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '',
        '            <!-- V Line White -->',
        '            <line x1="24"  x2="24"  y1="21" y2="80" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="98"  x2="98"  y1="21" y2="32" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="147" x2="147" y1="21" y2="32" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="196" x2="196" y1="21" y2="32" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="260" x2="260" y1="0"  y2="80" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '',
        '            <!-- H Line White -->',
        '            <line x1="0"   x2="260" y1="21" y2="21" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="0"   x2="24"  y1="45" y2="45" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            <line x1="0"   x2="24"  y1="67" y2="67" stroke="' + colorsHex.colorStroke + '" stroke-width="0.25"/>',
        '            ',
        '            <text x="11" y="17"  text-anchor="start" fill="' + colorsHex.colorTextLight + '" font-size="16" font-family="Arial" >{{sheet-name}}.01</text>',
        '',
        '            <text x="5"     y="39"   text-anchor="start"  fill="' + colorsHex.colorTextLight +  '" font-size="14" >A4        </text>',
        '            <text x="2"     y="59"   text-anchor="start"  fill="' + colorsHex.colorTextLight +  '" font-size="8"  >ADDR      </text>',
        '            <text x="2"     y="76.5" text-anchor="start"  fill="' + colorsHex.colorTextLight +  '" font-size="8"  >FILE      </text>',
        '',
        '            <text x="61"    y="29"   fill="' + colorsHex.colorTextLight +  '" font-size="7" font-family="Arial"  >DOCUMENT  </text>',
        '            <text x="122.5" y="29"   fill="' + colorsHex.colorTextLight +  '" font-size="7" font-family="Arial"  >DATE      </text>',
        '            <text x="171.5" y="29"   fill="' + colorsHex.colorTextLight +  '" font-size="7" font-family="Arial"  >TIME      </text>',
        '            <text x="228"   y="29"   fill="' + colorsHex.colorTextLight +  '" font-size="7" font-family="Arial"  >SHEET     </text>',
        '',
        '            <text x="122.5" y="42"   fill="' + colorsHex.colorTextDark +  '" font-size="9"  font-weight="100" >2018-11-03</text>',
        '            <text x="171.5" y="42"   fill="' + colorsHex.colorTextDark +  '" font-size="9"  font-weight="100" >16:00     </text>',
        '            <text x="228"   y="42"   fill="' + colorsHex.colorTextDark +  '" font-size="9"  font-weight="100" >1 of 1    </text>',
        '',
        '            <text x="28"    y="54"   text-anchor="start"  fill="' + colorsHex.colorTextDark +  '" font-size="9"  font-weight="100" >RM 7401, 550 Jumen Road          </text>',
        '            <text x="28"    y="64"   text-anchor="start"  fill="' + colorsHex.colorTextDark +  '" font-size="9"  font-weight="100" >Huangpu District, Shanghai, China</text>',
        '',
        '            <text x="28"    y="77"   text-anchor="start"  fill="' + colorsHex.colorTextDark +  '" font-size="9"  font-weight="100" >{{sheet-name}}.01.SchDoc         </text>',
        '',
        '            <a',
        '                href="http://www.mesheven.com"',
        '                target="_blank"',
        '                >',
        '                <text',
        '                    x="203.5"',
        '                    y="60"',
        '                    font-size="11" ',
        '                    font-weight="600" ',
        '                    fill="' + colorsHex.colorLinkTextDark + '"',
        '                    text-decoration="underline"',
        '                    >',
        '                    www.mesheven.com',
        '                </text>',
        '            </a>',
        '        </svg>',
        '',
    ];
}
//..............................................................................

//..............................................................................
function getDeviceSheetTitleElementsTemplate()
{
    return  [
        '        <svg',
        '            id          ="GROUP-TITLE"',
        '            text-anchor ="start"',
        '            font-family ="Arial"',
        '            font-weight ="bold"',
        '            overflow    ="visible"',
        '            x           ="480"',
        '            y           ="65"',
        '            >',
        '            <text',
        '                x              ="0"',
        '                y              ="0" ',
        '                fill           ="' + colorsHex.colorLinkTextStd + '"',
        '                font-size      ="18"',
        '                text-decoration="underline"',
        '                >',
        '                    MESHEVEN {{sheet-name}}',
        '            </text>',
        '            <text',
        '                x="0"',
        '                y="20" ',
        '                font-size="12"',
        '                >',
        '                    {{description}}',
        '            </text>',
        '        </svg>',
    ];
}
//..............................................................................

//..............................................................................
function getSpecialFunctionGroupsTemplate()
{
    var groupSPI = [
        '    <svg',
        '        id          ="GROUP-SPI"',
        '        overflow    ="visible"',
        '        stroke      ="' + colorsHex.colorSchWire + '"',
        '        stroke-width="0.1"',
        '        font-family ="Times New Roman"',
        '        font-size   ="9"',
        '        fill        ="' + colorsHex.colorTextDark +'"',
        '        >',
        '        <use x="150" y="05" href="#PIN-INPUT" />',
        '        <use x="150" y="15" href="#PIN-OUTPUT" />',
        '        <use x="150" y="25" href="#PIN-INPUT" />',
        '        <use x="150" y="35" href="#PIN-INPUT" />',
        '',
        '        <use x="100" y="05" href="#WIRE-PLAIN"/>',
        '        <use x="100" y="15" href="#WIRE-PLAIN"/>',
        '        <use x="100" y="25" href="#WIRE-PLAIN"/>',
        '        <use x="100" y="35" href="#WIRE-PLAIN"/>',
        '',
        '        <use x="0" y="00" href="#PORT-INPUT" />',
        '        <use x="0" y="10" href="#PORT-OUTPUT"/>',
        '        <use x="0" y="20" href="#PORT-INPUT" />',
        '        <use x="0" y="30" href="#PORT-INPUT" />',
        '',
        '        <text x="11" y="08" text-anchor="start">MOSI</text>',
        '        <text x="11" y="18" text-anchor="start">MISO</text>',
        '        <text x="11" y="28" text-anchor="start">SCLK</text>',
        '        <text x="11" y="38" text-anchor="start">CS_N</text>',
        '',
        '        <text x="175" y="08" text-anchor="start">MOSI</text>',
        '        <text x="175" y="18" text-anchor="start">MISO</text>',
        '        <text x="175" y="28" text-anchor="start">SCLK</text>',
        '        <text x="175" y="38" text-anchor="start">CS_N</text>',
        '    </svg>',
    ];

    var groupSPI_MCU = [
        '    <svg',
        '        id          ="GROUP-SPI-MCU"',
        '        overflow    ="visible"',
        '        stroke      ="' + colorsHex.colorSchWire + '"',
        '        stroke-width="0.1"',
        '        font-family ="Times New Roman"',
        '        font-size   ="9"',
        '        fill        ="' + colorsHex.colorTextDark +'"',
        '        >',
        '        <use x="150" y="05" href="#PIN-INPUT" />',
        '        <use x="150" y="15" href="#PIN-OUTPUT" />',
        '        <use x="150" y="25" href="#PIN-INPUT" />',
        '',
        '        <use x="100" y="05" href="#WIRE-PLAIN"/>',
        '        <use x="100" y="15" href="#WIRE-PLAIN"/>',
        '        <use x="100" y="25" href="#WIRE-PLAIN"/>',
        '',
        '        <use x="0" y="00" href="#PORT-INPUT" />',
        '        <use x="0" y="10" href="#PORT-OUTPUT"/>',
        '        <use x="0" y="20" href="#PORT-INPUT" />',
        '',
        '        <text x="11" y="18" text-anchor="start">MISO/B0/PWM</text>',
        '        <text x="11" y="28" text-anchor="start">SCLK/B1/PWM</text>',
        '        <text x="11" y="08" text-anchor="start">MOSI/B2/PWM</text>',
        '',
        '        <text x="175" y="18" text-anchor="start">MISO/B0/PWM</text>',
        '        <text x="175" y="28" text-anchor="start">SCLK/B1/PWM</text>',
        '        <text x="175" y="08" text-anchor="start">MOSI/B2/PWM</text>',
        '    </svg>',
    ];

    var groupSwDebug =     [
        '    <svg',
        '        id          ="GROUP-SW-DEBUG"',
        '        overflow    ="visible"',
        '        stroke      ="' + colorsHex.colorSchWire + '"',
        '        stroke-width="0.1"',
        '        font-family ="Times New Roman"',
        '        font-size   ="9"',
        '        fill        ="' + colorsHex.colorTextDark +'"',
        '        >',
        '        <use x="150" y="05" href="#PIN-INPUT"          />',
        '        <use x="150" y="15" href="#PIN-BI-DIRECTIONAL" />',
        '',
        '        <use x="100" y="05" href="#WIRE-PLAIN"/>',
        '        <use x="100" y="15" href="#WIRE-PLAIN"/>',
        '',
        '        <use x="0" y="00" href="#PORT-INPUT" />',
        '        <use x="0" y="10" href="#PORT-BI-DIRECTIONAL"/>',
        '',
        '        <text x="11" y="08" text-anchor="start">SWCLK</text>',
        '        <text x="11" y="18" text-anchor="start">SWDIO</text>',
        '',
        '        <text x="175" y="08" text-anchor="start">SWCLK</text>',
        '        <text x="175" y="18" text-anchor="start">SWDIO</text>',
        '    </svg>',
    ];

    var groupReset     =
    [
        '    <svg',
        '        id          ="GROUP-PIN-RESET"',
        '        overflow    ="visible"',
        '        stroke      ="' + colorsHex.colorSchWire + '"',
        '        stroke-width="0.1"',
        '        font-family ="Times New Roman"',
        '        font-size   ="9"',
        '        fill        ="' + colorsHex.colorTextDark +'"',
        '        >',
        '        <use x="150" y="05" href="#PIN-INPUT"  />',
        '',
        '        <use x="100" y="05" href="#WIRE-PLAIN"/>',
        '',
        '        <use x="0" y="00" href="#PORT-INPUT" />',
        '',
        '        <text x="11" y="08" text-anchor="start">RST_N</text>',
        '',
        '        <text x="175" y="08" text-anchor="start">RST_N</text>',
        '    </svg>',
    ];

    var groupWakeInOut =
    [
        '    <svg',
        '        id          ="GROUP-WAKE-IN-OUT"',
        '        overflow    ="visible"',
        '        stroke      ="' + colorsHex.colorSchWire + '"',
        '        stroke-width="0.1"',
        '        font-family ="Times New Roman"',
        '        font-size   ="9"',
        '        fill        ="' + colorsHex.colorTextDark +'"',
        '        >',
        '        <use x="150" y="05" href="#PIN-INPUT"  />',
        '        <use x="150" y="15" href="#PIN-OUTPUT" />',
        '',
        '        <use x="100" y="05" href="#WIRE-PLAIN"/>',
        '        <use x="100" y="15" href="#WIRE-PLAIN"/>',
        '',
        '        <use x="0" y="00" href="#PORT-INPUT" />',
        '        <use x="0" y="10" href="#PORT-OUTPUT"/>',
        '',
        '        <text x="11" y="08" text-anchor="start">WAKE_IN </text>',
        '        <text x="11" y="18" text-anchor="start">WAKE_OUT</text>',
        '',
        '        <text x="175" y="08" text-anchor="start">WAKE_IN </text>',
        '        <text x="175" y="18" text-anchor="start">WAKE_OUT</text>',
        '    </svg>',
    ];

    var groupI2C_MCU =
    [
        '    <svg',
        '        id          ="GROUP-I2C-MCU"',
        '        overflow    ="visible"',
        '        stroke      ="' + colorsHex.colorSchWire + '"',
        '        stroke-width="0.1"',
        '        font-family ="Times New Roman"',
        '        font-size   ="9"',
        '        fill        ="' + colorsHex.colorTextDark +'"',
        '        >',
        '        <use x="150" y="05" href="#PIN-INPUT"  />',
        '        <use x="150" y="15" href="#PIN-OUTPUT" />',
        '',
        '        <use x="100" y="05" href="#WIRE-PLAIN"/>',
        '        <use x="100" y="15" href="#WIRE-PLAIN"/>',
        '',
        '        <use x="0" y="00" href="#PORT-INPUT" />',
        '        <use x="0" y="10" href="#PORT-OUTPUT"/>',
        '',
        '        <text x="11" y="08" text-anchor="start">SCL/B3/PWM</text>',
        '        <text x="11" y="18" text-anchor="start">SDA/B4/PWM</text>',
        '',
        '        <text x="175" y="08" text-anchor="start">SCL/B3/PWM</text>',
        '        <text x="175" y="18" text-anchor="start">SDA/B4/PWM</text>',
        '    </svg>',
    ];

    var specialFunctionGroups = {};

    specialFunctionGroups ['SPI'        ] = groupSPI;
    specialFunctionGroups ['SPI_MCU'    ] = groupSPI_MCU;
    specialFunctionGroups ['SW_DEBUG'   ] = groupSwDebug;
    specialFunctionGroups ['RESET'      ] = groupReset;
    specialFunctionGroups ['I2C_MCU'    ] = groupI2C_MCU;
    specialFunctionGroups ['WAKE_IN_OUT'] = groupWakeInOut;

    return specialFunctionGroups
}
//..............................................................................

//..............................................................................
function isDisplayElementID(elementID)
{
    if (elementID.indexOf('NON-DISPLAY') > -1) return false;

    return elementID.indexOf(' id ') > -1;
}
//..............................................................................

//..............................................................................
function getUseElements(svgDefs)
{
    var useElements  = [];
    var elementArray = [];
    var useElementID = '';
    var stringLength = 0;

    for (var i = 0; i < svgDefs.length; i++)
    {
        elementArray = svgDefs[i];

        for (var j = 0; j < elementArray.length; j++)
        {
            if (isDisplayElementID(elementArray[j]))
            {
                useElementID = elementArray[j].substring(elementArray[j].indexOf('"') + 1, elementArray[j].lastIndexOf('"'));
                useElements.push('    <use href="#' + useElementID + '"        />')
            }
        }
    }

    for (i = 0; i < useElements.length; i++)
    {
        while(useElements[i].indexOf(' />') > -1)
        {
            useElements[i] = useElements[i].replace(' />', '/>');
        }

        if (stringLength <  useElements[i].length) stringLength = useElements[i].length;
    }

    for (i = 0; i < useElements.length; i++)
    {
        while (useElements[i].length < stringLength)
        {
            useElements[i] = useElements[i].replace('/>', ' />');
        }
    }

    return useElements
}
//..............................................................................

//..............................................................................
function getSafeString(string)
{
    string = replaceAll(string,'>', '&#x003E;');
    string = replaceAll(string,'<', '&#x003C;');
    string = replaceAll(string,'&', '&amp;'   );

    return string;
}
//..............................................................................

//..............................................................................
function getDeviceSheetTitleElements(componentEDA, meshMetaData, language)
{
    var deviceSheetID = componentEDA.id;

    var titleElements = getDeviceSheetTitleElementsTemplate();

    var description = getDescriptionByID(deviceSheetID, meshMetaData, language);

    description = description || deviceSheetID;

    description = getSafeString(description);

    for (var i = 0; i < titleElements.length; i++)
    {
        titleElements[i] = replaceAll(titleElements[i], stringsTemplate.sheetName    , deviceSheetID);
        titleElements[i] = replaceAll(titleElements[i], stringsTemplate.description, description);
    }

    return titleElements
}
//..............................................................................

//..............................................................................
function isPowerGroup(group, pin)
{
    if (group.isPower === true) return true;

    if (pin === undefined ) return false;

    if (isInArray(pin.id, systemPowerNets)) return true;
}
//..............................................................................

//..............................................................................
function isPowerNet(pin)
{
    if (isInArray(pin.id      , systemPowerNets)) return true;
    if (isInArray(pin.pin_type, pinTypesPower  )) return true;
}
//..............................................................................

//..............................................................................
function getPowerGroupBottom(group, pin, pinInfo, wireColor)
{
    var pinCount  = pinInfo  .length;
    var textColor = colorsHex.colorTextDark;
    var fontPort  = fontsDS  .fontPort;
    var fontSize  = fontSizes.fontSizeDeviceSheet;
    var groupID   = 'GROUP-' + pin.id;
    var pinX      = group.pinStart - group.x;

    var groupElement =
        [
            '<svg'                                ,
            '    id          ="' + groupID   + '"',
            '    x           ="' + group.x   + '"',
            '    y           ="' + group.y   + '"',
            '    font-family ="' + fontPort  + '"',
            '    fill        ="' + textColor + '"',
            '    font-size   ="' + fontSize  + '"',
            '    overflow    ="visible"'          ,
            '    stroke-width="0.1"'              ,
            '    >'                               ,
        ];

    for (var i = 0; i < pinCount; i++)
    {
        groupElement.push('        <use x="' + pinX + '" y="0" href="#PIN-PASSIVE-V" />');

        pinX = pinX + 10;
    }

    groupElement.push('');

    groupElement.push('        <use x="0" y="25" href="#PORT-PASSIVE" />');

    groupElement.push('');

    pinX = group.pinStart - group.x;

    for (i = 0; i < pinCount; i++)
    {
        groupElement.push('        <use x="' + pinX + '" y="20" href="#PIN-' + pin.id + '-V" />');

        pinX = pinX + 10;
    }

    pinX = pinX - 10;

    groupElement.push('');

    groupElement.push('        <line x1="100" x2="' + pinX + '" y1="30" y2="30" stroke-linecap="round" stroke-linejoin="round" stroke="' + wireColor + '" stroke-width="3"/>');

    groupElement.push('');

    groupElement.push('        <text x="11" y="33.5">' + pin.id + '</text>');

    groupElement.push('');

    pinX = group.pinStart - group.x;

    for (i = 0; i < pinCount; i++)
    {
        groupElement.push('        <text x="' + pinX + '" y="-5" transform="rotate(270 ' + pinX + ', -7.5)" >GND</text>');

        pinX = pinX + 10;
    }

    groupElement.push('');

    pinX = group.pinStart - group.x;

    for (i = 0; i < pinCount; i++)
    {
        groupElement.push('        <use x="' + pinX + '" y="30" href="#JUNCTION"/>');

        pinX = pinX + 10;
    }

    pinX = group.pinStart - group.x;

    for (i = 0; i < pinCount; i++)
    {
        groupElement.push('        <text x="' + pinX + '" y="16" transform="rotate(270 ' + pinX + ', 17)" >' + pinInfo[i].ref + '</text>');

        pinX = pinX + 10;
    }

    groupElement.push('');

    groupElement.push('        </svg>');

    groupElement.push('');

    return groupElement;
}
//..............................................................................

//..............................................................................
function getPowerGroupRight(group, pin, pinInfo, wireColor)
{
    var pinCount    = pinInfo  .length;
    var textColor   = colorsHex.colorTextDark;
    var fontPort    = fontsDS  .fontPort;
    var fontSize    = fontSizes.fontSizeDeviceSheet;
    var textAnchor  = 'start';
    var groupID     = 'GROUP-' + pin.id;
    var i;
    var locationY;

    var groupElement =
        [
            '<svg'                                   ,
            '    id             ="' + groupID   + '"',
            '    x              ="' + group.x   + '"',
            '    y              ="' + group.y   + '"',
            '    font-family    ="' + fontPort  + '"',
            '    fill           ="' + textColor + '"',
            '    overflow       ="visible"'          ,
            '    stroke-linecap ="round"'            ,
            '    stroke-linejoin="round"'            ,
            '    stroke-width   ="0.1"'              ,
            '    font-size      ="' + fontSize  + '"',
            '    >'                                  ,
        ];

    locationY = 0;

    groupElement.push('        <line x1="20" x2="70" y1="5" y2="'   + (locationY + 5) + '" stroke-width="3" stroke="' + wireColor + '"/>');

    groupElement.push('        <use  x="0"  y="' + locationY       + '" href       ="#PORT-PASSIVE" transform-origin="85 0%" transform="matrix(-1 0 0 1 0 0)"/>');

    groupElement.push('        <text x="81" y="' + (locationY + 8) + '" text-anchor="' + textAnchor +'">' + pin.id + '</text>');

    groupElement.push('        <line x1="30" x2="30" y1="5" y2="' + (((pinInfo.length -1) * 10 ) + 5) + '" stroke-width="3" stroke="' + wireColor + '"/>');

    groupElement.push('');

    locationY = 5;

    for (i = 0; i < pinCount; i++)
    {
        groupElement.push('        <use  x="0"  y="' +  locationY       + '" href       ="#PIN-PASSIVE"            />');
        groupElement.push('        <use  x="30" y="' + (locationY -10 ) + '" href       ="#PIN-' + pin.id     + '" />');
        groupElement.push('        <text x="-5" y="' + (locationY +3  ) + '" text-anchor="end">' + pin.id     + '</text>');
        groupElement.push('        <text x="8"  y="' + (locationY -1.5) + '" text-anchor="'      + textAnchor + '">'   + pinInfo[i].ref + '</text>');

        groupElement.push('        <line x1="20" x2="30" y1="'  + (locationY) + '" y2="'  + (locationY) + '" stroke-width="3" stroke="' + wireColor + '"/>');

        groupElement.push('        <use  x="30" y="' +  locationY       + '" href       ="#JUNCTION"/>');

        locationY = locationY + 10;
    }

    groupElement.push('');

    groupElement.push('        </svg>');

    return groupElement;
}
//..............................................................................

//..............................................................................
function getPowerGroupLeft(group, pin, pinInfo, wireColor)
{
    var pinCount    = pinInfo  .length;
    var textColor   = colorsHex.colorTextDark;
    var fontPort    = fontsDS  .fontPort;
    var fontSize    = fontSizes.fontSizeDeviceSheet;
    var textAnchor  = 'start';
    var groupID     = 'GROUP-' + pin.id;
    var i;
    var locationY;

    var groupElement =
        [
            '<svg'                                   ,
            '    id             ="' + groupID   + '"',
            '    x              ="' + group.x   + '"',
            '    y              ="' + group.y   + '"',
            '    font-family    ="' + fontPort  + '"',
            '    fill           ="' + textColor + '"',
            '    overflow       ="visible"'          ,
            '    stroke-linecap ="round"'            ,
            '    stroke-linejoin="round"'            ,
            '    stroke-width   ="0.1"'              ,
            '    font-size      ="' + fontSize  + '"',
            '    >'                                  ,
        ];

    locationY = 0;

    groupElement.push('        <line x1="100" x2="140" y1="5" y2="'   + (locationY + 5) + '" stroke-width="3" stroke="' + wireColor + '"/>');

    groupElement.push('        <use  x="0"  y="' + locationY       + '" href       ="#PORT-PASSIVE" />');

    groupElement.push('        <text x="10" y="' + (locationY + 8) + '" text-anchor="' + textAnchor +'">' + pin.id + '</text>');

    groupElement.push('        <line x1="140" x2="140" y1="5" y2="' + (((pinInfo.length -1) * 10 ) + 5) + '" stroke-width="3" stroke="' + wireColor + '"/>');

    groupElement.push('');

    textAnchor = 'end';

    locationY = 5;

    for (i = 0; i < pinCount; i++)
    {
        groupElement.push('        <use  x="150" y="' +  locationY       + '" href       ="#PIN-PASSIVE" />');
        groupElement.push('        <use  x="150" y="' + (locationY -10 ) + '" href       ="#PIN-' + pin.id + '" />');
        groupElement.push('        <text x="175" y="' + (locationY +3  ) + '">' + pin.id + '</text>');
        groupElement.push('        <text x="165" y="' + (locationY -1.5) + '" text-anchor="' + textAnchor +'">' + pinInfo[i].ref + '</text>');

        groupElement.push('        <line x1="140" x2="150" y1="'  + (locationY) + '" y2="'  + (locationY) + '" stroke-width="3" stroke="' + wireColor + '"/>');

        groupElement.push('        <use  x="140" y="' +  locationY       + '" href       ="#JUNCTION"/>');

        locationY = locationY + 10;
    }

    groupElement.push('');

    groupElement.push('        </svg>');

    return groupElement;
}
//..............................................................................

//..............................................................................
function getLabelColor(color)
{
    if (colorsHex[color]) return colorsHex[color];

    if (isValidHexColor(color)) return color;

    return colorsHex.colorDeepPink;
}
//..............................................................................

//..............................................................................
function getWireColor(group, pin)
{
    if (group.wireColor)
    {
        if (isValidHexColor(group.wireColor)) return group.wireColor;

        if (colorsHex[group.wireColor]) return colorsHex[group.wireColor];
    }

    return getColorByNet(pin.id)
}
//..............................................................................

//..............................................................................
function getPowerGroup(group, pin, pinInfo)
{
    var wireColor = getWireColor(group, pin);

    if (group.position === 'bottom') return getPowerGroupBottom(group, pin, pinInfo, wireColor);
    if (group.position === 'right' ) return getPowerGroupRight (group, pin, pinInfo, wireColor);
    if (group.position === 'left'  ) return getPowerGroupLeft  (group, pin, pinInfo, wireColor);
}
//..............................................................................

//..............................................................................
function getSpecialFunctionGroupPinRefs(specialFunctionGroup, pins)
{
    var refElement  = '';
    var refElements = [];
    var netName     = '';
    var coordY;

    for (var i = 0; i < specialFunctionGroup.length; i++)
    {
        if (specialFunctionGroup[i].indexOf('/text') > -1)
        {
            netName = specialFunctionGroup[i].substring(specialFunctionGroup[i].indexOf('anchor'));

            netName = netName.substring(netName.indexOf('>') + 1, netName.indexOf('<'));

            coordY = specialFunctionGroup[i].substring(specialFunctionGroup[i].indexOf('y') + 3);

            coordY = coordY.substring(0, coordY.indexOf('"'));

            coordY = coordY -4;

            for (var j = 0; j < pins.length; j++)
            {
                if (pins[j].id === netName)
                {
                    refElement = '        <text x="148"  y="' + coordY + '">' + pins[j].refs + '</text>';

                    if (!isInArray(refElement, refElements)) refElements.push(refElement)
                }
            }

        }
    }

    return refElements;
}
//..............................................................................

//..............................................................................
function flipSpecialFunctionGroup(group)
{
    for (var i = 0; i < group.length; i++)
    {
        group[i] = group[i].replace('href',' transform-origin="85 0%" transform="matrix(-1 0 0 1 0 0)" href');

        group[i] = group[i].replace('x="11" y="18" text-anchor="start"', 'x="-5" y="18" text-anchor="end"');
        group[i] = group[i].replace('x="11" y="28" text-anchor="start"', 'x="-5" y="28" text-anchor="end"');
        group[i] = group[i].replace('x="11" y="08" text-anchor="start"', 'x="-5" y="08" text-anchor="end"');

        group[i] = group[i].replace('x="11" y="18"', 'x="-5" y="18" text-anchor="end"');
        group[i] = group[i].replace('x="11" y="28"', 'x="-5" y="28" text-anchor="end"');
        group[i] = group[i].replace('x="11" y="08"', 'x="-5" y="08" text-anchor="end"');

        group[i] = group[i].replace('x="175"','x="81"');
        group[i] = group[i].replace('x="148"','x="13"');

        group[i] = group[i].replace('text-anchor="end" text-anchor="start"', 'text-anchor="end"');
    }
}
//..............................................................................

//..............................................................................
function setGroupDefaults(groups, sheetHeight)
{
    var group;
    var coordY;

    for (var i = 0; i < Object.keys(groups).length; i++)
    {
        group = groups[Object.keys(groups)[i]];

        if (!group.position)
        {
            groups[Object.keys(groups)[i]].position = 'left';
        }

        coordY = group.y;
        coordY = sheetHeight - coordY;

        groups[Object.keys(groups)[i]].y = coordY;
    }

    return groups;
}
//..............................................................................

//..............................................................................
function getPinElementsRemoteGPIO(pins, group)
{
    var pinsGPIO  = [];
    var coordY    = 0;
    var textColor = colorsHex.colorTextDark;
    var fontPort  = fontsDS  .fontPort;
    var fontSize  = fontSizes.fontSizeDeviceSheet;

    var groupGPIOs =
            [
                '        <svg'                                ,
                '            id          ="GROUP-REMOTE-GPIO"',
                '            x           ="' + group.x   + '"',
                '            y           ="' + group.y   + '"',
                '            font-family ="' + fontPort  + '"',
                '            fill        ="' + textColor + '"',
                '            font-size   ="' + fontSize  + '"',
                '            overflow    ="visible"'          ,
                '            stroke-width="0.1"'              ,
                '            >'                               ,
            ];

    for (var i = 0; i < pins.length; i++)
    {
        if (pins[i].pin_type === 'gpio')
        {
            pinsGPIO.push(pins[i]);
        }
    }

    for (i = 0; i < pinsGPIO.length; i++)
    {
        groupGPIOs.push('            <use  x="0"   y="' +  coordY      + '" href="#PORT-BI-DIRECTIONAL" />');
        groupGPIOs.push('            <use  x="150" y="' + (coordY + 5) + '" href="#PIN-BI-DIRECTIONAL"  />');
        groupGPIOs.push('            <use  x="100" y="' + (coordY + 5) + '" href="#WIRE-PLAIN"          />');
        groupGPIOs.push('            <text x="11"  y="' + (coordY + 8) + '">' + pinsGPIO[i].id   + '</text>');
        groupGPIOs.push('            <text x="175" y="' + (coordY + 8) + '">' + pinsGPIO[i].id   + '</text>');
        groupGPIOs.push('            <text x="148" y="' + (coordY + 3) + '">' + pinsGPIO[i].refs + '</text>');

        coordY = coordY + 10
    }

    groupGPIOs.push('');

    groupGPIOs.push('    </svg>',);

    return groupGPIOs;
}
//..............................................................................

//..............................................................................
function hasRemoteGPIOs(groups)
{
    if (groups['REMOTE-GPIOS']) return true;
}
//..............................................................................

//..............................................................................
function hasMcuGPIOs(groups)
{
    if (groups['MCU-GPIOS']) return true;
}
//..............................................................................

//..............................................................................
function hasReservedPins(pins)
{
    for (var i = 0; i < pins.length; i++)
    {
        if (pins[i].pin_type === 'reserved' && pins[i].group === 'RSVD')
        {
            return true;
        }
    }

    return false;
}
//..............................................................................

//..............................................................................
function hasLabels(componentEDA)
{
    return !!componentEDA.deviceSheet.labels;
}
//..............................................................................

//..............................................................................
function isStandardGroup(group, groupID)
{
    if (isPowerGroup(group)) return false;

    if (isInArray(groupID, specialFunctionNames)) return false;

    if (isInArray(groupID, systemPowerNets)) return false;

    if (groupID === 'RSVD') return false;

    return groupID !== 'GPIO';
}
//..............................................................................

//..............................................................................
function getPortByPinType(pinType)
{
    if (pinType === 'consumer_3V3'  ) return 'PORT-PASSIVE';
    if (pinType === 'consumer_5V'   ) return 'PORT-PASSIVE';
    if (pinType === 'cs_n_slave'    ) return 'PORT-INPUT';
    if (pinType === 'digital_in'    ) return 'PORT-INPUT';
    if (pinType === 'digital_io'    ) return 'PORT-INPUT';
    if (pinType === 'digital_out'   ) return 'PORT-OUTPUT';
    if (pinType === 'ethernet_data' ) return 'PORT-BI-DIRECTIONAL';
    if (pinType === 'gpio'          ) return 'PORT-BI-DIRECTIONAL';
    if (pinType === 'ground'        ) return 'PORT-PASSIVE';
    if (pinType === 'miso_master'   ) return 'PORT-INPUT';
    if (pinType === 'miso_slave'    ) return 'PORT-OUTPUT';
    if (pinType === 'mosi_slave'    ) return 'PORT-INPUT';
    if (pinType === 'passive'       ) return 'PORT-PASSIVE';
    if (pinType === 'power_consumer') return 'PORT-PASSIVE';
    if (pinType === 'power_provider') return 'PORT-PASSIVE';
    if (pinType === 'provider_3V3'  ) return 'PORT-PASSIVE';
    if (pinType === 'provider_5V'   ) return 'PORT-PASSIVE';
    if (pinType === 'reserved'      ) return 'PORT-PASSIVE';
    if (pinType === 'reset_n'       ) return 'PORT-INPUT';
    if (pinType === 'scl_master'    ) return 'PORT-INPUT';
    if (pinType === 'sclk_master'   ) return 'PORT-OUTPUT';
    if (pinType === 'sclk_slave'    ) return 'PORT-INPUT';
    if (pinType === 'sda_master'    ) return 'PORT-BI-DIRECTIONAL';
    if (pinType === 'swclk'         ) return 'PORT-INPUT';
    if (pinType === 'swdio'         ) return 'PORT-BI-DIRECTIONAL';
    if (pinType === 'usb_data'      ) return 'PORT-BI-DIRECTIONAL';
    if (pinType === 'wake_in'       ) return 'PORT-INPUT';
    if (pinType === 'wake_out'      ) return 'PORT-OUTPUT';
}
//..............................................................................

//..............................................................................
function getPinByPinType(pinType)
{
    if (pinType === 'consumer_3V3'  ) return 'PIN-PASSIVE';
    if (pinType === 'consumer_5V'   ) return 'PIN-PASSIVE';
    if (pinType === 'cs_n_slave'    ) return 'PIN-INPUT';
    if (pinType === 'digital_in'    ) return 'PIN-INPUT';
    if (pinType === 'digital_io'    ) return 'PIN-INPUT';
    if (pinType === 'digital_out'   ) return 'PIN-OUTPUT';
    if (pinType === 'ethernet_data' ) return 'PIN-BI-DIRECTIONAL';
    if (pinType === 'gpio'          ) return 'PIN-BI-DIRECTIONAL';
    if (pinType === 'ground'        ) return 'PIN-PASSIVE';
    if (pinType === 'miso_master'   ) return 'PIN-INPUT';
    if (pinType === 'miso_slave'    ) return 'PIN-OUTPUT';
    if (pinType === 'mosi_slave'    ) return 'PIN-INPUT';
    if (pinType === 'passive'       ) return 'PIN-PASSIVE';
    if (pinType === 'power_consumer') return 'PIN-PASSIVE';
    if (pinType === 'power_provider') return 'PIN-PASSIVE';
    if (pinType === 'provider_3V3'  ) return 'PIN-PASSIVE';
    if (pinType === 'provider_5V'   ) return 'PIN-PASSIVE';
    if (pinType === 'reserved'      ) return 'PIN-PASSIVE';
    if (pinType === 'reset_n'       ) return 'PIN-INPUT';
    if (pinType === 'scl_master'    ) return 'PIN-INPUT';
    if (pinType === 'sclk_master'   ) return 'PIN-OUTPUT';
    if (pinType === 'sclk_slave'    ) return 'PIN-INPUT';
    if (pinType === 'sda_master'    ) return 'PIN-BI-DIRECTIONAL';
    if (pinType === 'swclk'         ) return 'PIN-INPUT';
    if (pinType === 'swdio'         ) return 'PIN-BI-DIRECTIONAL';
    if (pinType === 'usb_data'      ) return 'PIN-BI-DIRECTIONAL';
    if (pinType === 'wake_in'       ) return 'PIN-INPUT';
    if (pinType === 'wake_out'      ) return 'PIN-OUTPUT';
}
//..............................................................................

//..............................................................................
function getStandardGroups(groups, pins)
{
    var standardGroups   = [];
    var standardGroupIDs = [];
    var standardGroup    = [];
    var group            = [];
    var pin              = {};
    var groupID          = '';
    var textColor        = colorsHex.colorTextDark;
    var junctionColor    = colorsHex.colorSchJunction;
    var font             = fontsDS  .fontPort;
    var fontSize         = fontSizes.fontSizeDeviceSheet;
    var coordY           = 0;
    var gapCounter       = 0;
    var hasGaps          = false;
    var wireWidth        = 0.75;
    var wireColor        = colorsHex.colorNavy;

    for (var i = 0; i < Object.keys(groups).length; i++)
    {
        groupID = Object.keys(groups)[i];
        group   = groups[Object.keys(groups)[i]];

        if (isStandardGroup(group, groupID))
        {
            standardGroupIDs.push(Object.keys(groups)[i])
        }
    }

    for (i = 0; i < standardGroupIDs.length; i++)
    {
        groupID = standardGroupIDs[i];

        group = groups[standardGroupIDs[i]];

        if (group.gapFrequency)
        {
            hasGaps = true;
            gapCounter = 0;
        }

        standardGroup =
        [
        '    <svg',
            '        overflow    ="visible"',
            '        stroke      ="' + junctionColor + '"',
            '        stroke-width="0.1"',
            '        font-size   ="' + fontSize  + '"',
            '        id          ="' + 'GROUP-' + groupID   + '"',
            '        x           ="' + group.x   + '"',
            '        y           ="' + group.y   + '"',
            '        font-family ="' + font      + '"',
            '        fill        ="' + textColor + '"',
            '        >',
        ];

        coordY = 0;

        for (var j = 0; j < pins.length; j++)
        {
            pin = pins[j];

            if (pin.group === groupID)
            {
                if (hasGaps && gapCounter > group.gapFrequency -1)
                {
                    gapCounter = 0;

                    coordY = coordY + 10;
                }

                if (isPowerNet(pin))
                {
                    wireWidth = 3;
                    wireColor = getWireColor(group, pin);
                }
                else
                {
                    wireWidth = 0.75;
                    wireColor = colorsHex.colorNavy;
                }

                if (group.position === 'right')
                {
                    standardGroup.push('        <use  x="0"  y="' + (coordY + 5) + '" href="#' + getPinByPinType (pin.pin_type) + '" transform-origin="10 0%" transform="matrix(-1 0 0 1 0 0)"/>');

                    standardGroup.push('        <line x1="20" x2="70" '      +
                                                     'y1="'                  + (coordY + 5) +
                                                   '" y2="'                  + (coordY + 5) +
                                                   '" stroke="'              + wireColor +
                                                   '" stroke-width="'        + wireWidth +
                                                   '" shape-rendering="crispEdges" />');

                    standardGroup.push('        <use  x="0"  y="' +  coordY      + '" href="#' + getPortByPinType(pin.pin_type) + '" transform-origin="85 0%" transform="matrix(-1 0 0 1 0 0)"/>');

                    standardGroup.push('        <text x="81" y="' + (coordY + 8) + '">' + pin.id   + '</text>');
                    standardGroup.push('        <text x="-5" y="' + (coordY + 8) + '" text-anchor="end"  >' + pin.id   + '</text>');
                    standardGroup.push('        <text x="13" y="' + (coordY + 3) + '">' + pin.refs + '</text>');

                    standardGroup.push('');

                    if (hasGaps) gapCounter++;

                    coordY = coordY + 10
                }
                else
                {
                    standardGroup.push('        <use  x="150"  y="' + (coordY + 5) + '" href="#' + getPinByPinType (pin.pin_type) + '" />');

                    standardGroup.push('        <line x1="100" x2="150" '      +
                                                     'y1="'                  + (coordY + 5) +
                                                   '" y2="'                  + (coordY + 5) +
                                                   '" stroke="'              + wireColor +
                                                   '" stroke-width="'        + wireWidth +
                                                   '" shape-rendering="crispEdges" />');

                    standardGroup.push('        <use  x="0"    y="' +  coordY +      '" href="#' + getPortByPinType(pin.pin_type) + '" />');

                    standardGroup.push('        <text x="11"   y="' + (coordY + 8) + '">' + pin.id   + '</text>');
                    standardGroup.push('        <text x="175"  y="' + (coordY + 8) + '">' + pin.id   + '</text>');
                    standardGroup.push('        <text x="159"  y="' + (coordY + 3) + '" text-anchor="end"  >' + pin.refs + '</text>');

                    standardGroup.push('');

                    coordY = coordY + 10
                }
            }
        }

        standardGroup.push('    </svg>',);

        standardGroup.push('');

        standardGroups.push(standardGroup);
    }

    return standardGroups;
}
//..............................................................................

//..............................................................................
function getDescriptionByID(moduleID, meshMetaData, language)
{
    var modules = meshMetaData.modules;
    var module = {};
    var searchID = moduleID.replace('MB','CMPT-2000-');

    for (var i = 0; i < modules.length; i++)
    {
        module = modules[i];

        if (module.id === searchID)
        {
            if (language === languages.english.name) return module.description_en;
            if (language === languages.chinese.name) return module.description_zh;
        }
    }
}
//..............................................................................

//..............................................................................
function getSchPartElement(schPart)
{
    var element = '        ' +
        '<rect '             +
        'x="'                + schPart.x            + '" ' +
        'y="'                + schPart.y            + '" ' +
        'width="'            + schPart.width        + '" ' +
        'height="'           + schPart.height       + '" ' +
        'stroke="'           + colorsHex.colorStroke   + '" ' +
        'stroke-width="'     + '0.3'                + '" ' +
        'fill="'             + colorsHex.colorSchPart  + '" ' +
        'id="'               + schPart.id           + '" ' +
        ' />';

    element = '' + element;

    return element;
}
//..............................................................................

//..............................................................................
function getSchPartsGroup(schParts, componentEDA)
{
    var schPart     = {};
    var sheetHeight = componentEDA.deviceSheet.height;
    var fillColor   = colorsHex   .colorSchPart;
    var strokeColor = colorsHex   .colorStroke;
    var fontSize    = fontSizes   .fontSizeSchPart;
    var font        = fontsDS     .fontSchPart;

    var schPartsGroup =
        [
            '    <svg',
            '        overflow    ="visible'              + '"',
            '        stroke      ="' + strokeColor       + '"',
            '        stroke-width="0.1'                  + '"',
            '        font-size   ="' + fontSize          + '"',
            '        id          ="' + 'GROUP-SCH-PARTS' + '"',
            '        x           ="' + 0                 + '"',
            '        y           ="' + 0                 + '"',
            '        font-family ="' + font              + '"',
            '        fill        ="' + fillColor         + '"',
            '        >',
        ];

    for (var i = 0; i < schParts.length; i++)
    {
        schPart = schParts[i];

        schPart.width  = schPart.x2 - schPart.x1;
        schPart.height = schPart.y1 - schPart.y2;
        schPart.x      = schPart.x1;
        schPart.y      = sheetHeight - schPart.y1;

        schPartsGroup.push(getSchPartElement(schPart));
        schPartsGroup.push('        <text x="' + schPart.x + '"  y="' + (schPart.y -2 ) + '" fill="' + colorsHex.colorTextDark + '" font-weight="100" >' + componentEDA.id + '</text>');
        schPartsGroup.push('        <text x="' + schPart.x + '"  y="' + (schPart.y -12) + '" fill="' + colorsHex.colorTextDark + '" font-weight="700">'  + schPart    .id + '</text>');

        schPartsGroup.push('');
    }

    schPartsGroup.push('    </svg>');

    return schPartsGroup;
}
//..............................................................................

//..............................................................................
function getPinCoords(componentEDA, pin)
{
    var pins      = [];
    var pinCoords = {};
    var groups    = componentEDA.deviceSheet.groups;

    var pinGroup = groups[pin.group];

    for (var i = 0; i < componentEDA.pins.length; i++)
    {
        if (componentEDA.pins[i].group === pin.group)
        {
            pins.push(componentEDA.pins[i])
        }
    }

    for (i = 0; i < pins.length; i++)
    {
        if (pins[i].refs === pin.refs)
        {
            pinCoords.x = pinGroup.x;
            pinCoords.y = pinGroup.y + (i * 10);

            return pinCoords;
        }
    }

}
//..............................................................................

//..............................................................................
function getGroupLength(componentEDA, groupID)
{
    var pins = componentEDA.pins;

    var result = 0;

    for (var i = 0; i < pins.length; i++)
    {
        if (pins[i].group === groupID) result++
    }

    return result;
}
//..............................................................................

//..............................................................................
function getLabelInfo(componentEDA, label)
{
    var labelInfo = {};
    var group      = {};
    var groups     = componentEDA.deviceSheet.groups;
    var pins       = componentEDA.pins;
    var pin        = {};
    var pinCoords  = {};

    if (groups[label.parent])
    {
        group = groups[label.parent];

        group.length = getGroupLength(componentEDA, label.parent);

        labelInfo.height   = group.length * 10 ;

        if (group.gapFrequency)
        {
            var x = (labelInfo.height / group.gapFrequency) -10;

            labelInfo.height = labelInfo.height + x;
        }

        labelInfo.position = group.position;
        labelInfo.x        = group.x;
        labelInfo.y        = group.y + (labelInfo.height/2) + 3;
        labelInfo.rectY    = labelInfo.y - (labelInfo.height/2) - 2.6;

        if (labelInfo.position === 'right')
        {
            labelInfo.x = (labelInfo.x + 190);

            labelInfo.rectX = labelInfo.x - 10;

            labelInfo.textAnchor = 'start';
        }
        else
        {
            labelInfo.rectX = labelInfo.x - 15;

            labelInfo.x = (labelInfo.x - 25);

            labelInfo.textAnchor = 'end';
        }

        return labelInfo;
    }

    for (var i = 0; i < pins.length; i++)
    {
        if (pins[i].refs === label.parent)
        {
            pin = pins[i];

            pinCoords = getPinCoords(componentEDA, pin);

            labelInfo.x        = pinCoords.x - 25;
            labelInfo.y        = pinCoords.y + 8.4;
            labelInfo.height   = 10;
            labelInfo.position = groups[pin.group].position;
            labelInfo.rectY    = (labelInfo.y - 8.4);

            if (labelInfo.position === 'right')
            {
                labelInfo.x = (labelInfo.x + 215);

                labelInfo.rectX = labelInfo.x - 10;

                labelInfo.textAnchor = 'start';
            }
            else
            {
                labelInfo.rectX = labelInfo.x + 10;

                labelInfo.textAnchor = 'end';
            }

            return labelInfo;
        }
    }
}
//..............................................................................

//..............................................................................
function getPinElementsReserved(pins, group)
{
    var pinRefs;
    var coordY    = 0;
    var textColor = colorsHex.colorTextDark;
    var fontPort  = fontsDS .fontPort;
    var fontSize  = fontSizes.fontSizeDeviceSheet;

    var groupReserved =
        [
            '        <svg'                                ,
            '            id          ="GROUP-RSVD"'       ,
            '            x           ="' + group.x   + '"',
            '            y           ="' + group.y   + '"',
            '            font-family ="' + fontPort  + '"',
            '            fill        ="' + textColor + '"',
            '            font-size   ="' + fontSize  + '"',
            '            overflow    ="visible"'          ,
            '            stroke-width="0.1"'              ,
            '            >'                               ,
        ];

    for (var i = 0; i < pins.length; i++)
    {
        if (pins[i].pin_type === 'reserved')
        {
            pinRefs = pins[i].refs.split(',');
        }
    }

    for (i = 0; i < pinRefs.length; i++)
    {
        pinRefs[i] = pinRefs[i].trim();
    }

    for (i = 0; i < pinRefs.length; i++)
    {
        groupReserved.push('            <use  x="0"   y="' + (coordY + 5) + '" href       ="#PIN-PASSIVE"  />');
        groupReserved.push('            <text x="5"   y="' + (coordY + 3) + '">' + pinRefs[i] + '</text>');
        groupReserved.push('            <text x="-30" y="' + (coordY + 8) + '">RSVD</text>');

        coordY = coordY + 10
    }

    groupReserved.push('');

    groupReserved.push('    </svg>',);

    return groupReserved;
}
//..............................................................................

//..............................................................................
function useExtendedPorts(componentEDA)
{
    var pins = componentEDA.pins;

    for (var i = 0; i < pins.length; i++)
    {
        if (pins[i].id.length > 14) return true;
    }

    return false;
}
//..............................................................................

//..............................................................................
function extendPorts(svgMarkup)
{
    for (var i = 0; i < svgMarkup.length; i++)
    {
        svgMarkup[i] = svgMarkup[i].replace('path d="m 0, 0 h 95 l 5, 5 l -5, 5 h -95 v -10"'     ,'path d="m 0, 0 h 105 l 5, 5 l -5, 5 h -105 v -10"'     );
        svgMarkup[i] = svgMarkup[i].replace('path d="m 5, 0 h 95 v 10 h -95 l -5, -5 l 5, -5 "'   ,'path d="m 5, 0 h 105 v 10 h -105 l -5, -5 l 5, -5 "'   );
        svgMarkup[i] = svgMarkup[i].replace('path d="m 5, 0 h 90 l 5, 5 l -5, 5 h -90 l -5, -5 z"','path d="m 5, 0 h 100 l 5, 5 l -5, 5 h -100 l -5, -5 z"');
        svgMarkup[i] = svgMarkup[i].replace('path d="m 0, 0 h 100 v 10 h -100 z"'                 ,'path d="m 0, 0 h 110 v 10 h -110 z"'                   );

        svgMarkup[i] = svgMarkup[i].replace('x="81"','x="71"');
    }

    return svgMarkup;
}
//..............................................................................

//..............................................................................
function getDeviceSheetLabels(componentEDA)
{
    var labels = componentEDA.deviceSheet.labels;

    var fontSize = fontSizes.fontSizeDeviceSheet;
    var font     = fontsDS  .fontLabel;
    var labelInfo;
    var label;
    var labelColor;

    var labelsGroup =
        [
            '    <svg',
            '        overflow    ="visible'              + '"',
            '        stroke-width="0.1'                  + '"',
            '        font-weight ="700'                  + '"',
            '        font-size   ="' + fontSize          + '"',
            '        id          ="' + 'GROUP-LABELS'    + '"',
            '        x           ="' + 0                 + '"',
            '        y           ="' + 0                 + '"',
            '        font-family ="' + font              + '"',
            '        >',
        ];

    for (var i = 0; i < labels.length; i++)
    {
        label = labels[i];

        labelColor = getLabelColor(label.color);

        labelInfo = getLabelInfo(componentEDA, label);

        if (labelInfo)
        {
            labelsGroup.push('            <text x="'           + labelInfo.x +
                             '" y="'           + labelInfo.y +
                             '" fill="'        + labelColor  +
                             '" font-size="9'  +
                             '" text-anchor="' + labelInfo.textAnchor +
                             '">' + label.text + '</text>');

            labelsGroup.push('            <rect x="' + labelInfo.rectX        + '" y="' + labelInfo.rectY + '" fill="' + labelColor + '" width="5" height="' + labelInfo.height + '" />');
        }
    }

    labelsGroup.push('    </svg>');

    return  labelsGroup;
}
//..............................................................................

//..............................................................................
function getSpecialFunctionGroup(groupID, group, pins)
{
    var index;

    var stringX = '        x           ="' + group.x + '"';
    var stringY = '        y           ="' + group.y + '"';

    var specialFunctionGroupsTemplate = getSpecialFunctionGroupsTemplate();

    var specialFunctionGroup = specialFunctionGroupsTemplate[groupID];

    index = specialFunctionGroup.length -1;

    var refElements = getSpecialFunctionGroupPinRefs(specialFunctionGroup, pins);

    for (var i = 0; i < refElements.length; i++)
    {
        specialFunctionGroup = insertIntoArrayAt(specialFunctionGroup, index, refElements[i]);
    }

    specialFunctionGroup = insertIntoArrayAt(specialFunctionGroup, 3, stringX);
    specialFunctionGroup = insertIntoArrayAt(specialFunctionGroup, 3, stringY);

    if (group.position === 'right')
    {
        flipSpecialFunctionGroup(specialFunctionGroup)
    }

    return specialFunctionGroup
}
//..............................................................................

//..............................................................................
function getSpecialFunctionGroupIds(groups)
{
    var groupIds = [];

    for (var i = 0; i < Object.keys(groups).length; i++)
    {
        if (isInArray(Object.keys(groups)[i], specialFunctionNames))
        {
            groupIds.push(Object.keys(groups)[i])
        }
    }

    return groupIds;
}
//..............................................................................

//..............................................................................
function getSpecialFunctionGroupsAll(groups, pins)
{
    var specialFunctionGroups = [];

    var groupIds = getSpecialFunctionGroupIds(groups);
    var groupID = '';
    var specialFunctionGroup = [];

    for (var i = 0; i < groupIds.length; i++)
    {
        groupID = groupIds[i];

        if (groups[groupID])
        {
            specialFunctionGroup = getSpecialFunctionGroup(groupID, groups[groupID], pins);

            appendArrayToArray(specialFunctionGroup, specialFunctionGroups);

        }
    }

    return specialFunctionGroups;
}
//..............................................................................

//..............................................................................
function getDeviceSheetLogoBlock(componentEDA)
{
    var deviceSheetID = componentEDA.id;

    var logoBlock = getDeviceSheetLogoBlockTemplate();

    for (var i = 0; i < logoBlock.length; i++)
    {
        logoBlock[i] = replaceAll(logoBlock[i], '{{sheet-name}}', deviceSheetID);
    }

    return logoBlock
}
//..............................................................................

//..............................................................................
function getElementsDeviceSheetMB(componentMB)
{
    var i;
    var group        = {};
    var pin          = {};
    var pinInfo      = {};
    var schParts     = componentMB.deviceSheet.schParts;
    var groups       = componentMB.deviceSheet.groups;
    var sheetHeight  = componentMB.deviceSheet.height;
    var pins         = componentMB.pins;

    svgDefs.push(getSchPartsGroup(schParts, componentMB));

    groups = setGroupDefaults(groups, sheetHeight);

    for (i = 0; i < pins.length; i++)
    {
        pin = pins[i];

        pinInfo = componentInfo.getPinById(pin.id);

        group = groups[pin.id];

        if (!group) group = groups[pin.group];

        if (group)
        {
            if (isPowerGroup(group, pin))
            {
                svgDefs.push(getPowerGroup(group, pin, pinInfo));
            }
        }
    }

    svgDefs.push(getSpecialFunctionGroupsAll(groups, pins));

    standardGroups = getStandardGroups(groups, pins);

    for (i = 0; i < standardGroups.length; i++)
    {
        svgDefs.push(standardGroups[i]);
    }

    if (hasRemoteGPIOs(groups))
    {
        svgDefs.push(getPinElementsRemoteGPIO(pins, groups['REMOTE-GPIOS']));
    }

    if (hasMcuGPIOs(groups))
    {
        svgDefs.push(getPinElementsRemoteGPIO(pins, groups['REMOTE-GPIOS']));
    }

    if (hasReservedPins(pins))
    {
        svgDefs.push(getPinElementsReserved(pins, groups['RSVD']));
    }

    if (hasLabels(componentMB))
    {
        svgDefs.push(getDeviceSheetLabels(componentMB));
    }

    svgDefs.push(getDeviceSheetLogoBlock    (componentMB));

    svgDefs.push(getDeviceSheetTitleElements(componentMB, meshMetaData, sheetLanguage));

    useElements = getUseElements(svgDefs);
}
//..............................................................................

//..............................................................................
function assembleDeviceSheet(componentEDA)
{
    appendArrayToArray(constDeviceSheet.headerRoot, svgDeviceSheet);

    appendArrayToArray(constDeviceSheet.headerDefs, svgDeviceSheet);

    for (var i = 0; i < svgDefs.length; i++)
    {
        appendArrayToArray(svgDefs[i], svgDeviceSheet);
    }

    svgDeviceSheet.push(constDeviceSheet.footerDefs);

    appendArrayToArray(constDeviceSheet.headerBody, svgDeviceSheet);

    appendArrayToArray(useElements, svgDeviceSheet);

    svgDeviceSheet.push(constDeviceSheet.footerRoot);

    if (useExtendedPorts(componentEDA))
    {
        svgDeviceSheet = extendPorts(svgDeviceSheet);
    }
}
//..............................................................................

//..............................................................................
function generateDeviceSheetMB(componentMB, language)
{
    console.time   ('Generated Device Sheet (' + language.nameFormal + ') : ' + componentMB.id);

    sheetLanguage = language;

    getComponentInfo(componentMB);

    var stringItems = '/' + directoryNames.items + '/';
    var itemFolder  = stringsElectronics.prefixItem + componentMB.id;

    var outputPath = directoryNames.outputProductDoc + language.suffix + stringItems + itemFolder;

    var fileName = stringsElectronics.prefixItem + componentMB.id + fileNames.deviceSheet + fileExtensions.svg;

    getElementsDeviceSheetMB(componentMB);

    assembleDeviceSheet(componentMB);

    writeFileToDisk(svgDeviceSheet.join('\n'), outputPath, fileName);

    deviceSheetSchParts = [];
    svgElements         = {};
    svgDefs             = [];
    svgDeviceSheet      = [];

    console.timeEnd('Generated Device Sheet (' + language.nameFormal + ') : ' + componentMB.id);
}
//..............................................................................

//..............................................................................

addToNameSpace(generateDeviceSheetMB, 'generateDeviceSheetMB');
