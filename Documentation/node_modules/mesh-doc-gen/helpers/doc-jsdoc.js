//..............................................................................

//..............................................................................

const
{
    docUtils,
    docConstants,
} = cxq;

const
{
    commentBlockEnd,
    moduleExports,
    commentBlockStart,
    constPrefix,
    contentStart,
    equalsSubString,
    memberOfPrefix,
    methodDeclarationInfix,
    methodDeclarationSuffix,
    namespaceDescriptionPrefixEn,
    namespaceDescriptionPrefixZh,
    namespacePrefix,
    roundBracketsClose,
    roundBracketsOpen,
    semiColon,
    singleBackTick,
} = require('../static/jsdoc');

//..............................................................................

//..............................................................................
const {fs, path} = cxq;

const
{
    loadTextFileIntoArray,
    writeFileToDisk,
} = docUtils;

//..............................................................................

var
{
    directoryNames,
    stringsUtil,
} = docConstants;

//..............................................................................

//..............................................................................
function writeSpacerBlock(jsFile)
{
    jsFile.push('//..............................................................................' + stringsUtil.newLine);
    jsFile.push(                                                                                     stringsUtil.newLine);
    jsFile.push('//..............................................................................' + stringsUtil.newLine);
}
//..............................................................................

//..............................................................................
function writeCommentFooter(jsFile)
{
    jsFile.push(commentBlockEnd + stringsUtil.newLine);
}
//..............................................................................

//..............................................................................
function doPostProcess(directory)
{
    var exportName = '';
    var cleanFile = [];
    var fileToClean = [];

    console.time    ('Post Production Generation Completed   ');

    var outputFiles = fs.readdirSync(directoryNames.outputIntermediate + directoryNames.js + directory);

    for (var i = 0; i < outputFiles.length; i++)
    {
        fileToClean = loadTextFileIntoArray(path.resolve(directoryNames.outputIntermediate + directoryNames.js + directory + '/' + outputFiles[i]));

        for (var j = 0; j < fileToClean.length; j++)
        {
            if (fileToClean[j].includes('const '))
            {
                exportName = fileToClean[j].trim();

                exportName = exportName.substring(exportName.indexOf(' '), exportName.lastIndexOf(' ')).trim();
            }
        }

        var commaLines = [];

        for (j = 0; j < fileToClean.length; j++)
        {
            if (fileToClean[j].charAt((fileToClean[j].length) - 2) === ',')
            {
                commaLines.push(fileToClean[j]);
            }
        }

        var finalCommaLine = commaLines[commaLines.length - 1];

        for (j = 0; j < fileToClean.length; j++)
        {
            if (fileToClean[j] === finalCommaLine)
            {
                finalCommaLine = finalCommaLine.replace(/,$/, '').trim();
                // finalCommaLine = finalCommaLine.trim(finalCommaLine.replace(/,$/, '')); //
                // TODO check this
                cleanFile.push(finalCommaLine + stringsUtil.newLine);
            }
            else
            {
                cleanFile.push(fileToClean[j]);
            }
        }

        cleanFile.push('};' + stringsUtil.newLine + stringsUtil.newLine + moduleExports + exportName + semiColon);

        writeFileToDisk(cleanFile.join(''), directoryNames.outputIntermediate + directoryNames.js + directory, outputFiles[i]);

        fileToClean = [];
        commaLines  = [];
        cleanFile   = [];
    }

    console.log    ('---------------------------------------');
    console.timeEnd('Post Production Generation Completed   ');
    console.log    ('---------------------------------------');
}
//..............................................................................

//..............................................................................
function getMethodDeclaration(rawText, method)
{
    if (method.shortName === undefined )
    {
        method.shortName = '';
        delete(method.shortName);
    }

    if (method.parameters === undefined )
    {
        method.parameters = '';
        delete(method.parameters);
    }

    if (rawText)
    {
        return method.shortName + methodDeclarationInfix + method.shortName + rawText.substring(rawText.indexOf('('), rawText.length).trim() + methodDeclarationSuffix;
    }

    var declarationString = method.shortName + methodDeclarationInfix + method.shortName;
    var parameterString = '';

    if (method.parameters)
    {
        for (var i = 0; i <
        method.parameters.length; i++)
        {
            if (!method.parameters[i].name.includes('.'))
                parameterString = parameterString + method.parameters[i].name + ', '
        }

        parameterString = parameterString.substring(0, parameterString.length -2);
    }

    return declarationString + roundBracketsOpen + parameterString + roundBracketsClose + methodDeclarationSuffix;
}
//..........................................................................

//..........................................................................
function writeNamespaceHeader(namespace)
{
    var basicCache = []; basicCache.addItem = ''; //TODO remove this line
    var jsFile     = [];

    if (namespace.isChild === undefined)
    {
        namespace.isChild = false;
        delete(namespace.isChild);
    }

    jsFile.push(commentBlockStart                                                  + stringsUtil.newLine);
    jsFile.push(namespaceDescriptionPrefixEn + namespace.fullName + singleBackTick + stringsUtil.newLine);
    jsFile.push('<b>language_en</b>'                                               + stringsUtil.newLine);
    jsFile.push(namespacePrefix              + namespace.fullName                  + stringsUtil.newLine);

    if (namespace.isChild)
    {
        jsFile.push(memberOfPrefix         + namespace.parent                      + stringsUtil.newLine);
    }

    jsFile.push(commentBlockEnd                                                    + stringsUtil.newLine);
    jsFile.push('//' + stringsUtil.unique + namespace.shortName + equalsSubString  + stringsUtil.newLine);
    jsFile.push('//' + stringsUtil.unique + contentStart                           + stringsUtil.newLine);

    writeSpacerBlock(jsFile);

    jsFile.push(commentBlockStart                                                  + stringsUtil.newLine);
    jsFile.push(namespaceDescriptionPrefixZh + namespace.fullName + singleBackTick + stringsUtil.newLine);
    jsFile.push('<b>language_zh</b>'                                               + stringsUtil.newLine);
    jsFile.push(namespacePrefix              + namespace.fullName                  + stringsUtil.newLine);

    if (namespace.isChild)
    {
        jsFile.push(memberOfPrefix         + namespace.parent                      + stringsUtil.newLine);
    }

    jsFile.push(commentBlockEnd                                                    + stringsUtil.newLine);
    jsFile.push(constPrefix + namespace.shortName + equalsSubString                + stringsUtil.newLine);

    writeSpacerBlock(jsFile);
    jsFile.push(contentStart                                                       + stringsUtil.newLine);

    return jsFile;
}

var exported  =
{
    getMethodDeclaration,
    doPostProcess,
    writeCommentFooter,
    writeNamespaceHeader,
    writeSpacerBlock,
};
//..............................................................................

//..............................................................................

module.exports = exported;
