//..............................................................................
console.time    ('Utils Modules Loaded                   ');
//..............................................................................

const {fs, path, util} = cxq;

//..............................................................................
const
{
    forceDirectorySync,
    isInteger,
    addProperties,
    isArray,
    isArrayWithElements,
    isObject,
} = util;
//..............................................................................
const
{
    languages,
    directoryNames,
    fileNames,
    fileTypes,
    stringsUtil,
    filenameLanguageExtensions,
} = cxq.meshDocGen;
//..............................................................................

console.timeEnd('Utils Modules Loaded                   ');

const asciiFileExtensions =
[
    '.bat', '.css' , '.htm', '.html',
    '.js' , '.json', '.md' , '.ps1' ,
    '.svg', '.txt' , '.xml', '.yaml',
];
//..............................................................................

//..............................................................................
function writeFileToDisk(content, filePath, filename)
{
    forceDirectorySync(filePath);

    fs.openSync     (path.resolve(filePath, filename  ), 'w'    );
    fs.writeFileSync(path.resolve(filePath, filename  ), content, 'utf8');
    fs.closeSync(0);
}
//..............................................................................

//..............................................................................
function writeObjectToDiskJSON(content, filePath, filename)
{
    console.log('Writing JSON Object: ' + filename);

    writeFileToDisk(JSON.stringify(content, null, 4), filePath, filename);

    console.log('Writing JSON Object Complete: ' + filename);
}
//..............................................................................

//..............................................................................
function loadObjectJSON(filePath)
{
    return JSON.parse(loadTextFileIntoString(filePath));
}
//..............................................................................

//..............................................................................
function isDirectory (path)
{
    return fs.statSync(path).isDirectory();
}
//..............................................................................

//..............................................................................
function fileExists(filePath)
{
    try
    {
        fs.statSync(filePath);
    }catch(err)
    {
        if(err.code === 'ENOENT') return false;
    }
    return true;
}
//..............................................................................

//..............................................................................
function directoryExists(directoryPath)
{
    try
    {
        fs.statSync(directoryPath);
    }
    catch(err)
    {
        if(err.code === 'ENOENT') return false;
    }

    return true;
}
//..............................................................................

//..............................................................................
function copyFileSync(source, target)
{
    var targetFile = target;

    // console.log('Copying: ' + path.resolve(source) + ' to ' + path.resolve(targetFile));
    console.log('Copying: ' + source + ' to ' + targetFile);

    try
    {
        if (fileExists(targetFile))
        {
            if (isDirectory(targetFile))
            {
                targetFile = path.join(targetFile, path.basename(source));
            }
        }

        if (!directoryExists(path.dirname(targetFile)))
        {
            forceDirectorySync(path.dirname(targetFile));
        }

        fs.writeFileSync(targetFile, fs.readFileSync(source));
    }
    catch(err)
    {
        console.log('===================================');
        console.log('File Copy Failed');
        console.log('------------------------');
        console.log(err);
        console.log('------------------------');
        console.log('Target: ' + path.basename(targetFile));
        console.log('Target: ' + path.dirname (targetFile));
        console.log('Source: ' + path.basename(source));
        console.log('Source: ' + path.dirname (source));
        console.log('-----------------------------------');
    }
}
//..............................................................................

//..............................................................................
function replaceAll(s, oldStr, newStr)
{
    var z = s;

    z = z.split(oldStr).join(newStr);

    return z;
}
//..............................................................................

//..............................................................................
function replaceAt(s, index, replacement)
{
    return s.substr(0, index) + replacement + s.substr(index + replacement.length);
}
//..............................................................................

//..............................................................................
function replaceBetween(s, start, end, what)
{
    return s.substring(0, start) + what + s.substring(end);
}
//..............................................................................

//..............................................................................
function copyFolderRecursiveSync(source, target, filter, log = '')
{
    var files = [];

    var targetFolder = path.join(target, path.basename(source));

    if (!fs.existsSync(targetFolder))
    {
        forceDirectorySync(targetFolder);
    }

    if (fs.statSync(source).isDirectory())
    {
        files = findFiles(source, '', log);

        for (var i = 0; i < files.length; i++)
        {
            files[i] = path.basename(files[i]);
        }

        files.forEach( function ( file )
        {
            var currentSource = path.join(source, file);

            if (fs.statSync(currentSource).isDirectory())
            {
                copyFolderRecursiveSync(currentSource, targetFolder, filter, log);
            }
            else
            {
                if (filter)
                {
                    if (path.extname(currentSource) === filter)
                        copyFileSync(currentSource, targetFolder);
                }
                else
                {
                    copyFileSync(currentSource, targetFolder);
                }
            }
        });
    }

    console.log('=======================================');
    console.log('Recursively Copy Complete');
    console.log('Source: ' + path.resolve(source));
    console.log('Target: ' + path.resolve(target));
    console.log('Filter: ' + filter);
    console.log('---------------------------------------');
}
//..............................................................................

//..............................................................................
function deleteEmptyFoldersRecursively(folder)
{
    if (!fs.statSync(folder).isDirectory())
    {
        return;
    }

    var files = findFiles(folder, '', 'deleteEmptyFoldersRecursively');

    if (files.length > 0)
    {
        files.forEach(function(file)
        {
            deleteEmptyFoldersRecursively(file);
        });

        files = fs.readdirSync(folder);
    }

    if (files.length === 0)
    {
        fs.rmdirSync(folder);
    }
}
//..............................................................................

//..............................................................................
function getUniqueArray(array)
{
    function onlyUnique(value, index, self)
    {
        return self.indexOf(value) === index;
    }

    return array.filter(onlyUnique);
    //
    ////    if (typeof array !== 'undefined')
    //{
    //    return unique(array);
    //}
    //
    //return null;
}
//..............................................................................

//..............................................................................
function isAsciiFile(fileString)
{
    var extension;

    if (fileString[0] !== '.')
    {
        extension = path.extname(fileString);
    }
    else
    {
        extension = fileString;
    }

    return isInArray(extension, asciiFileExtensions);
}
//..............................................................................

//..............................................................................
function replaceAllInDirectory (searchPath, oldStr, newStr, filter = '')
{
    var fileContent = '';

    if (!isAsciiFile(filter)) throw new TypeError('"replaceAllInDirectory" only works with specific ASCII file types.');
    if (filter.length < 2   ) throw new TypeError('"replaceAllInDirectory" requires a file type to be specified.'     );

    console.time('Time Taken: ')

    var filesFound = findFiles(searchPath, filter, 'replaceAllInDirectory: ' + searchPath);

    console.time('Replace All Time: ')

    console.log('===============================' );
    console.log('Replacing in directory...'       );
    console.log('------'                          );
    console.log('Search Path: ', searchPath       );
    console.log('Old String : ', oldStr           );
    console.log('New String : ', newStr           );
    console.log('Filter     : ', filter           );
    console.log('Files Found: ', filesFound.length)

    for (var i = 0; i < filesFound.length; i++)
    {
        fileContent = loadTextFileIntoString(filesFound[i]);

        if (fileContent.indexOf(oldStr) > -1)
        {
            fileContent = replaceAll(fileContent, oldStr, newStr);

            writeFileToDisk(fileContent, path.dirname(filesFound[i]), path.basename(filesFound[i]));
        }
    }
    console.log('-------------------------------' )
    console.timeEnd('Time Taken: ')
    console.log('-------------------------------' )
}
//..............................................................................

//..............................................................................
function loadTextFileIntoArray (filePath)
{
    return fs.readFileSync(filePath).toString().split("\n");
}
//..............................................................................

//..............................................................................
function loadTextFileIntoString (filePath)
{
    return fs.readFileSync(filePath, "utf8").toString();
}
//..............................................................................

//..............................................................................
function substringCount (string, subString)
{
    string    += '';
    subString += '';

    if (subString.length <= 0)
    {
        return string.length + 1;
    }

    subString = subString.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

    return (string.match(new RegExp(subString, 'gi')) || []).length;
}
//..............................................................................

//..............................................................................
function stripRelativeFoldersFromPath (pathText)
{
    pathText = replaceAll(pathText, '\\', '/');

    if (!pathText.includes('/')) return pathText;

    while (pathText.includes('..'))
    {
        pathText = pathText.substring(1);
    }

    return pathText.substring(2);
}
//..............................................................................

//..............................................................................
function getLastFolderFromPath(path)
{
    path = replaceAll(path, '\\', '/');

    var pathElements = path.split('/');

    return (pathElements[pathElements.length-1]);
}
//..............................................................................

//..............................................................................
function isInArray(value, array)
{
    return array.indexOf(value.valueOf()) > -1;
}
//..............................................................................

//..............................................................................
function addBlankLineToArray(array)
{
    return (array.join('\n') + stringsUtil.newLine).split('\n');
}
//..............................................................................

//..............................................................................
function insertIntoArrayAt(array, index, item)
{
    array.splice(index, 0, item);

    return array;
}
//..............................................................................

//..............................................................................
function deleteItemFromArray(array, index)
{
    array.splice(index, 1);

    return array;
}
//..............................................................................

//..............................................................................
function getFileNameLanguageSuffix(filePath)
{
    return filePath.substring(filePath.length - 6, filePath.length - 3);
}
//..............................................................................

//..............................................................................
function isFileLocalised(filename)
{
    return getLanguageFromFilename(filename) !== undefined;
}
//..............................................................................

//..............................................................................
function mismatchedLocalization(targetFile, targetPath)
{
    if (!isFileLocalised(targetFile)) return false;

    var fileLanguage = getLanguageFromFilename(targetFile);
    var pathLanguage = getLanguageFromFilePath(targetPath);

    return fileLanguage !== pathLanguage;
}
//..............................................................................

//..............................................................................
function deLocalizeFilename(fileString)
{
    var result = fileString;

    result = result.replace(filenameLanguageExtensions.productsEn, '');
    result = result.replace(filenameLanguageExtensions.familiesEn   , '');
    result = result.replace(filenameLanguageExtensions.familiesZh   , '');
    result = result.replace(filenameLanguageExtensions.generalEn    , '');
    result = result.replace(filenameLanguageExtensions.generalZh    , '');
    result = result.replace(filenameLanguageExtensions.imagesEn     , '');
    result = result.replace(filenameLanguageExtensions.imagesZh     , '');
    result = result.replace(filenameLanguageExtensions.productsEn   , '');
    result = result.replace(filenameLanguageExtensions.productsZh   , '');

    result = result.replace(filenameLanguageExtensions.basicEn, '');
    result = result.replace(filenameLanguageExtensions.basicZh, '');

    return result;
}
// .............................................................................

// .............................................................................
function deLocalizeFilePath(fileString)
{
    if (fileString.indexOf('/') < 0 && fileString.indexOf('\\') < 0)
    {
        return deLocalizeFilename(path.basename(fileString));
    }

    var result = fileString.substring(0, fileString.lastIndexOf('.'));

    var extension = path.extname(fileString);

    result = result.replace(filenameLanguageExtensions.basicEn + '.', '');
    result = result.replace(filenameLanguageExtensions.basicZh + '.', '');

    result = result.replace(filenameLanguageExtensions.familiesEn   , '');
    result = result.replace(filenameLanguageExtensions.familiesZh   , '');
    result = result.replace(filenameLanguageExtensions.generalEn    , '');
    result = result.replace(filenameLanguageExtensions.generalZh    , '');
    result = result.replace(filenameLanguageExtensions.imagesEn     , '');
    result = result.replace(filenameLanguageExtensions.imagesZh     , '');
    result = result.replace(filenameLanguageExtensions.productsEn   , '');
    result = result.replace(filenameLanguageExtensions.productsZh   , '');

    result = result + extension;

    return result;
}
// .............................................................................

// .............................................................................
function copyImages(source, targetPath, logMessage = '', imageTypes = fileTypes.images)
{
    console.log('===============================================================');
    console.log('Log   : ' + logMessage);
    console.log('Source: ' + path.resolve(source    ));
    console.log('Target: ' + path.resolve(targetPath));
    console.log('---------------------------------------------------------------');

    var imageFiles = [];

    var directoryPartialsImage = directoryNames.source + directoryNames.partials + directoryNames.productDoc + directoryNames.images;

    for (var i = 0; i < imageTypes.length; i++)
    {
        copyFolderRecursiveSync(directoryPartialsImage, targetPath, imageTypes[i]);
    }

    for (i = 0; i < imageTypes.length; i++)
    {
        imageFiles = findFiles(source, imageTypes[i], 'imageFiles');

        for (var j in imageFiles)
        {
            var sourceFile = imageFiles[j];

            var targetFile = targetPath + sourceFile.substring(source.length);

            if (!mismatchedLocalization(targetFile, targetPath))
            {
                var imageName = deLocalizeFilePath(path.basename(targetFile));

                var imagePath = path.dirname(targetFile);

                targetFile = imagePath + '/' + imageName;

                copyFileSync(sourceFile, targetFile);
            }
        }
    }

    deleteEmptyFoldersRecursively(targetPath);
}
//..............................................................................

//..............................................................................
function sortAlphaNum(a,b)
{
    var reA = /[^a-zA-Z]/g;
    var reN = /[^0-9]/g;

    var aA = a.replace(reA, "");
    var bA = b.replace(reA, "");
    if(aA === bA) {
        var aN = parseInt(a.replace(reN, ""), 10);
        var bN = parseInt(b.replace(reN, ""), 10);
        return aN === bN ? 0 : aN > bN ? 1 : -1;
    } else {
        return aA > bA ? 1 : -1;
    }
}
//..............................................................................

//..............................................................................
function inSameDirectory(fileA, fileB)
{
    var pathA = path.resolve(path.dirname(fileA));
    var pathB = path.resolve(path.dirname(fileB));

    return pathA === pathB
}
//..............................................................................

//..............................................................................
function filenameNoExtension(filePath)
{
    return path.basename(filePath).substring(0, path.basename(filePath).lastIndexOf('.'));
}
//..............................................................................

//..............................................................................
function injectMarkdownFile(markdownTarget, markdownSource)
{
    var markdownSourceArray = [];

    if(Array.isArray(markdownSource))
    {
        markdownSourceArray = markdownSource;
    }
    else
    {
        markdownSourceArray = loadTextFileIntoArray(markdownSource);
    }

    if (!markdownTarget[markdownTarget.length -1] === '')
    {
        markdownTarget.push('');
    }

    for (var i = 0; i < markdownSourceArray.length; i++)
    {
        markdownTarget.push(markdownSourceArray[i]);
    }

    if (!markdownTarget[markdownTarget.length -1] === '')
    {
        markdownTarget.push('');
    }

    return markdownTarget;
}
//..............................................................................

//..............................................................................
/*
function getSafeNamePathString(string, replacement = '_')
{
    var illegalRe = /[\/?<>\\:*|"]/g;
    var controlRe = /[\x00-\x1f\x80-\x9f]/g;
    var reservedRe = /^\.+$/;
    var windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
    var windowsTrailingRe = /[. ]+$/;

    return string
        .replace(illegalRe, replacement)
        .replace(controlRe, replacement)
        .replace(reservedRe, replacement)
        .replace(windowsReservedRe, replacement)
        .replace(windowsTrailingRe, replacement);
}
*/
//..............................................................................

//..............................................................................
function getLanguageFromFilePath(filePath)
{
    var language = {};

    var languageSuffix = filePath.substring(filePath.length -3);

    for (var i = 0; i < Object.keys(languages).length; i++)
    {
        language = languages[Object.keys(languages)[i]];

        if (languageSuffix === language.suffix)
        {
            return language.string;
        }
    }
}
//..............................................................................

//..............................................................................
function getLanguageFromFilename(filename)
{
    var language = {};

    var languageSuffix = filename.substring(filename.lastIndexOf('.') -3, filename.lastIndexOf('.'));

    for (var i = 0; i < Object.keys(languages).length; i++)
    {
        language = languages[Object.keys(languages)[i]];

        if (languageSuffix === language.suffix)
        {
            return language.string;
        }
    }
}
//..............................................................................

//..............................................................................
function removeEndOfStringCharacter(character, string)
{
    if (string[string.length - 1] === character) string = string.substring(0, string.length - 1);

    return string;
}
//..............................................................................

//..............................................................................
function truncateToSingleSpace(string)
{
    while (substringCount(string, ' ') > 2) string = string.substring(0, string.length - 1).trim();

    return string;
}
//..............................................................................

//..............................................................................
function getFileSubset(fileSet, fileExtension)
{
    var fileSubset = [];

    for (var i = 0; i < fileSet.length; i++)
    {
        if (path.extname(fileSet[i]) === fileExtension)
        {
            fileSubset.push(fileSet[i])
        }
    }

    return fileSubset;
}
//..............................................................................

//..............................................................................
function getSpacerString(spaceCount)
{
    var result = '';

    while (result.length < spaceCount) result = result + ' ';

    return result;
}
//..............................................................................
// appendArrayToTextFile
//..............................................................................
function appendArrayToArray(arraySource, arrayTarget)
{
    for (var i = 0; i < arraySource.length; i++)
    {
        arrayTarget.push(arraySource[i]);
    }

    return arrayTarget;
}
//..............................................................................

//..............................................................................
function convertLetterToNumber(letter)
{
    var result = 0;
    var length = letter.length;

    for (var i = 0; i < length; i++)
    {
        result += (letter.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);
    }
    return result;
}
//..............................................................................

//..............................................................................
function getCoordinateFromLetter(letter)
{
    var result = convertLetterToNumber(letter);

    if (result > 8)
    {
        result = result -1;
    }

    return result;
}
//..............................................................................

//..............................................................................
function isValidHexColor(hexColor)
{
    return /^#[0-9A-F]{6}$/i.test(hexColor)
}
//..............................................................................

//..............................................................................
function getFilesObject(filenameString, filesList)
{
    var targetFilesObject = {};
    var filename          = '';

    for (var i = 0; i < filesList.length; i++)
    {
        if (filesList[i].indexOf(filenameString) > -1)
        {
            filename = path.basename(filesList[i]);

            targetFilesObject[filename] = filesList[i];
        }
    }

    return targetFilesObject;
}
//..............................................................................

//..............................................................................
function getFilesArray(filenameString, filesList)
{
    var targetFilesArray = [];

    for (var i = 0; i < filesList.length; i++)
    {
        if (filesList[i].indexOf(filenameString) > -1)
        {
            targetFilesArray.push(filesList[i]);
        }
    }

    return targetFilesArray;
}
//..............................................................................

//..............................................................................
function getIdFromArrayHTML(htmlArray)
{
    var id = htmlArray[0].substring(4);

    id = id.substring(0, id.indexOf(' ')).trim();

    return id;
}
//..............................................................................

//..............................................................................
function isSectionContentFile(filePath)
{
    const sectionContentFileNames =
    [
       '-description.md',
       '-description-en.md',
       '-description-zh.md',
       '-usage.md',
       '-usage-en.md',
       '-usage-zh.md',
    ];

    for (var i = 0; i < sectionContentFileNames.length; i++)
    {
        if (filePath.indexOf(sectionContentFileNames[i]) > -1)
        {
            return true;
        }
    }

    return false;
}
//..............................................................................

//..............................................................................
function isDeviceFamilyFile(fileObject)
{
    if (fileObject.fullPath.indexOf(directoryNames.items      ) > -1) return false;
    if (fileObject.fullPath.indexOf(directoryNames.docsGeneral) > -1) return false;
    if (fileObject.fullPath.indexOf(fileNames.images          ) > -1) return false;
    if (fileObject.fullPath.indexOf(fileNames.index           ) > -1) return false;
    if (fileObject.fullPath.indexOf(fileNames.toc             ) > -1) return false;

    return fileObject.fullPath.indexOf(directoryNames.deviceFamilies) > -1;
}
//..............................................................................

//..............................................................................
function isItemReadmeFile(itemFilePath)
{
    if (itemFilePath.indexOf(fileNames.infixFamily   ) > -1) return false;
    if (itemFilePath.indexOf(fileNames.infixItemClass) > -1) return false;
    if (itemFilePath.indexOf(fileNames.infixImages   ) > -1) return false;
    if (itemFilePath.indexOf(fileNames.infixTOC      ) > -1) return false;

    if (itemFilePath.indexOf(fileNames.infixDevice ) > -1) return true;

    return (itemFilePath.indexOf(fileNames.infixItem) > -1);
}
//..............................................................................

//..............................................................................
function findFilesRecursive(searchPath, filter, sourceFiles, foundFiles)
{
    sourceFiles = sourceFiles || fs.readdirSync(searchPath)
    foundFiles = foundFiles || []

    filter = filter || '*'

    for (var i = 0; i < sourceFiles.length; i++)
    {
        var file = sourceFiles[i];

        var newbase = path.join(searchPath,file)
        if ( fs.statSync(newbase).isDirectory() )
        {
            foundFiles = findFilesRecursive(newbase,filter,fs.readdirSync(newbase),foundFiles)
        }
        else
        {
            if (filter === '*')
            {
                foundFiles.push(newbase)
            }
            else if ( file.substr(-1*(filter.length+1)) == '.' + filter )
            {
                foundFiles.push(newbase)
            }
        }
    }
    return foundFiles
}
//..............................................................................

//..............................................................................
function findFiles(searchPath, filter = '', log = '')
{
    const before = Date.now();

    if (filter.indexOf('*.') === 0)
    {
        filter = filter.substring(2);
    }
    else if (filter[0] === '.')
    {
        filter = filter.substring(1);
    }
    else if (filter.indexOf('.') > 1)
    {
        filter = path.extname(filter).substring(1);
    }

    console.log('===============================');
    console.log('Finding files...'               );

    if (log.length > 0)
    {
        console.log('Called From:', log);
    }

    console.log('Search Path: ', searchPath     );
    console.log('Filter     : ', '*.' + filter  );
    console.log('------'                         );

    var filesFound = findFilesRecursive(searchPath, filter);

    const after = Date.now();

    console.log('Files Found: ', filesFound.length)
    console.log('Search Time:', (after - before) / 1000 + ' seconds');
    console.log('-------------------------------')

    return filesFound;
}
//..............................................................................

//..............................................................................
function isObjectWithFields(object)
{
    if (!isObject(object)) return false;

    return JSON.stringify(object) !== '{}';
}
//..............................................................................

//..............................................................................
function csvToJSON(filePath, fields = {})
{
    var csvFile = loadTextFileIntoString(filePath)

    var lines = csvFile.split(stringsUtil.newLine);

    var delimiter = ','
    var result    = [];
    var pins      = {};

    var headers = lines[0].split(delimiter);

    for (var i = 1 ; i <lines.length; i++)
    {
        var lineObject = {};

        var lineArray = lines[i].split(delimiter);

        for(var j = 0; j < headers.length; j++)
        {
            if (isObjectWithFields(fields))
            {
                if (fields[headers[j]])
                {
                    lineObject[headers[j]] = lineArray[j];

                }
            }
            else
            {
                lineObject[headers[j]] = lineArray[j];
            }

            pins[lineArray[j]] = '';

        }

        result.push(lineObject);
    }

    return result;
}
//..............................................................................

//..............................................................................
addProperties(cxq.meshDocGen,
{
    isObjectWithFields,
    addBlankLineToArray,
    appendArrayToArray,
    convertLetterToNumber,
    copyFileSync,
    copyFolderRecursiveSync,
    copyImages,
    deLocalizeFilePath,
    deLocalizeFilename,
    deleteEmptyFoldersRecursively,
    deleteItemFromArray,
    directoryExists,
    fileExists,
    filenameNoExtension,
    findFiles,
    getCoordinateFromLetter,
    getFileNameLanguageSuffix,
    getFileSubset,
    getFilesArray,
    getFilesObject,
    getIdFromArrayHTML,
    getLanguageFromFilename,
    getLastFolderFromPath,
    getSpacerString,
    getUniqueArray,
    inSameDirectory,
    injectMarkdownFile,
    insertIntoArrayAt,
    isDeviceFamilyFile,
    isInArray,
    isInteger,
    isItemReadmeFile,
    isSectionContentFile,
    isValidHexColor,
    loadObjectJSON,
    loadTextFileIntoArray,
    loadTextFileIntoString,
    removeEndOfStringCharacter,
    replaceAll,
    replaceAllInDirectory,
    replaceAt,
    replaceBetween,
    sortAlphaNum,
    stripRelativeFoldersFromPath,
    substringCount,
    truncateToSingleSpace,
    writeFileToDisk,
    writeObjectToDiskJSON,
});
