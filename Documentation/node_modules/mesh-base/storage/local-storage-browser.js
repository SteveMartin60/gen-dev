//..............................................................................
const {logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    processList,
    wait
} = util;
//..............................................................................

//..............................................................................
var log = logger('local-storage');
log.setLevel('info');
//..............................................................................

//..............................................................................
function getKey(collectionId, entityId)
{
    collectionId = collectionId.toLowerCase();
    entityId     = entityId    .toLowerCase();
    return 'cxq|' + collectionId +'|' + entityId;
}
//..............................................................................

//..............................................................................
function saveToLocalStorage(collectionId, entityId, data)
{
    if (!collectionId) return console.error('ERROR: Local-Storage: Attempt to save to null collection:',entityId    , data);
    if (!entityId    ) return console.error('ERROR: Local-Storage: Attempt to save null entity:'       ,collectionId, data);

    var key = getKey(collectionId,entityId);
    var ls  = 'localStorage' in global && global.localStorage;

    if (ls)
    {
        key = key.toLowerCase();
        try {
            ls.setItem(key, JSON.stringify(data));
            return true;
        }
        catch (e)
        {
            console.error('ERROR: Failed to save to Local-Storage:', key, data);
        }
    }
}
//..............................................................................

//..............................................................................
function readFromLocalStorage(collectionId, entityId)
{
    if (!collectionId) return console.error('ERROR: Local-Storage: Attempt to read from null collection:',entityId    );
    if (!entityId    ) return console.error('ERROR: Local-Storage: Attempt to read null entity:'         ,collectionId);

    var key = getKey(collectionId,entityId);
    var ls  = 'localStorage' in global && global.localStorage;

    if (ls)
    {
        try
        {
            return JSON.parse(ls.getItem(key));
        }
        catch (e)
        {
            console.error('ERROR: Failed to read entity from Local-Storage:',key);
            return null
        }
    }
}
//..............................................................................

//..............................................................................
function removeFromLocalStorage(collectionId, entityId)
{
    if (!collectionId) return console.error('ERROR: Local-Storage: Attempt to remove from null collection:',entityId    );
    if (!entityId    ) return console.error('ERROR: Local-Storage: Attempt to remove null entity:'         ,collectionId);

    var key = getKey(collectionId,entityId);
    var ls  = 'localStorage' in global && global.localStorage;

    if (ls)
    {
        try
        {
            var oldData = readFromLocalStorage(collectionId, entityId);
         // console.log('ReadyToRemoveLocallyStored:',collectionId, entityId,oldData);
            ls.removeItem(key);
         // var removedData = readFromLocalStorage(collectionId, entityId);
         // console.log('AfterRemoveLocallyStored:',collectionId, entityId,removedData);
            return oldData;
        }
        catch (e)
        {
            console.error('ERROR: Failed to remove entity from Local-Storage:', key);
            return null
        }
    }
}
//..............................................................................

//..............................................................................
function clearLocalStorage()
{
 // console.log('readLocalStorageContents:');
    var ls = 'localStorage' in global && global.localStorage;
    if (!ls)
    {
        console.error('ERROR: No local-storage');
        return null;
    }

    var entriesToRemove = [];
    //..........................................................................
    function addEntry(key)
    {
        var parts = key.split('|');
        if (parts.length == 3 && parts[0] === 'cxq')
        {
            var collectionId = parts[1];
            var entityId     = parts[2];
            if (collectionId == 'ui' && entityId.indexOf('login-remember') == 0)
            {
                log.info('SkippingEntry:',key);
            }
            else
            {
                entriesToRemove.push(key);
            }
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    var itemCount = ls.length;
    console.log('clearLocalStorage:Old:',itemCount);
    for (var i=0; i<itemCount; i++)
    {
        var keyName = ls.key(i);
        if (keyName)
        {
            //log.info('ls_content:',keyName);
            var content = ls.getItem(keyName);
            if (content)
                addEntry(keyName,content)
        }
    }
    console.log('clearLocalStorage:DeleteList:',entriesToRemove.length);

    processList(entriesToRemove, function(key)
    {
        try
        {
            ls.removeItem(key);
        }
        catch (e)
        {
            console.error('ERROR: Failed to remove entity from Local-Storage:', key);
        }
    });

    return entriesToRemove;
}
//..............................................................................

//..............................................................................
function readLocalStorageContents()
{
 // console.log('readLocalStorageContents:');
    var ls = 'localStorage' in global && global.localStorage;
    if (!ls)
    {
        console.error('ERROR: No local-storage');
        return null;
    }

    var stored = {};
    //..........................................................................
    function addStored(key,data)
    {
        var parts = key.split('|');
        if (parts.length < 3)
        {
            console.error('ERROR: Local-Storage entity with bad key:',key,data);
            return
        }
        var collectionId = parts[1];
        var entityId     = parts[2];
        if (!stored[collectionId])
             stored[collectionId] = {};
        stored[collectionId] [entityId] = data;
    }
    ////////////////////////////////////////////////////////////////////////////
    var itemCount = ls.length;
    log.info('readLocalStorageContents:Count:',itemCount);
    for (var i=0; i<itemCount; i++)
    {
        var keyName = ls.key(i);
        if (keyName)
        {
            var content = ls.getItem(keyName);
            if (content)
            {
                try
                {
                    content = JSON.parse(content);
                    addStored(keyName,content)
                }
                catch (e)
                {
                    console.error('ERROR: Failed to read entity from Local-Storage:',keyName,content);
                }
            }
            else
            {
                console.error('ERROR: LocalStorage No Content:',keyName);
            }
        }
    }
  //console.log('readLocalStorageContents:result:',stored);

    return stored;
}
//..............................................................................

addProperties(util,
{
    saveToLocalStorage,
    removeFromLocalStorage,
    readFromLocalStorage,
    readLocalStorageContents,
    clearLocalStorage
});
