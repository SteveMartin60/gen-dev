//..............................................................................
const {fs, logger, makeEventEmitter, path, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addToNameSpace,
    forceToArray,
    processList,
    processListParallel,
    getFileInfo,
    fileInfoChanged,
    readJsonFile,
    wait
} = util;
//..............................................................................

//..............................................................................
var log = logger('json-tracker');
log.setLevel('info');
//..............................................................................

//..............................................................................
function makeJsonTracker({initialList, period})
{
    log.debug('makeJsonTracker:', period, initialList);
    var trackerRecords = [];
    var foundChanges   = false;  //Result of last scan
    var timer          = null;
    var active         = false;
    var emitter        = makeEventEmitter();
    //..........................................................................
    function addTrackerRecords(list)
    {
        list = forceToArray(list);
        processList(list, function(info)
        {
            var record =
            {
                id       : info.id,
                filePath : info.path,
                fileInfo : null
            };

            if (!record.id)
            {
                log.error('addTrackerRecords-Missing id:', info);
            }
            else
            if (!record.filePath)
            {
                log.error('addTrackerRecords-Missing filePath:', info);
            }
            else
            {
                trackerRecords.push(record);
                log.info('AddedTracker:',record);
            }
        });
    }
    //......................................................................
    function loadFile(record, callback)
    {
        readJsonFile(record.filePath, function(err, newContents)
        {
            if (newContents)
            {
                record.contents = newContents;
                log.debug('loadedJson:',record.contents)
            }
            else
            {
                log.error('Failed To Load JSON Data:',record.id,':', record.filePath,' err:',err);
            }
            callback(null);
        });
    }
    //..........................................................................
    function checkSingle(record, callback)
    {
        fs.exists(record.filePath, function(existing)
        {
            if (!existing)
                 return callback(null);

            getFileInfo(record.filePath, function(err, newFileInfo)
            {
                var oldFileInfo = record.fileInfo;
                log.debug('checkSingle:check:fileInfo');
                log.trace('checkSingle:checked:', record);
                if (newFileInfo)
                {
                    if (!oldFileInfo || fileInfoChanged(oldFileInfo, newFileInfo))
                    {
                        if (oldFileInfo)
                        {
                            //This is an actual change, not just the first time load
                            log.debug('jsonTracker_checkSingle:changed:', path.basename(record.filePath), oldFileInfo.updated_at, '=>', newFileInfo.updated_at);
                        }

                        record.fileInfo = newFileInfo;
                        foundChanges = true;
                        loadFile(record, callback);
                    }
                    else
                    {
                        callback(null);
                    }
                }
                else
                {
                    log.error('jsonTracker_checkSingle: Failed To getFileInfo for package-Definitions:',err, 'path:',record.filePath);
                    callback(null);
                }
            });
        });
    }
    //..........................................................................
    function doCheck(mainCallback)
    {
        clearTimer();
        foundChanges = false;
        processListParallel(trackerRecords, checkSingle, function(err)
        {
            log.trace('Checked_Records:',err);
            if (foundChanges)
            {
                emitter.emit('changes',trackerRecords);
            }

            if (active)
                scheduleNextCheck();

            if (mainCallback)
                mainCallback(null, foundChanges);
        });
    }
    //..........................................................................
    function scheduleNextCheck()
    {
        timer = wait(period * 1000).then(doCheck);
    }
    //..........................................................................
    function clearTimer()
    {
        if (timer)
        {
            clearTimeout(timer);
            timer = null;
        }
    }
    //..........................................................................
    function stop()
    {
        active = false;
        clearTimer();
    }
    //..........................................................................
    function start()
    {
        active = true;
        doCheck();
    }
    ////////////////////////////////////////////////////////////////////////////
    addTrackerRecords(initialList);
    var publicScope =
    {
        on : emitter.on,
        start,
        stop,
        addTrackerRecords
    };

    return publicScope;
}
//..............................................................................

addToNameSpace(makeJsonTracker,'makeJsonTracker');
