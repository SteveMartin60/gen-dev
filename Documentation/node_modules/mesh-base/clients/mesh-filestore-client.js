//..............................................................................
const {cloud, fs, path, httpClient, logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    addSlashToUrl,
    forceDirectorySync,
    processItemsInFolderDeep
} = util;
//..............................................................................

//..............................................................................
const log = logger('filestore-client');
log.setLevel('info');
//..............................................................................

//..............................................................................
function getUrlFilestores()
{
    return cloud.baseUrl + '/filestores/';
}
//..............................................................................

//..............................................................................
function getUrlFiles()
{
    return cloud.baseUrl + '/files/';
}
//..............................................................................

function downloadFile(options, callback)
{
    function callback_Download(err)
    {
        if (err)
            log.error('Failed to download file', options, err);
    }
    //..........................................................................
    function handle_WriteStreamClose()
    {
        if (callback) callback();
    }
    ////////////////////////////////////////////////////////////////////////////
    forceDirectorySync(path.dirname(options.localPath));
    const writeStream = fs.createWriteStream(options.localPath);
    const targetUrl   = getUrlFiles() + options.targetPath;
    httpClient.streamedDownload(targetUrl, writeStream, callback_Download);
    writeStream.on('close', handle_WriteStreamClose);
}
//..............................................................................

//..............................................................................
function deleteItem(options, callback)
{
    //..........................................................................
    function callback_Delete(err, obj)
    {
        if (err)
            log.error('Fail to delete file', options, err);
        else
            log.info('Successfully delete file/folder', options.targetPath, 'count:', obj.count);
        callback(err);
    }
    ////////////////////////////////////////////////////////////////////////////
    const targetUrl = getUrlFilestores() + options.targetPath;
    httpClient.delete(null, [targetUrl], callback_Delete);
}
//..............................................................................

//..............................................................................
function fileItemExists(options, callback)
{
    function callback_GetInfo(err, raw)
    {
        if (err || !raw)
        {
            if (err && err.code === 1315)
            {
                callback(null, false);
            }
            else
            {
                log.error('getFolderContents_error:', options.targetPath, err);
                callback(err);
            }
        }
        else
        {
            callback(null, raw);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    const targetUrl = getUrlFilestores() + options.targetPath;
    httpClient.get(null, [targetUrl], callback_GetInfo);
}
//..............................................................................

//..............................................................................
function getFileItemInfo(options, callback)
{
    function callback_GetInfo(err, info)
    {
        if (err)
        {
            log.error('Fail to get file info from', targetUrl, err);
        }
        callback(err, info);
    }
    ////////////////////////////////////////////////////////////////////////////
    const targetUrl = getUrlFilestores() + options.targetPath;
    httpClient.get(null, [targetUrl], callback_GetInfo);
}
//..............................................................................

//..............................................................................
function readFile(targetPath, callback)
{
    const targetUrl = getUrlFiles() + targetPath;
    httpClient.get(null, [targetUrl], callback);
}
//..............................................................................

//..............................................................................
function writeFile(data, targetPath, callback)
{
    const targetUrl = getUrlFiles() + targetPath;
    httpClient.streamedUpload(targetUrl, {formData:{file:data}}, callback);
}
//..............................................................................

//..............................................................................
function downloadFolder(options, callback)
{
    const itemsToDownload   = [];
    const itemsDownloaded   = [];
    var cntItemsDownloading = 0;
    //..........................................................................
    function processCallback()
    {
        log.info('Downloading', cntItemsDownloading, 'To Download', itemsToDownload.length, 'Downloaded', itemsDownloaded.length);
        if (itemsToDownload.length == 0 && cntItemsDownloading == 0)
        {
            callback(itemsDownloaded);
        }
    }
    //..........................................................................
    function callback_Download(err)
    {
        cntItemsDownloading --;
        var item = this;
        if (err)
        {
            log.error('Fail to download file', item, err);
            item.error = err;
        }
        itemsDownloaded.push(item);
        processCallback();
    }
    //..........................................................................
    function processNextItem()
    {
        var item;
        //......................................................................
        function callback_GetFolderInfo(err, files)
        {
            if (err)
            {
                log.error('Fail to get folder info', item);
                item.error = err;
            }
            else
            if (!files || !files.length)
            {
                log.info('No files in', item.targetPath);

            }
            else
            {
                for (var index in files)
                {
                    var fileInfo = files[index];
                    fileInfo.targetPath = fileInfo.path;
                    fileInfo.localPath  = path.join(options.localPath, fileInfo.path.substr(options.targetPath.length));
                    if (fileInfo.type == 'application/directory')
                    {
                        itemsToDownload.push(fileInfo);
                    }
                    else
                    {
                        cntItemsDownloading++;
                        downloadFile(fileInfo, callback_Download.bind(fileInfo));
                    }
                }
            }
            cntItemsDownloading--;
            itemsDownloaded.push(item);
            processNextItem();
            processCallback();
        }
        ////////////////////////////////////////////////////////////////////////
        if (itemsToDownload.length)
        {
            item = itemsToDownload.shift();
            if (item.type == 'application/directory')
            {
                forceDirectorySync(item.localPath);
                if (item.targetPath.substr(-1) != '/')
                {
                    item.targetPath += '/';
                }
            }
            if (item)
            {
                cntItemsDownloading++;
                getFileItemInfo(item, callback_GetFolderInfo);
            }
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    const root_item =
    {
        targetPath: options.targetPath,
        localPath : options.localPath,
        type      : 'application/directory'
    };
    itemsToDownload.push(root_item);
    processNextItem();
}
//..............................................................................

//..............................................................................
function uploadFile(options, callback)
{
    var targetFolderUrl;
    var targetFilename;
    var readStream;
    //..........................................................................
    function callback_Local(err, res, text)
    {
        if (err)
            log.error('Fail to upload file to ', targetFolderUrl, 'error:', err);
        else
            log.info('Upload file success to ', targetFolderUrl, targetFilename);
        callback(err, text);
    }
    //..........................................................................
    function uploadToCloud()
    {
        const target = addSlashToUrl(targetFolderUrl) + targetFilename;
        log.info('Start to upload file to ', target);
        httpClient.streamedUpload(target, {formData:{file:readStream}}, callback_Local);
    }
    ////////////////////////////////////////////////////////////////////////////
    if (options.localPath)
    {
        if (options.targetFolder)
            targetFolderUrl = getUrlFiles() + options.targetFolder;
        else
            targetFolderUrl = getUrlFiles();
        targetFilename = options.targetFilename || path.basename(options.localPath);

        log.info('uploadFile:',targetFolderUrl, targetFilename);
        readStream     = fs.createReadStream(options.localPath);
        uploadToCloud();
    }
    else
    {
        const err = new Error('Missing local file path to upload');
        log.error(err);
        callback(err);
    }
}
//..............................................................................

//..............................................................................
function makeFolder(options, callback)
{
    var targetFolderUrl;
    var httpOptions;
    //..........................................................................
    targetFolderUrl = getUrlFiles() + options.targetFolder;
    if (targetFolderUrl.substr(-1) != '/') targetFolderUrl += '/';
    httpOptions =
    {
        data:
        {
            type: 'application/directory',
            name: options.dirName
        }
    };
    //..........................................................................
    httpClient.post(httpOptions, [targetFolderUrl], function(err, data)
    {
        if (err)
            log.error('makeFolder error ', options, err);
        else
            log.info('makeFolder success to', options.targetFolder, options.dirName);
        callback(err, data);
    });
}
//..............................................................................

//..............................................................................
function uploadFolder(options, callback)
{
    var targetFolder;
    var cntFileUploaded = 0;
    var cntFileToUpload;
    var fileUploadError = [];
    //..........................................................................
    function uploadSingle(item)
    {
        function callback_UploadFile(err, text)
        {
            cntFileUploaded ++;
            if (err)
            {
                log.error('Fail to upload file', item.relativePath, 'from', item.fullPath, 'to', targetFolder, err);
            }
            else
            {
                log.info('Upload file success to', targetFolder, item.relativePath);
            }
            if (cntFileUploaded == cntFileToUpload && callback)
            {
                callback(fileUploadError.length ? fileUploadError : null);
            }
        }
        ////////////////////////////////////////////////////////////////////////
        if (item.isFile)
        {
            var fileOptions =
            {
                localPath   : path.join(options.localPath, item.relativePath),
                targetFolder: targetFolder,
                targetFilename: item.relativePath.split(path.sep).join('/')
            };
            uploadFile(fileOptions, callback_UploadFile);
        }
        else
        if (item.isDirectory)
        {
            var dirName = item.relativePath.split(path.sep).join('/');
            if (dirName == '.' || dirName == './')
            {
                dirName = '';
            }
            var folderOptions =
            {
                targetFolder: targetFolder ,
                dirName     : dirName
            };
            makeFolder(folderOptions, callback_UploadFile);
        }
    }
    //..........................................................................
    function processAllItems(items)
    {
        cntFileToUpload = items.length;
        if (cntFileToUpload)
        {
            for (var index in items)
            {
                var item = items[index];
                if (!item.error)
                {
                    uploadSingle(item);
                }
                else
                {
                    log.error('Error Uploading item', item);
                }
            }
        }
        else
        if (callback)
        {
            callback('Can not get file list from folder' + options.localPath);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    if (options.localPath)
    {
        targetFolder = options.targetFolder || '';
        processItemsInFolderDeep(options.localPath, null, processAllItems);
    }
    else
    {
        const err = new Error('Missing local folder path to upload');
        log.error(err);
        callback(err);
    }
}
//..............................................................................

//..............................................................................
const sizes =
{
      icon :  32,//    32 x  32
     small :  50,//    50 x  50
    medium : 100,//   100 x 100
     large : 200,//   200 x 200
};
//..............................................................................

//..............................................................................
// Images come in standard sizes.
// Always go with the next size up based on the requested size
//..............................................................................
function getEntityImagePath(collectionId, entityId, size=0)
{
    var imageSuffix = '';

         if ( size >= sizes.large ) imageSuffix = sizes.large;
    else if ( size >= sizes.medium) imageSuffix = sizes.medium;
    else if ( size >= sizes.small ) imageSuffix = sizes.small;
    else if ( size                ) imageSuffix = sizes.tiny;

    if (imageSuffix)
        imageSuffix = '-s' + imageSuffix;
    const filename = entityId + imageSuffix + '.jpg';

    return cloud.baseUrl + '/files/system/avatars/' + collectionId + '/' + filename;
}
//..............................................................................

addProperties(cloud,
{
    getFileItemInfo,
    readFile,
    writeFile,
    fileItemExists,
    uploadFile,
    uploadFolder,
    makeFolder,
    downloadFile,
    downloadFolder,
    getEntityImagePath,
    deleteFile         : deleteItem,
    deleteFolder       : deleteItem,
});
//..............................................................................