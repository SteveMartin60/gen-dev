const Cookie          = require('js-cookie');
const cloudConnection = require('../network/mesh-cloud-connection');

//..............................................................................
const
{
    meshSessionTokenIdentifier,
    httpClient,
    logger,
    makeEventEmitter,
    util
} = cxq;
//..............................................................................

//..............................................................................
const  http = httpClient;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    after,
    functionAsProperty_ReadOnly,
    processList,
    isArray,
    isDefined,
    isString,
    getApiDomain,
    getBaseDomain,
    getLocalMachineAddress,
    addToNameSpace,
    getObjectFromString
} = util;
//..............................................................................

//..............................................................................
var log = logger('cloud-client');
log.setLevel('info');
//..............................................................................

//..............................................................................
var emitter;
var cloud            = {};
var connected        = false;
var authenticated    = false;
var savedSessionInfo = {};
//..............................................................................

//..............................................................................
function clearSavedSession()
{
    savedSessionInfo.token          = null;
    savedSessionInfo.clientType     = null;
    savedSessionInfo.clientId       = null;
    savedSessionInfo.organizationId = null;
}
//..............................................................................

//..............................................................................
function isConnected()
{
    return connected;
}
//..............................................................................

//..............................................................................
function isAuthenticated()
{
    return authenticated;
}
//..............................................................................

//..............................................................................
function getServerUrl()
{
    return 'https://' + getApiDomain();
}
//..............................................................................

const apiVersion = '/v0';
//..............................................................................
function getBaseUrl()
{
    return getServerUrl() + apiVersion;
}
//..............................................................................

//..............................................................................
function getDomainUrl()
{    
    if (isNodeJs)
        return getBaseUrl();
    
    if (typeof location !== 'undefined')
        return 'https://' + location.hostname + apiVersion;

    return getBaseUrl();
}
//..............................................................................

//..............................................................................
function supportsCookies()
{
    // TODO - LS: Find better way to determine cookie support
    return (typeof document !== 'undefined' && 'cookie' in document);
}
//..............................................................................

//..............................................................................
function getSessionCookie()  //This is the same for all sub-domains
{
    var sessionToken, name;
    
    if (document && location)
    {
        name = meshSessionTokenIdentifier.toLowerCase();
        sessionToken = Cookie.get(name);
        log.debug('getSessionCookie', sessionToken);
    }
    else
    {
        log.error('ERROR: getSessionCookie only valid in browser Apps');
    }

    return sessionToken;
}
//..............................................................................

//..............................................................................
function clearSessionCookie()
{
    return

    if (isNodeJs)
    {
        log.error('ERROR: clearSessionCookie only valid in browser Apps');
        return
    }

    var basehost = location.hostname.split('.').slice(1).join('.');
    var name     = meshSessionTokenIdentifier.toLowerCase();
    var options =
    {
        domain : basehost,
        secure : true
    };
    Cookie.remove(name, options);
}
//..............................................................................

//..............................................................................
const rolesForTypes =
{
    guest   : ['guest'                                   ],
    member  : ['guest','member'                          ],
    admin   : ['guest','member','admin'                  ],
    owner   : ['guest','member','admin','owner'          ],
    primary : ['guest','member','admin','owner','primary'],
};
//..............................................................................
function getRolesFromMembershipType(type)
{
    var result = {};
    var roles = rolesForTypes[type] || [];
    processList(roles, function(roleId)
    {
        result[roleId] = true;
    });
    return result;
}
//..............................................................................

//..............................................................................
function setAuthenticated(loginResponse, callback)
{
    authenticated    = true;
    savedSessionInfo.token          = loginResponse.session.token;
    savedSessionInfo.clientType     = loginResponse.session.type;
    savedSessionInfo.clientId       = loginResponse.clientId;
    savedSessionInfo.domain         = loginResponse.organization.domain;
    savedSessionInfo.organizationId = loginResponse.organizationId;
    savedSessionInfo.roles          = {};

    if (loginResponse.client && loginResponse.membership)
    {
        savedSessionInfo.roles = getRolesFromMembershipType(loginResponse.membership.membership_type);
        console.log('cloudSetAuthenticated:',loginResponse.membership.membership_type);
        console.log('cloudSetAuthenticated:',savedSessionInfo);
    }

    // These fields are not available until after authentication
    // In order to run offline we will need to store them locally.

    log.debug('setAuthenticated saved:',savedSessionInfo.clientId);//,'loginResponse:',loginResponse);

    emitter.emit('authenticated', savedSessionInfo, loginResponse);

    if (callback)
        callback(null, loginResponse);
}
//..............................................................................

//..............................................................................
function clearAuthenticated()
{
    authenticated    = false;
    clearSavedSession();
    clearSessionCookie();
    emitter.emit('unauthenticated');
}
//..............................................................................

//..............................................................................
function runTests()
{
}
//..............................................................................

//..............................................................................
function loginPerson(loginData, callback)
{
    // var exampleLoginData =
    // {
    //     "email"   :"me@somedomain.com",
    //     "password":"123"
    // };
    http.post({data: loginData}, [cloud.baseUrl,'login','person'], function(err,data)
    {
        log.debug('loginPerson_callback',loginData);
        if (data && data.session)
        {
            log.info('loginPerson_Success');
            setAuthenticated(data, callback);
        }
        else
        {
            clearAuthenticated();
            if (callback) callback(err,data);
        }
    });
}
//..............................................................................

//..............................................................................
function loginBot(options, callback)
{
    options = options || {};
    if (!isDefined(options.retries))
        options.retries = 10;
    var retries = 0;
    var loginData =
    {
        identity : options.identity,
        secret   : options.secret,
        domain   : options.domain,
    };

    var address = getLocalMachineAddress();
    if (address)
        loginData.address  = address;

    //..........................................................................
    function tryToLogin()
    {
        retries ++;
      //log.debug('loginBot_tryToLogin:',cloud.baseUrl);
        http.post({data: loginData}, [cloud.baseUrl,'login','bot'], function(err,raw)
        {
          //log.debug('loginBotRetry_callback:'+retries, loginData, err, raw);
            if (raw && raw.session)
            {
                log.info('loginBot_Success');
                setAuthenticated(raw, callback);
                runTests();
            }
            else
            {
                clearAuthenticated();
                if (retries < options.retries)
                    after(1000).do(tryToLogin);
                else
                    if (callback) callback(err);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    tryToLogin();
}
//..............................................................................

//..............................................................................
function loginMachine(options, callback)
{
    options = options || {};
    if (!isDefined(options.retries))
        options.retries = 10;
    // Assumes that the server is authenticated against the primary public authority (DigiCert, Verisign etc).
    // So can trust it is the real cloud.
    // Provide the server with signed-cloud ID certificate so it can verify this machine is valid.
    // TODO: Later change to use certificates for this kind of login.
    var retries = 0;
    var loginData =
    {
        identity : options.identity,
        secret   : options.secret
    };

    var address = getLocalMachineAddress();
    if (address)
        loginData.address  = address;

    //..........................................................................
    function tryToLogin()
    {
        retries ++;
      //log.debug('loginMachine_tryToLogin:',cloud.baseUrl);
        http.post({data: loginData}, [cloud.baseUrl,'login','machine'], function(err,raw)
        {
          //log.debug('loginMachineRetry_callback:'+retries, loginData, err, raw);
            if (raw && raw.session)
            {
                log.info('loginMachine_Success');
                setAuthenticated(raw, callback);
                runTests();
            }
            else
            {
                clearAuthenticated();
                if (retries < options.retries)
                    after(1000).do(tryToLogin);
                else
                    if (callback) callback(err);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    tryToLogin();
}
//..............................................................................

//..............................................................................
function logout(callback)
{
    clearAuthenticated();
    http.get(null, [cloud.baseUrl, 'logout'], function callback_logout(err, data)
    {
        if (err)
            console.warn('Might already be logged out', err);
        if (callback)
            callback(err,data);
    });
}
//..............................................................................

//..............................................................................
function getOnePackage(packageId, revisionId, callback)
{
    log.debug('getOnePackage:',packageId, revisionId);
    //..........................................................................
    // https://api.mesheven.com.cn/v0/packages/mesh-foundation-server/releases/0.0.1/node/debug

    http.get(null, [cloud.baseUrl, 'packages', packageId, 'releases', revisionId], function(err, data)
    {
        log.debug('getOnePackage_callback:',packageId, revisionId);
        if (err)
        {
            if (callback) callback(err);
        }
        else
        if (data && data.items && isArray(data.items) && data.items.length > 0)
        {
            if (callback)
                callback(null, data.items[0]);
        }
        else
        {
            callback({"status": 404, "en":"Unknown Record"});
        }
    });
}
//..............................................................................

//..............................................................................
function getBestPackage(packageId, revisionId, targetId, kindId, callback)
{
    log.debug('getBestPackage:',packageId, revisionId, targetId, kindId);
    //..........................................................................
    // https://api.mesheven.com.cn/v0/packages/mesh-foundation-server/releases/0.0.1/node/debug
    // https://api.mesheven.com.cn/v0/packages/mesh-foundation-server/latest/^0.1.0/node/default

    http.get(null, [cloud.baseUrl, 'packages', packageId, 'latest', revisionId, targetId, kindId], function(err, data)
    {
        if (err || !data)
        {
            if (callback) callback(err || 'no-release');
        }
        else
        {
            if (callback)
                callback(null, data);
        }
    });
}
//..............................................................................

//..............................................................................
function changePasswordByInvitation(newPassword, email, domain, invitation, callback)
{
    var data = {email: email, password: newPassword};

    httpClient.post({data},[cloud.baseUrl, 'password', 'change', domain, invitation], function(err, data)
    {
        // TODO - should we call clearAuthenticated if API response is successful? - Leo
        if (callback)
            callback(err, data);
    });
}
//..............................................................................

//..............................................................................
function checkInvitationExpired(invitation, callback)
{
    // todo: Need to add API cloud endpoint to handle validation of invitations - Leo

    // a simple calculate
    var valid = (invitation && (invitation.length === 35));

    if (callback)
        callback(valid ? null :'Invalid Invitation. Unable to proceed.');

}
//..............................................................................

//..............................................................................
function changePassword(oldPassword, newPassword, callback)
{
    var data =
    {
        old : oldPassword,
        new : newPassword
    };

    http.post({data: data}, [cloud.baseUrl, 'people','password'], callback);
}
//..............................................................................

//..............................................................................
// This can only be done by mesh-admin and needs to supply password at time of action.
// The personId is the id of that person.
// This a global action since a person
//..............................................................................
function forcePasswordReset(adminPassword, personId, callback)
{
    var data =
    {
        old : oldPassword,
        new : newPassword
    };

    http.post({data: data}, [cloud.baseUrl, 'people','password'], callback);
}
//..............................................................................

//..............................................................................
function requestMachineRegistration(dummyEntityId, callback)
{
    http.post({data: {}}, [cloud.baseUrl, 'organizations','invitations', 'machine'], callback);
}
//..............................................................................

//..............................................................................
function setDeviceFirmwareUpdated(id, firmware_active, callback)
{
    var data = {firmware_active};
    http.post({data}, [cloud.baseUrl, 'devices',id,'updated'], callback);
}
//..............................................................................

//..............................................................................
function setDeviceFirmwareUpdating(id, firmware_updating, callback)
{
    var data = {firmware_updating};
    http.post({data}, [cloud.baseUrl, 'devices',id,'updating'], callback);
}
//..............................................................................

//..............................................................................
function changeEmail(password, email, callback)
{
    var data = {password, email};

    http.post({data: data}, [cloud.baseUrl, 'people','email'], function (err)
    {
        if (err)
        {
            if (callback)
                callback(err);
        }
        else
        {
            logout(callback);
        }
    });
}
//..............................................................................

//..............................................................................
function requestPasswordReset(email, callback)
{
    var data = {email: email};
    http.post({data: data}, [cloud.baseUrl, 'password/reset'], function(err, data)
    {
        if (callback)
            callback(err, data);
    });
}
//..............................................................................

//..............................................................................
function redirectToLogin()
{
    if (isNodeJs) return;

    if (typeof(location) !== 'undefined')
    {
        log.error('redirectToLogin:',window.location.href);
        location = '/login?r=' + encodeURIComponent(location.href);
    }            
}
//..............................................................................

//..............................................................................
function validateSessionToken({sessionToken, domain}, callback)
{
    // So validateSession can authenticate!
    if (!savedSessionInfo.token)
    {
        savedSessionInfo.token      = sessionToken;
        savedSessionInfo.domain     = domain;
        savedSessionInfo.clientType = 'person';
    }

    validateSession(sessionToken + '|' + domain, function(err, data)
    {
        log.debug('authenticateWithSessionToken_callback:',err, data);
        if (err || !data)
        {
            err = err || 'No data associated with this session';
            clearSavedSession();
        }
        else
        {
            delete data._tracking;
            setAuthenticated(data);
        }

        if (callback)
            callback(err, data);
    });
}
//..............................................................................


//..............................................................................
function processStoredSessionToken()
{
    if (!supportsCookies()) return;
    
    // For person sessions we rely on storing the previous session-token.
    // This is just to avoid the person need to login every time. In this
    // case we re-validate the person's session each time.
    // For machines and bots we just do the login each time, no stored session.

    var sessionToken = getSessionCookie();
    // if (!sessionToken)
    // {
    //     redirectToLogin();
    //     return
    // }
    
    log.debug('processStoredSessionToken cookie session:',sessionToken);

    clearSavedSession();
    savedSessionInfo.token = sessionToken; //So our call to validateSession will work!

    var domain = location.hostname.split('.')[0];
    validateSession(sessionToken + '|' + domain, function(err, data)
    {
        log.debug('validateSession_callback:',err,data);
        if (err || !data)
        {
            //clearAuthenticated();
            //redirectToLogin();
        }
        else
        {
            delete data._tracking;
            setAuthenticated(data);
            runTests();
        }
    });

}
//..............................................................................

//..............................................................................
function getSessionPersonId()
{
  //log.debug('getSessionPersonId:',savedSessionInfo);
    if (savedSessionInfo.clientType == 'person')
        return savedSessionInfo.clientId;
    else
        return null;
}
//..............................................................................

//..............................................................................
function getSessionType()
{
    return savedSessionInfo.clientType || null
}
//..............................................................................

//..............................................................................
function getSessionRoles()
{
    log.debug('getSessionRoles:', savedSessionInfo.roles);
    return savedSessionInfo.roles;
}
//..............................................................................

//..............................................................................
function getSessionClient()
{
    return savedSessionInfo.clientId || null
}
//..............................................................................

//..............................................................................
function getSessionDomain()
{
    return savedSessionInfo.domain;
}
//..............................................................................

//..............................................................................
function getSessionToken()
{
  //log.debug('getSessionToken:',savedSessionInfo);
    return savedSessionInfo.token;
}
//..............................................................................

//..............................................................................
function getSessionOrganizationId()
{
  //log.debug('getSessionOrganizationId:',savedSessionInfo);
    return savedSessionInfo.organizationId;
}
//..............................................................................

//..............................................................................
function connect()
{
    if (!isNodeJs)
        processStoredSessionToken();
    //..........................................................................
    function handleConnectionEvent_Connected(event, connection)
    {
        log.debug('handleFoundationConnectionEvent_Connected:', event.id);
        connected = true;
        emitter.emit(event.id,event);
    }
    //..........................................................................
    function handleConnectionEvent_StatusChange(event, connection)
    {
        //log.debug('meshCloud_handleConnectionEvent_StatusChange:',event);
        var s = 'mesh-cloud[' + cloud.serverUrl + '] Info[' + event.secondary.description_en + '] wasConnectedLastCheck[' + connection.wasConnectedLastCheck + ']';
        if (!connection.wasConnectedLastCheck)
            s += ' hasBeenConnected[' + connection.hasBeenConnected + ']';

        log.debug(s);
        emitter.emit(event.id,event);
    }
    ////////////////////////////////////////////////////////////////////////////
    log.debug('cloud.connect:',cxq.connectionEvents);
    var eventTypes = cxq.connectionEvents;

    cloud.connection = cloudConnection;
    cloudConnection.start(cloud.serverUrl);
    cloudConnection.on(eventTypes.statusChange    .id, handleConnectionEvent_StatusChange);
    cloudConnection.on(eventTypes.connected       .id, handleConnectionEvent_Connected   );
    cloudConnection.on(eventTypes.reconnected     .id, handleConnectionEvent_Connected   );
    cloudConnection.on(eventTypes.stillConnected  .id, function(event, connection){emitter.emit(event.id,event);});
    cloudConnection.on(eventTypes.connectionLost  .id, function(event, connection){emitter.emit(event.id,event);});
    cloudConnection.on(eventTypes.connectFailure  .id, function(event, connection){emitter.emit(event.id,event);});
    cloudConnection.on(eventTypes.reconnectFailure.id, function(event, connection){emitter.emit(event.id,event);});
}
//..............................................................................

//..............................................................................
function signingRequest(machineCloudId, options, csr, callback)
{
    http.post({data: {options, csr}}, [cloud.baseUrl, 'machines', machineCloudId, 'sign'], callback);
}
//..............................................................................

//..............................................................................
function getDataModel      (id,callback) {} //ToDo
function getViewTemplate   (id,callback) {} //ToDo
//..............................................................................

//..............................................................................
function addRecord           (main,                             p, callback){http.post   (p   , [cloud.baseUrl, main                            ], callback)}
function deleteRecord        (main,        id,                     callback){http.delete (id  , [cloud.baseUrl, main                            ], callback)}
function updateRecord        (main,        id,                  p, callback){http.post   (p   , [cloud.baseUrl, main, id                        ], callback)}

function deleteRecords       (main,                             p, callback){http.delete (p   , [cloud.baseUrl, main                            ], callback)}
function getRecordCount      (main,                             p, callback){http.get    (p   , [cloud.baseUrl, main, 'count'                   ], callback)}
function readRecord          (main,        id,                     callback){http.get    (null, [cloud.baseUrl, main, id                        ], callback)}

function readRecordView      (main,        id,                  p, callback){http.get    (p   , [cloud.baseUrl, main, id, 'view'                ], callback)}
function readRecordDetails   (main,        id,                  p, callback){http.get    (p   , [cloud.baseUrl, main, id, 'details'             ], callback)}

function readList            (main,                             p, callback){http.get    (p   , [cloud.baseUrl, main                            ], callback)}
function doAction            (main,        id,          action   , callback){http.post   ({}  , [cloud.baseUrl, main, id,                 action], callback)}
function doChildAction       (main, child, id, childId, action   , callback){http.post   ({}  , [cloud.baseUrl, main, id, child, childId, action], callback)}
function doChangeValue       (main,        id, action , value    , callback){http.post   ({}  , [cloud.baseUrl, main, id, action, value         ], callback)}

function addChild            (main, child, id         ,         p, callback){http.post   (p   , [cloud.baseUrl, main, id, child                 ], callback)}
function readChild           (main, child, id, childId,            callback){http.get    (null, [cloud.baseUrl, main, id, child, childId        ], callback)}
function readChildList       (main, child, id         ,         p, callback){http.get    (p   , [cloud.baseUrl, main, id, child                 ], callback)}
function deleteChild         (main, child, id, childId,            callback){http.delete (null, [cloud.baseUrl, main, id, child, childId        ], callback)}
function updateChild         (main, child, id, childId,         p, callback){http.post   (p   , [cloud.baseUrl, main, id, child, childId        ], callback)}

//function readRecord(main, id, callback)
//{
//    http.get(null, [cloud.baseUrl, main, id], function(err,raw)
//    {
//        var data = null;
//        if (raw && raw.item) data = raw.item;
//        callback(err, data);
//    });
//}
//..............................................................................

//..............................................................................
// Internal use only
function validateSession               (id               , callback){readRecord    ('sessions'                         , id                      , callback);}
function validateCapabilityBySession   (id, capabilityId , callback){readChild     ('sessions'    ,'capability'        , id, capabilityId        , callback);}

function getOnePerson                  (id               , callback){readRecord    ('people'                           , id                      , callback);}
function getOneBot                     (id               , callback){readRecord    ('bots'                             , id                      , callback);}
function getOneIdentity                (id               , callback){readRecord    ('identities'                       , id                      , callback);}
function getOneAttachment              (id               , callback){readRecord    ('attachments'                      , id                      , callback);}
function getOneResult                  (id               , callback){readRecord    ('results'                          , id                      , callback);}
function getOneRevision                (id               , callback){readRecord    ('revisions'                        , id                      , callback);}
function getOneInstance                (id               , callback){readRecord    ('instances'                        , id                      , callback);}
function getOneMachine                 (id               , callback){readRecord    ('machines'                         , id                      , callback);}
function getOneDevice                  (id               , callback){readRecord    ('devices'                          , id                      , callback);}
function getOneDeviceDefinition        (id               , callback){readRecord    ('device-definitions'               , id                      , callback);}
function getOneCapability              (id               , callback){readRecord    ('capabilities'                     , id                      , callback);}
function getOneDatastream              (id               , callback){readRecord    ('datastreams'                      , id                      , callback);}
function getOneController              (id               , callback){readRecord    ('controllers'                      , id                      , callback);}
function getOneAction                  (id               , callback){readRecord    ('actions'                          , id                      , callback);}
function getOneEvent                   (id               , callback){readRecord    ('events'                           , id                      , callback);}
function getOneManufacturer            (id               , callback){readRecord    ('manufacturers'                    , id                      , callback);}
function getOneManufacturerPart        (id               , callback){readRecord    ('manufacturer-parts'               , id                      , callback);}
function getOneMember                  (id               , callback){readRecord    ('members'                          , id                      , callback);}
function getOneGroup                   (id               , callback){readRecord    ('groups'                           , id                      , callback);}
function getOneLocation                (id               , callback){readRecord    ('locations'                        , id                      , callback);}
function getOneFilestore               (id               , callback){readRecord    ('filestores'                       , id                      , callback);}
function getOneResourceInfo            (id               , callback){readRecord    ('data-models'                      , id + '/flat'            , callback);}
function getOneTable                   (id               , callback){readRecord    ('vtables'                          , id                      , callback);}
function getOneItem                    (id               , callback){readRecord    ('items'                            , id                      , callback);}
function getOneProject                 (id               , callback){readRecord    ('projects'                         , id                      , callback);}
function getOnePubkey                  (id               , callback){readRecord    ('pubkeys'                          , id                      , callback);}
function getOnePlatform                (id               , callback){readRecord    ('platforms'                        , id                      , callback);}

function getOneGroupMember             (id, childId      , callback){readChild     ('groups'      ,'members'           , id, childId             , callback);}
function getOnePackageRelease          (id, childId      , callback){readChild     ('packages'    ,'releases'          , id, childId             , callback);}
function getOneZone                    (id, childId      , callback){readRecord    ('locations'   ,'zones'             , id, childId             , callback);}

function getBatches                    (          options, callback){readList      ('batches'                          ,     options             , callback);}
function getPubkeys                    (          options, callback){readList      ('pubkeys'                          ,     options             , callback);}
function getPlatforms                  (          options, callback){readList      ('platforms'                        ,     options             , callback);}
function getBots                       (          options, callback){readList      ('bots'                             ,     options             , callback);}
function getIdentities                 (          options, callback){readList      ('identities'                       ,     options             , callback);}
function getAttachments                (          options, callback){readList      ('attachments'                      ,     options             , callback);}
function getResults                    (          options, callback){readList      ('results'                          ,     options             , callback);}
function getRevisions                  (          options, callback){readList      ('revisions'                        ,     options             , callback);}
function getInstances                  (          options, callback){readList      ('instances'                        ,     options             , callback);}
function getCurrencyRates              (          options, callback){readList      ('currencies'                       ,     options             , callback);}
function getMachines                   (          options, callback){readList      ('machines'                         ,     options             , callback);}
function getDevices                    (          options, callback){readList      ('devices'                          ,     options             , callback);}
function getDeviceModels               (          options, callback){readList      ('device-models'                    ,     options             , callback);}
function getDeviceFamilies             (          options, callback){readList      ('device-families'                  ,     options             , callback);}
function getDeviceData                 (          options, callback){readList      ('device-data'                      ,     options             , callback);}
function getDeviceDefinitions          (          options, callback){readList      ('device-definitions'               ,     options             , callback);}
function getDataModels                 (          options, callback){readList      ('data-models'                      ,     options             , callback);}
function getPicklists                  (          options, callback){readList      ('picklists'                        ,     options             , callback);}
function getCapabilities               (          options, callback){readList      ('capabilities'                     ,     options             , callback);}
function getDatastreams                (          options, callback){readList      ('datastreams'                      ,     options             , callback);}
function getControllers                (          options, callback){readList      ('controllers'                      ,     options             , callback);}
function getActions                    (          options, callback){readList      ('actions'                          ,     options             , callback);}
function getEvents                     (          options, callback){readList      ('events'                           ,     options             , callback);}
function getManufacturers              (          options, callback){readList      ('manufacturers'                    ,     options             , callback);}
function getManufacturerParts          (          options, callback){readList      ('manufacturer-parts'               ,     options             , callback);}
function getMembers                    (          options, callback){readList      ('members'                          ,     options             , callback);}
function getMemberships                (          options, callback){readList      ('memberships'                      ,     options             , callback);}
function getGroups                     (          options, callback){readList      ('groups'                           ,     options             , callback);}
function getPersonGroups               (          options, callback){readList      ('people/groups'                    ,     options             , callback);}
function getPackages                   (          options, callback){readList      ('packages'                         ,     options             , callback);}
function getLocations                  (          options, callback){readList      ('locations'                        ,     options             , callback);}
function getTables                     (          options, callback){readList      ('vtables'                          ,     options             , callback);}
function getItems                      (          options, callback){readList      ('items'                            ,     options             , callback);}
function getProjects                   (          options, callback){readList      ('projects'                         ,     options             , callback);}
function getNotifications              (          options, callback){readList      ('notifications'                    ,     options             , callback);}
function getInvitations                (          options, callback){readList      ('invitations/email'                ,     options             , callback);}
function getSessions                   (          options, callback){readList      ('sessions'                         ,     options             , callback);}
function getOrganizations              (          options, callback){readList      ('organizations'                    ,     options             , callback);}
function getPeople                     (          options, callback){readList      ('people'                           ,     options             , callback);}
function getFilestores                 (          options, callback){readList      ('filestores'                       ,     options             , callback);}
function getZones                      (          options, callback){readList      ('zones'                            ,     options             , callback);}
function getLocationZones              (id,       options, callback){readChildList ('locations'   , 'zones'            , id, options             , callback);}
function getGroupMembers               (id,       options, callback){readChildList ('groups'      , 'members'          , id, options             , callback);}

function getBotSessions                (id,       options, callback){readChildList ('bots'        , 'sessions'         , id, options             , callback);}
                                                                                   
function getMachineCapabilities        (id,       options, callback){readChildList ('machines'    , 'capabilities'     , id, options             , callback);}
function getMachineDatastreams         (id,       options, callback){readChildList ('machines'    , 'datastreams'      , id, options             , callback);}
function getMachineControllers         (id,       options, callback){readChildList ('machines'    , 'controllers'      , id, options             , callback);}
function getMachineEvents              (id,       options, callback){readChildList ('machines'    , 'events'           , id, options             , callback);}
function getMachineActions             (id,       options, callback){readChildList ('machines'    , 'actions'          , id, options             , callback);}
function getMachineBossed              (id,       options, callback){readChildList ('machines'    , 'bossed'           , id, options             , callback);}
function getMachineAttached            (id,       options, callback){readChildList ('machines'    , 'attached'         , id, options             , callback);}
function getMachineSessions            (id,       options, callback){readChildList ('machines'    , 'sessions'         , id, options             , callback);}
                                                                                   
function getDeviceCapabilities         (id,       options, callback){readChildList ('devices'     , 'capabilities'     , id, options             , callback);}
function getDeviceDatastreams          (id,       options, callback){readChildList ('devices'     , 'datastreams'      , id, options             , callback);}
function getDeviceControllers          (id,       options, callback){readChildList ('devices'     , 'controllers'      , id, options             , callback);}
function getDeviceEvents               (id,       options, callback){readChildList ('devices'     , 'events'           , id, options             , callback);}
function getDeviceActions              (id,       options, callback){readChildList ('devices'     , 'actions'          , id, options             , callback);}
                                                                                   
function getCapabilityDatastreams      (id,       options, callback){readChildList ('capabilities', 'datastreams'      , id, options             , callback);}
function getCapabilityControllers      (id,       options, callback){readChildList ('capabilities', 'controllers'      , id, options             , callback);}
function getCapabilityEvents           (id,       options, callback){readChildList ('capabilities', 'events'           , id, options             , callback);}
function getCapabilityActions          (id,       options, callback){readChildList ('capabilities', 'actions'          , id, options             , callback);}
function getDatastreamItems            (id,       options, callback){readChildList ('datastreams'  ,'items'            , id, options             , callback);}

function updateOrganization            (id,          data, callback){updateRecord  ('organizations'                    , id,          {data:data}, callback);}
function updatePerson                  (             data, callback){http.post({data:data}, [cloud.baseUrl, 'people' ]                           , callback);}
function updateBatch                   (id,          data, callback){updateRecord  ('batches'                          , id,          {data:data}, callback);}
function updatePubkey                  (id,          data, callback){updateRecord  ('pubkeys'                          , id,          {data:data}, callback);}
function updateBot                     (id,          data, callback){updateRecord  ('bots'                             , id,          {data:data}, callback);}
function updateIdentity                (id,          data, callback){updateRecord  ('identities'                       , id,          {data:data}, callback);}
function updateRevision                (id,          data, callback){updateRecord  ('revisions'                        , id,          {data:data}, callback);}
function updateInstance                (id,          data, callback){updateRecord  ('instances'                        , id,          {data:data}, callback);}
function updateMachine                 (id,          data, callback){updateRecord  ('machines'                         , id,          {data:data}, callback);}
function updateDevice                  (id,          data, callback){updateRecord  ('devices'                          , id,          {data:data}, callback);}
function updateDeviceDefinition        (id,          data, callback){http.post({data:data}, [cloud.baseUrl, 'devices',  id, 'definition']        , callback);}
function updateDeviceFamily            (id,          data, callback){updateRecord  ('device-families'                  , id,          {data:data}, callback);}
function updateDeviceModel             (id,          data, callback){updateRecord  ('device-models'                    , id,          {data:data}, callback);}
function updateDeviceData              (id,          data, callback){updateRecord  ('device-data'                      , id,          {data:data}, callback);}
function updateDeviceDataSet           (             data, callback){updateRecord  ('device-data'                      , 'set',       {data:data}, callback);}
function updateCapability              (id,          data, callback){updateRecord  ('capabilities'                     , id,          {data:data}, callback);}
function updateDatastream              (id,          data, callback){updateRecord  ('datastreams'                      , id,          {data:data}, callback);}
function updateController              (id,          data, callback){updateRecord  ('controllers'                      , id,          {data:data}, callback);}
function updateAction                  (id,          data, callback){updateRecord  ('actions'                          , id,          {data:data}, callback);}
function updateMember                  (id,          data, callback){updateRecord  ('members'                          , id,          {data:data}, callback);}
function updateManufacturer            (id,          data, callback){updateRecord  ('manufacturers'                    , id,          {data:data}, callback);}
function updateManufacturerPart        (id,          data, callback){updateRecord  ('manufacturer-parts'               , id,          {data:data}, callback);}
function updatePackage                 (id,          data, callback){updateRecord  ('packages'                         , id,          {data:data}, callback);}
function updateGroup                   (id,          data, callback){updateRecord  ('groups'                           , id,          {data:data}, callback);}
function updateGroupMember             (id, childId, data, callback){updateChild   ('groups'      , 'members'          , id, childId, {data:data}, callback);}
function updateLocation                (id,          data, callback){updateRecord  ('locations'                        , id,          {data:data}, callback);}
function updateZone                    (id,          data, callback){updateRecord  ('zones'                            , id,          {data:data}, callback);}
function updatePicklist                (id,          data, callback){updateRecord  ('picklists'                        , id,          {data:data}, callback);}
function updateTable                   (id,          data, callback){updateRecord  ('vtables'                          , id,          {data:data}, callback);}
function updateItem                    (id,          data, callback){updateRecord  ('items'                            , id,          {data:data}, callback);}
function updateProject                 (id,          data, callback){updateRecord  ('projects'                         , id,          {data:data}, callback);}
function updateMessageContent          (id,          data, callback){updateRecord  ('messages'                         , id,          {data:data}, callback);}

function deviceEmulatorStart           (id               , callback){doAction      ('devices'                          , id,          'emulator-start'     , callback);}
function deviceEmulatorStop            (id               , callback){doAction      ('devices'                          , id,          'emulator-stop'      , callback);}
function activateBot                   (id               , callback){doAction      ('bots'                             , id,          'activate'           , callback);}
function activateCapability            (id               , callback){doAction      ('capabilities'                     , id,          'activate'           , callback);}
function activateMachine               (id               , callback){doAction      ('machines'                         , id,          'activate'           , callback);}
function activateDevice                (id               , callback){doAction      ('devices'                          , id,          'activate'           , callback);}
function activateMember                (id               , callback){doAction      ('members'                          , id,          'activate'           , callback);}
function activateManufacturer          (id               , callback){doAction      ('manufacturers'                    , id,          'activate'           , callback);}
function activateGroup                 (id               , callback){doAction      ('groups'                           , id,          'activate'           , callback);}
function activateLocation              (id               , callback){doAction      ('locations'                        , id,          'activate'           , callback);}
function activatePackageRelease        (id               , callback){doAction      ('packages'                         , id,          'activate'           , callback);}
function deprecatePackageRelease       (id               , callback){doAction      ('packages'                         , id,          'deprecate'          , callback);}
function obsoletePackageRelease        (id               , callback){doAction      ('packages'                         , id,          'obsolete'           , callback);}
function sharePackageRelease           (id               , callback){doAction      ('packages'                         , id,          'share'              , callback);}
function publishPackageRelease         (id               , callback){doAction      ('packages'                         , id,          'publish'            , callback);}
function packageReleaseSharePrivate    (id               , callback){doAction      ('packages'                         , id,          'share-private'      , callback);}
function packageReleaseShareMaker      (id               , callback){doAction      ('packages'                         , id,          'share-maker'        , callback);}
function packageReleaseShareMesh       (id               , callback){doAction      ('packages'                         , id,          'share-mesh'         , callback);}
function packageReleaseShareOpen       (id               , callback){doAction      ('packages'                         , id,          'share-open'         , callback);}
function packageReleaseRestrictPrivate (id               , callback){doAction      ('packages'                         , id,          'restrict-private'   , callback);}
function packageReleaseRestrictMaker   (id               , callback){doAction      ('packages'                         , id,          'restrict-maker'     , callback);}
function packageReleaseRestrictMesh    (id               , callback){doAction      ('packages'                         , id,          'restrict-mesh'      , callback);}
function suspendBot                    (id               , callback){doAction      ('bots'                             , id,          'suspend'            , callback);}
function suspendCapability             (id               , callback){doAction      ('capabilities'                     , id,          'suspend'            , callback);}
function suspendMachine                (id               , callback){doAction      ('machines'                         , id,          'suspend'            , callback);}
function suspendDevice                 (id               , callback){doAction      ('devices'                          , id,          'suspend'            , callback);}
function suspendMember                 (id               , callback){doAction      ('members'                          , id,          'suspend'            , callback);}
function suspendManufacturer           (id               , callback){doAction      ('manufacturers'                    , id,          'suspend'            , callback);}
function suspendGroup                  (id               , callback){doAction      ('groups'                           , id,          'suspend'            , callback);}
function suspendLocation               (id               , callback){doAction      ('locations'                        , id,          'suspend'            , callback);}

function activateIdentity              (id               , callback){doAction      ('identities'                       , id,          'activate'           , callback);}
function deprecateIdentity             (id               , callback){doAction      ('identities'                       , id,          'deprecate'          , callback);}
function publishIdentity               (id               , callback){doAction      ('identities'                       , id,          'publish'            , callback);}

function activateRevision              (id               , callback){doAction      ('revisions'                        , id,          'activate'           , callback);}
function deprecateRevision             (id               , callback){doAction      ('revisions'                        , id,          'deprecate'          , callback);}
function publishRevision               (id               , callback){doAction      ('revisions'                        , id,          'publish'            , callback);}

function setInstanceAssembly           (id,          data, callback){http.post({data:data}, [cloud.baseUrl, 'instances', id,          'set-assembly'      ], callback);}
function setInstanceAttachFile         (id,          data, callback){http.post({data:data}, [cloud.baseUrl, 'instances', id,          'attach'            ], callback);}
function setInstanceAssembled          (id               , callback){doAction      ('instances'                        , id,          'assembled'          , callback);}
function setInstanceFailed             (id               , callback){doAction      ('instances'                        , id,          'failed'             , callback);}
function setInstancePassed             (id               , callback){doAction      ('instances'                        , id,          'passed'             , callback);}
function setInstanceActive             (id               , callback){doAction      ('instances'                        , id,          'active'             , callback);}
function setInstanceRetired            (id               , callback){doAction      ('instances'                        , id,          'retired'            , callback);}
function setInstanceDamaged            (id               , callback){doAction      ('instances'                        , id,          'damaged'            , callback);}
function setInstanceRepaired           (id               , callback){doAction      ('instances'                        , id,          'repaired'           , callback);}
function setInstanceDestroyed          (id               , callback){doAction      ('instances'                        , id,          'destroyed'          , callback);}
function setInstanceCompromised        (id               , callback){doAction      ('instances'                        , id,          'compromised'        , callback);}
function addInstanceIdentity           (id               , callback){doAction      ('instances'                        , id,          'add-identity'       , callback);}
function addInstanceChildren           (id               , callback){doAction      ('instances'                        , id,          'add-children'       , callback);}

function makeMemberAdmin               (id               , callback){doAction      ('members'                          , id,          'admin'              , callback);}
function makeMemberGuest               (id               , callback){doAction      ('members'                          , id,          'guest'              , callback);}
function makeMemberStandard            (id               , callback){doAction      ('members'                          , id,          'member'             , callback);}
function makeMemberOwner               (id               , callback){doAction      ('members'                          , id,          'owner'              , callback);}
function makeMemberPrimary             (id               , callback){doAction      ('members'                          , id,          'primary'            , callback);}

function rekeyDevice                   (id               , callback){doAction      ('devices'                          , id,          'rekey'              , callback);}
function transferMachine               (id, value        , callback){doChangeValue ('machines'                         , id,          'transfer' , value   , callback);}
function transferDevice                (id, value        , callback){doChangeValue ('devices'                          , id,          'transfer' , value   , callback);}
function relocateMachine               (id, value        , callback){doChangeValue ('machines'                         , id,          'relocate' , value   , callback);}
function relocateDevice                (id, value        , callback){doChangeValue ('devices'                          , id,          'relocate' , value   , callback);}
function serveMachine                  (id               , callback){doAction      ('machines'                         , id,          'serve'              , callback);}
function completeDeviceRegistration    (id               , callback){doAction      ('devices'                          , id,          'registered'         , callback);}

function activateDeviceModel           (id               , callback){doAction      ('device-models'                    , id,          'activate'           , callback);}
function deprecateDeviceModel          (id               , callback){doAction      ('device-models'                    , id,          'deprecate'          , callback);}
function obsoleteDeviceModel           (id               , callback){doAction      ('device-models'                    , id,          'obsolete'           , callback);}
function activateDeviceFamily          (id               , callback){doAction      ('device-families'                  , id,          'activate'           , callback);}
function deprecateDeviceFamily         (id               , callback){doAction      ('device-families'                  , id,          'deprecate'          , callback);}
function obsoleteDeviceFamily          (id               , callback){doAction      ('device-families'                  , id,          'obsolete'           , callback);}
function activateManufacturerPart      (id               , callback){doAction      ('manufacturer-parts'               , id,          'activate'           , callback);}
function deprecateManufacturerPart     (id               , callback){doAction      ('manufacturer-parts'               , id,          'deprecate'          , callback);}
function obsoleteManufacturerPart      (id               , callback){doAction      ('manufacturer-parts'               , id,          'obsolete'           , callback);}

function activateItem                  (id               , callback){doAction      ('items'                            , id,          'activate'           , callback);}
function deprecateItem                 (id               , callback){doAction      ('items'                            , id,          'deprecate'          , callback);}
function obsoleteItem                  (id               , callback){doAction      ('items'                            , id,          'obsolete'           , callback);}

function setMessageRead                (id               , callback){doAction      ('messages'                         , id,          'read'               , callback);}

function registerOrganization          (             data, callback){addRecord     ('organizations'                        ,          {data:data}, callback);}
function registerPerson                (             data, callback){addRecord     ('people'                               ,          {data:data}, callback);}
function registerBot                   (             data, callback){addRecord     ('bots'                                 ,          {data:data}, callback);}
function addIdentity                   (             data, callback){addRecord     ('identities'                           ,          {data:data}, callback);}
function addAttachment                 (             data, callback){addRecord     ('attachments'                          ,          {data:data}, callback);}
function addResult                     (             data, callback){addRecord     ('results'                              ,          {data:data}, callback);}
function addRevision                   (             data, callback){addRecord     ('revisions'                            ,          {data:data}, callback);}
function addInstance                   (             data, callback){addRecord     ('instances'                            ,          {data:data}, callback);}
function addBatch                      (             data, callback){addRecord     ('batches'                              ,          {data:data}, callback);}
function addPubkey                     (             data, callback){addRecord     ('pubkeys'                              ,          {data:data}, callback);}
function addPlatform                   (             data, callback){addRecord     ('platforms'                            ,          {data:data}, callback);}
function registerMachine               (             data, callback){addRecord     ('machines'                             ,          {data:data}, callback);}
function registerDevice                (             data, callback){addRecord     ('devices'                              ,          {data:data}, callback);}
function registerDeviceDefinition      (             data, callback){addRecord     ('device-definitions'                   ,          {data:data}, callback);}
function registerCapability            (             data, callback){addRecord     ('capabilities'                         ,          {data:data}, callback);}
function registerEvent                 (             data, callback){addRecord     ('events'                               ,          {data:data}, callback);}
function registerLocation              (             data, callback){addRecord     ('locations'                            ,          {data:data}, callback);}
function addZone                       (             data, callback){addRecord     ('zones'                                ,          {data:data}, callback);}
function registerActionRequest         (             data, callback){addRecord     ('actions'                              ,          {data:data}, callback);}
function registerNotification          (             data, callback){addRecord     ('notifications'                        ,          {data:data}, callback);}
function addPackageRelease             (             data, callback){addRecord     ('packages'                             ,          {data:data}, callback);}
function addMember                     (             data, callback){addRecord     ('members'                              ,          {data:data}, callback);}
function addManufacturer               (             data, callback){addRecord     ('manufacturers'                        ,          {data:data}, callback);}
function addManufacturerPart           (             data, callback){addRecord     ('manufacturer-parts'                   ,          {data:data}, callback);}
function addGroup                      (             data, callback){addRecord     ('groups'                               ,          {data:data}, callback);}
function addGroupMember                (id,          data, callback){addChild      ('groups'         ,'members'        , id,          {data:data}, callback);}
function addDatastreamItem             (id,          data, callback){addChild      ('datastreams'    ,'items'          , id,          {data:data}, callback);}
function addPartToItem                 (id,          data, callback){addChild      ('items'          ,'parts'          , id,          {data:data}, callback);}
function addRelatedToProject           (id,          data, callback){addChild      ('projects'       ,'related'        , id,          {data:data}, callback);}
function addIdentityHistory            (id,          data, callback){addChild      ('identities'     ,'history'        , id,          {data:data}, callback);}

function addChildrenToItem             (id,          data, callback){addChild      ('items'          ,'children'       , id,          {data:data}, callback);}
function removePartFromItem            (id, childId      , callback){deleteChild   ('items'          ,'parts'          , id, childId             , callback);}
function removeRelatedFromProject      (id, childId      , callback){deleteChild   ('projects'       ,'related'        , id, childId             , callback);}
function addDeviceFamily               (             data, callback){addRecord     ('device-families'                      ,          {data:data}, callback);}
function addDeviceModel                (             data, callback){addRecord     ('device-models'                        ,          {data:data}, callback);}
function addPicklist                   (             data, callback){addRecord     ('picklists'                            ,          {data:data}, callback);}
function addTable                      (             data, callback){addRecord     ('vtables'                              ,          {data:data}, callback);}
function addItem                       (             data, callback){addRecord     ('items'                                ,          {data:data}, callback);}
function addProject                    (             data, callback){addRecord     ('projects'                             ,          {data:data}, callback);}
function addMessage                    (             data, callback){addRecord     ('messages'                             ,          {data:data}, callback);}

function removeLocation                (id               , callback){deleteRecord  ('locations'                        , id,                       callback);}
function removeManufacturer            (id               , callback){deleteRecord  ('manufacturers'                    , id,                       callback);}
function removeManufacturerPart        (id               , callback){deleteRecord  ('manufacturer-parts'               , id,                       callback);}
function removeMember                  (id               , callback){deleteRecord  ('members'                          , id,                       callback);}
function removeGroupMember             (id, childId      , callback){deleteChild   ('groups'       ,'members'          , id, childId,              callback);}
function removeDeviceFamily            (id               , callback){deleteRecord  ('device-families'                  , id,                       callback);}
function removeDeviceModel             (id               , callback){deleteRecord  ('device-models'                    , id,                       callback);}
function removePackageRelease          (id               , callback){deleteRecord  ('packages'                         , id,                       callback);}
function removeInstance                (id               , callback){deleteRecord  ('instances'                        , id,                       callback);}
function removeIdentity                (id               , callback){deleteRecord  ('identities'                       , id,                       callback);}
function removeZone                    (id               , callback){deleteRecord  ('zones'                            , id,                       callback);}
function removeTable                   (id               , callback){deleteRecord  ('vtables'                          , id,                       callback);}
function removeItem                    (id               , callback){deleteRecord  ('items'                            , id,                       callback);}
function removeProject                 (id               , callback){deleteRecord  ('projects'                         , id,                       callback);}
function removeMessage                 (id               , callback){deleteRecord  ('messages'                         , id,                       callback);}
function removeAttachment              (id               , callback){deleteRecord  ('attachments'                      , id,                       callback);}

function getVRecords                   (tableId, options , callback){readList      ('vrecords/' + tableId              ,     options             , callback);}
function addVRecord                    (tableId,     data, callback){addRecord     ('vrecords/' + tableId              ,              {data:data}, callback);}
function getOneVRecord                 (tableId, id      , callback){readRecord    ('vrecords/' + tableId              , id                      , callback);}
function updateVRecord                 (tableId, id, data, callback){updateRecord  ('vrecords/' + tableId              , id,          {data:data}, callback);}
function removeVRecord                 (tableId, id      , callback){deleteRecord  ('vrecords/' + tableId              , id,                       callback);}
//..............................................................................

//..............................................................................
// These will only be accessible if the session is same organization
function getOneOrganization(id, callback)
{
    http.get(null, [cloud.baseUrl, 'organizations'], function(err,data)
    {
        log.debug('getOneOrganization_callback:',id, err,data);
        if (err || !data || !data.items)
        {
            callback(err || null);
        }
        else
        {
            var foundOrganization = null;
            processList(data.items, function(item)
            {
                if (item.organization.id == id)
                    foundOrganization = item.organization;
            });
            if (foundOrganization)
                callback(null, foundOrganization);
            else
                callback('missing',null);
        }
    });
}
//..............................................................................

//..............................................................................
// Avatars are uploaded to system store at:
// mesh-store-cn-01/system/avatars
// Given the collectionId, avatar id and sizem this maps to something like:
// https://api.mesheven-kappa.com.cn/v0/files/system/avatars/locations/default-0003-s200.jpg);
//..............................................................................
function getAvatarUrl(collectionId, entity, size)
{
    var path;
    
    if (collectionId == 'memberships')
        collectionId =  'organizations';

    if (isString(entity.avatar))
    {
        size = size || 's200';
        if (isString(entity.avatar))
        {
            if (entity.avatar_type == 'system')
            {
                path = cloud.domainUrl + '/files/system/avatars/' + collectionId + '/' + entity.avatar + '-' + size + '.jpg';
                log.debug('SpecialAvatar:system:',collectionId + '_getImageUrl:',entity.id,path);
                return path;
            }
            else
            if (entity.avatar_type == 'file')
            {
                path = cloud.domainUrl + '/files/' + entity.avatar;
                log.debug('SpecialAvatar:file:',collectionId + '_getImageUrl:',entity.id,path);
                return path;
            }
            else
            if (entity.avatar_type == 'attachment')
            {
                path = cloud.domainUrl + '/files/hashes/' + entity.avatar;
                log.debug('SpecialAvatar:attachment:',collectionId + '_getImageUrl:',entity.id,path);
                return path;
            }
        }
    }
    return null;
}
//..............................................................................

//..............................................................................
function getMessagesByContext(contextId, callback)
{
    http.get({}, [cloud.baseUrl, 'messages', 'context', contextId], callback);
}
//..............................................................................

//..............................................................................
function getUnreadMessages(callback)
{
    http.get({}, [cloud.baseUrl, 'messages', 'unread'], callback);
}
//..............................................................................

//..............................................................................
function getOnePubkeyOpen(id, callback)
{
    const targetHost = getApiDomain().split('.').slice(1).join('.');
    const url = ['https://id.' + targetHost, 'key', id];
    log.debug('getOnePubkeyOpen:',url.join('/'));
    http.get({}, url, callback);
}
//..............................................................................

//..............................................................................
function getOnePlatformOpen(id, callback)
{
    const targetHost = getApiDomain().split('.').slice(1).join('.');
    const url = ['https://id.' + targetHost, 'platform', id];
    log.debug('getOnePlatformOpen:',url.join('/'));
    http.get({}, url, callback);
}
//..............................................................................

addProperties(cloud,
{
    meshContextCookieId : 'mesh-context',
    connect,

    getDataModel,
    getViewTemplate,

    validateSessionToken,
    setAuthenticated,
    loginPerson,
    loginBot,
    loginMachine,
    logout,
    checkInvitationExpired,
    changePassword,
    changePasswordByInvitation,
    changeEmail,
    requestPasswordReset,
    validateSession,
    validateCapabilityBySession,

    getOnePerson,
    getOneBot,
    getOneOrganization,
    getOneCapability,
    getOneDatastream,
    getOneController,
    getOneMachine,
    getOneDevice,
    getOneDeviceDefinition,
    getOneAction,
    getOneEvent,
    getOneMember,
    getOneGroup,
    getOneGroupMember,
    getOnePackage,
    getBestPackage,
    getOnePackageRelease,
    getOneLocation,
    getOneZone,
    getOneTable,
    getOneItem,
    getOneProject,
    getOneFilestore,
    getOneResourceInfo,

    getBatches,
    addBatch,

    getBots,
    getCapabilities,
    getCurrencyRates,
    getMachines,
    getDevices,
    getDeviceModels,
    getDeviceFamilies,
    getDeviceData,
    getDeviceDefinitions,
    getDataModels,
    getPicklists,
    getDatastreams,
    getControllers,
    getEvents,
    getActions,
    getMembers,
    getGroups,
    getGroupMembers,
    getPackages,
    getSessions,
    getOrganizations,
    getPeople,
    getLocations,
    getTables,
    getItems,
    getProjects,
    getMessagesByContext,
    getUnreadMessages,
    getNotifications,
    getInvitations,
    getZones,
    getLocationZones,
    getFilestores,

    getPersonGroups,
    getMemberships,
    getBotSessions,

    getMachineCapabilities,
    getMachineDatastreams,
    getMachineControllers,
    getMachineEvents,
    getMachineActions,
    getMachineBossed,
    getMachineAttached,
    getMachineSessions,

    getDeviceCapabilities,
    getDeviceDatastreams,
    getDeviceControllers,
    getDeviceEvents,
    getDeviceActions,

    getCapabilityDatastreams,
    getCapabilityControllers,
    getCapabilityEvents,
    getCapabilityActions,
    getDatastreamItems,

    updatePerson,
    updateBot,
    updateOrganization,
    updateCapability,
    updateDatastream,
    updateController,
    updateMachine,
    updateDevice,
    updateDeviceDefinition,
    updateDeviceFamily,
    updateDeviceModel,
    updateDeviceData,
    updateDeviceDataSet,
    updateAction,
    updateMember,
    updatePackage,
    updateGroup,
    updateGroupMember,
    updateLocation,
    updateZone,
    updatePicklist,
    updateTable,
    updateItem,
    updateProject,
    updateMessageContent,

    setDeviceFirmwareUpdated,
    setDeviceFirmwareUpdating,

    activateBot,
    activateCapability,
    activateDevice,
    activateMachine,
    activateMember,
    activateGroup,
    activateLocation,

    suspendBot,
    suspendCapability,
    suspendDevice,
    suspendMachine,
    suspendMember,
    suspendGroup,
    suspendLocation,
    rekeyDevice,
    transferMachine,
    transferDevice,
    relocateMachine,
    relocateDevice,
    serveMachine,
    completeDeviceRegistration,
    deviceEmulatorStart,
    deviceEmulatorStop,

    makeMemberAdmin,  
    makeMemberGuest,  
    makeMemberStandard, 
    makeMemberOwner,  
    makeMemberPrimary,

    activateDeviceModel,
    deprecateDeviceModel,
    obsoleteDeviceModel,
    activateDeviceFamily,
    deprecateDeviceFamily,
    obsoleteDeviceFamily,

    activateItem,
    deprecateItem,
    obsoleteItem,

    setMessageRead,

    registerOrganization,
    registerPerson,
    registerBot,
    registerMachine,
    registerDevice,
    registerDeviceDefinition,
    registerCapability,
    registerEvent,
    registerActionRequest,
    registerLocation,
    addPackageRelease,
    addMember,
    addGroup,
    addGroupMember,
    addDatastreamItem,
    addZone,
    addDeviceFamily,
    addDeviceModel,
    addPicklist,
    addTable,
    addItem,
    addPartToItem,
    removePartFromItem,
    addRelatedToProject,
    addIdentityHistory,
    removeRelatedFromProject,
    addChildrenToItem,
    addProject,
    addMessage,
    removeManufacturer,
    removeManufacturerPart,
    removeMember,
    removeGroupMember,
    removeLocation,
    removeDeviceFamily,
    removeDeviceModel,
    removePackageRelease,
    removeInstance,
    removeIdentity,
    removeZone,
    removeTable,
    removeItem,
    removeProject,
    removeMessage,
    removeAttachment,

    getOneManufacturer,
    getOneManufacturerPart,
    getManufacturers,
    getManufacturerParts,
    addManufacturer,
    addManufacturerPart,
    updateManufacturer,
    updateManufacturerPart,
    activateManufacturer,
    suspendManufacturer,
    activateManufacturerPart,
    deprecateManufacturerPart,
    obsoleteManufacturerPart,

    getOneIdentity,
    getIdentities,
    updateIdentity,  //TODO NM: Debug only, remove later
    activateIdentity,
    deprecateIdentity,
    publishIdentity,
    addIdentity,  

    getOneResult,
    getResults,
    addResult,

    getOneAttachment,
    getAttachments,
    addAttachment,


    getOneRevision,
    getRevisions,
    updateRevision,   //TODO NM: Debug only, remove later
    activateRevision,
    deprecateRevision,
    publishRevision,
    addRevision,

    getOneInstance,
    getInstances,
    updateInstance,
    setInstanceAssembly,
    setInstanceAttachFile,
    setInstanceAssembled,
    setInstanceFailed,
    setInstancePassed,
    setInstanceActive,
    setInstanceRetired,
    setInstanceDamaged,
    setInstanceRepaired,
    setInstanceDestroyed,
    setInstanceCompromised,
    addInstanceIdentity,
    addInstanceChildren,
    addInstance,

    getVRecords,
    addVRecord,
    getOneVRecord,
    updateVRecord,
    removeVRecord,

    signingRequest,
    getAvatarUrl,
    redirectToLogin,

    activatePackageRelease,
    deprecatePackageRelease,
    obsoletePackageRelease,
    sharePackageRelease,
    publishPackageRelease,

    packageReleaseSharePrivate,
    packageReleaseShareMaker,
    packageReleaseShareMesh,
    packageReleaseShareOpen,
    packageReleaseRestrictPrivate,
    packageReleaseRestrictMaker,
    packageReleaseRestrictMesh,

    getOnePubkey,
    getOnePubkeyOpen,
    getPubkeys,
    updatePubkey,
    addPubkey,

    getOnePlatform,
    getOnePlatformOpen,
    getPlatforms,
    addPlatform,

    requestMachineRegistration,
});
//..............................................................................

//..............................................................................
functionAsProperty_ReadOnly(cloud, getSessionOrganizationId , 'organizationId' );
functionAsProperty_ReadOnly(cloud, getSessionPersonId       , 'personId'       );
functionAsProperty_ReadOnly(cloud, getSessionToken          , 'sessionToken'   );
functionAsProperty_ReadOnly(cloud, getSessionDomain         , 'sessionDomain'  );
functionAsProperty_ReadOnly(cloud, getSessionClient         , 'sessionClient'  );
functionAsProperty_ReadOnly(cloud, getSessionType           , 'sessionType'    );
functionAsProperty_ReadOnly(cloud, getSessionRoles          , 'sessionRoles'   );
functionAsProperty_ReadOnly(cloud, isConnected              , 'connected'      );
functionAsProperty_ReadOnly(cloud, isAuthenticated          , 'authenticated'  );
functionAsProperty_ReadOnly(cloud, getBaseUrl               , 'baseUrl'        );
functionAsProperty_ReadOnly(cloud, getServerUrl             , 'serverUrl'      );
functionAsProperty_ReadOnly(cloud, getDomainUrl             , 'domainUrl'      );
//..............................................................................

//..............................................................................
emitter = makeEventEmitter();
cloud.on = emitter.on;
//..............................................................................

addToNameSpace(cloud, 'cloud');
