//..............................................................................
const {fs, path, pathRoot, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addToNameSpace,
    promoteScope_ReadOnly,
    promoteScope_ReadWrite,
    functionAsProperty_ReadOnly,
    addProperties
} = util;
//..............................................................................

//..............................................................................
cxq.validators                  = {};
//..............................................................................

//..............................................................................
var meshBaseDomain     =          'mesheven.com.cn';
var meshApiDomain      =      'api.mesheven.com.cn';
var meshPresenceDomain = 'presence.mesheven.com.cn';
//..............................................................................

//..............................................................................
function showProcessVars()
{
    if (!isNodeJs) return;
    
    const defaultPaths = process.env.path.split(';');
    const defaultExts  = process.env.PATHEXT.split(';');
    const env = process.env;

    console.log('#################################################################');
    console.log('execPath                       :', process.execPath               );
    console.log('execPath                       :', process.execArgv               );
    console.log('ProgramData                    :', env.ProgramData                );
    console.log('ProgramFiles                   :', env.ProgramFiles               );
    console.log('ProgramData                    :', env.ProgramData                );
    console.log('LOCALAPPDATA                   :', env.LOCALAPPDATA               );
    console.log('APPDATA                        :', env.APPDATA                    );
    console.log('CommonProgramFiles             :', env.CommonProgramFiles         );
    console.log('CommonProgramFiles(x86)        :', env['CommonProgramFiles(x86)'] );
    console.log('ComSpec                        :', env.ComSpec                    );
    console.log('COMPUTERNAME                   :', env.COMPUTERNAME               );
    console.log('HOMEDRIVE                      :', env.HOMEDRIVE                  );
    console.log('HOMEPATH                       :', env.HOMEPATH                   );
    console.log('TEMP                           :', env.TEMP                       );
    console.log('SystemRoot                     :', env.SystemRoot                 );
    console.log('');
    console.log('USERDOMAIN                     :', env.USERDOMAIN                 );
    console.log('USERDOMAIN_ROAMINGPROFILE      :', env.USERDOMAIN_ROAMINGPROFILE  );
    console.log('USERNAME                       :', env.USERNAME                   );
    console.log('USERPROFILE                    :', env.USERPROFILE                );

    console.log('NUMBER_OF_PROCESSORS           :', env.NUMBER_OF_PROCESSORS       );
    console.log('OS                             :', env.OS                         );
    console.log('PROCESSOR_ARCHITECTURE         :', env.PROCESSOR_ARCHITECTURE     );
    console.log('PROCESSOR_IDENTIFIER           :', env.PROCESSOR_IDENTIFIER       );
    console.log('PROCESSOR_LEVEL                :', env.PROCESSOR_LEVEL            );
    console.log('PROCESSOR_REVISION             :', env.PROCESSOR_REVISION         );

    console.log('PATH                           :', defaultPaths                   );
    console.log('#################################################################');
}
//..............................................................................

//showProcessVars();

//..............................................................................
function getStoragePath()
{
    if (isNodeJs)
    {
        var isWindows = process.platform.indexOf('win') === 0;
        if (isWindows)
        {
          //return path.join(process.env.ProgramData, 'Mesheven');
            return path.join(process.env.APPDATA    , 'Mesheven');
        }
        else
        {
            //-- /etc/mesheven has to be created manually before start service first time
            return path.join('var','lib','mesheven');
        }
    }
    else
    {
        return '';
    }
}
//..............................................................................

//..............................................................................
var pathConfiguration       = '';
var pathCredentials         = '';
var pathEnvironment         = '';
var pathModules             = '';
var pathPackageBuild        = '';
var pathPackageDownload     = '';
var pathPackageRelease      = '';
var pathPackageSource       = '';
var pathPackageStaging      = '';
var pathDataStorage         = getStoragePath();
var pathAssetCache          = '';
var pathLocalStorage        = '';
var pathFirmwareRelease     = '';
var pathLog                 = '';
var pathDebug               = '';
var pathDeviceDefinitions   = '';
//..............................................................................

//..............................................................................
if (isNodeJs)
{
    pathConfiguration       = path.join(pathRoot        , 'configuration'      );
    pathCredentials         = path.join(pathRoot        , 'credentials'        );
    pathEnvironment         = path.join(pathRoot        , 'environment'        );
    pathModules             = path.join(pathRoot        , 'node_modules'       );
    pathPackageBuild        = path.join(pathRoot        , 'package-build'      );
    pathPackageDownload     = path.join(pathRoot        , 'package-download'   );
    pathPackageRelease      = path.join(pathRoot        , 'package-release'    );
    pathPackageSource       = path.join(pathRoot        , 'package-source'     );
    pathPackageStaging      = path.join(pathRoot        , 'package-staging'    );
    pathLocalStorage        = path.join(pathDataStorage , 'local-storage'      );
    pathAssetCache          = path.join(pathDataStorage , 'asset-cache'        );
    pathFirmwareRelease     = path.join(pathDataStorage , 'MeshEmbedded', 'package-release');
    pathLog                 = path.join(pathRoot        , 'mesh-log'           );
    pathDebug               = path.join(pathRoot        , 'mesh-debug'         );
    pathDeviceDefinitions   = path.join(pathPackageBuild, 'device-definitions' );
}
//..............................................................................

//..............................................................................
addToNameSpace(pathConfiguration     , 'pathConfiguration'       );
addToNameSpace(pathCredentials       , 'pathCredentials'         );
addToNameSpace(pathEnvironment       , 'pathEnvironment'         );
addToNameSpace(pathModules           , 'pathModules'             );
addToNameSpace(pathPackageBuild      , 'pathPackageBuild'        );
addToNameSpace(pathPackageDownload   , 'pathPackageDownload'     );
addToNameSpace(pathPackageRelease    , 'pathPackageRelease'      );
addToNameSpace(pathPackageSource     , 'pathPackageSource'       );
addToNameSpace(pathPackageStaging    , 'pathPackageStaging'      );
addToNameSpace(pathDataStorage       , 'pathDataStorage'         );
addToNameSpace(pathAssetCache        , 'pathAssetCache'          );
addToNameSpace(pathLocalStorage      , 'pathLocalStorage'        );
addToNameSpace(pathFirmwareRelease   , 'pathFirmwareRelease'     );
addToNameSpace(pathLog               , 'pathLog'                 );
addToNameSpace(pathDebug             , 'pathDebug'               );
addToNameSpace(pathDeviceDefinitions , 'pathDeviceDefinitions'   );
//..............................................................................

//..............................................................................
const meshSessionTokenIdentifier  = 'X-Mesheven-Authenticate-Token';
addToNameSpace(meshSessionTokenIdentifier, 'meshSessionTokenIdentifier');
//..............................................................................

//..............................................................................
function getMemoryUsage()
{
    if (isNodeJs)
    {
        return process.memoryUsage().rss;
    }
    else
    if (
               window
            && window.performance
            && window.performance.memory
            && window.performance.memory.usedJSHeapSize
        )
    {
        return window.performance.memory.usedJSHeapSize;
    }
    else
    {
        return 0;
    }
}
//..............................................................................

//..............................................................................
function getBaseDomain()
{
    //For browser, use the current browser domain
    var baseDomain = meshBaseDomain;
    if (!isNodeJs && location)
    {

        var hostname = location.hostname;
     // console.log('hostname:', hostname, 'split:',hostname.split('.'));
        baseDomain = hostname.split('.').slice(1).join('.');
    }

 // console.info('getBaseDomain_:',baseDomain);
    return baseDomain;
}
//..............................................................................

//..............................................................................
function setBaseDomain    (domain) {       meshBaseDomain     = domain;}
function getApiDomain     (      ) {return meshApiDomain              ;}
function getPresenceDomain(      ) {return meshPresenceDomain         ;}
function setApiDomain     (domain) {       meshApiDomain      = domain;}
function setPresenceDomain(domain) {       meshPresenceDomain = domain;}
//..............................................................................

//..............................................................................
const systemOrganizationDomain = 'system';
const systemOrganizationId     = '00000000';
const publicDomain             = '00000001';
//..............................................................................
functionAsProperty_ReadOnly(util, function(){return systemOrganizationDomain;}, 'systemOrganizationDomain');
functionAsProperty_ReadOnly(util, function(){return systemOrganizationId    ;}, 'systemOrganizationId'    );
functionAsProperty_ReadOnly(util, function(){return publicDomain            ;}, 'publicDomain'            );
//..............................................................................

//..............................................................................
addProperties(util,
{
    getMemoryUsage,
    getBaseDomain,
    getApiDomain,
    getPresenceDomain,
    setBaseDomain,
    setApiDomain,
    setPresenceDomain
});
//..............................................................................

