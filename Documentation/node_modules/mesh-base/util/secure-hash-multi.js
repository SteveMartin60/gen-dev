const bs58 = require('bs58');

//..............................................................................
const {Int64, logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    isString,
    toBase32,
    fromBase32,
    randomBase32Id,
    jsonToSha256,
    jsonToSha256Hex,
    fileToSha256Hex,
    stringToSha256Hex,
    bufferToSha256Hex,
    folderToSha256Hex,
    padNumber,
    padLeft,
} = util;
//..............................................................................

//..............................................................................
const log = logger('secure-hash-multi');
log.setLevel('info');
//..............................................................................

//..............................................................................
function bytesAsUInt32BE(bytes)
{
    return ((bytes[0] * 0x1000000) +
            (bytes[1] *   0x10000) +
            (bytes[2] *     0x100) +
            (bytes[3]            ));
}
//..............................................................................

//..............................................................................
function bytesToBase32Id(bytes)
{
    const n1  = bytesAsUInt32BE(bytes.slice(0,4));
    const n2  = bytesAsUInt32BE(bytes.slice(4,8));

    const b1 = toBase32(n1,6);
    const b2 = toBase32(n2,6);

    const s = (b1.slice(0,6) + b2.slice(0,6)).toUpperCase();
    return s.slice(0,4) + '-' + s.slice(4,8) + '-' + s.slice(8,12);
}
//..............................................................................

//..............................................................................
function jsonToSha256HashId(record)
{
    const bytes = jsonToSha256(record).slice(0,8); //Array with first 8 from 32 byte hash
    return bytesToBase32Id(bytes.slice(0,8));
}
//..............................................................................

//..............................................................................
function base32IdToBytes(id)
{
    let b1 = id.slice(0,4) + id.slice( 5, 7);
    let b2 = id.slice(7,9) + id.slice(10,14);
    
    b1 = b1.toLowerCase();
    b2 = b2.toLowerCase();

    const n1 = fromBase32(b1);
    const n2 = fromBase32(b2);
    
    const h1 = padNumber(n1.toString(16),8);
    const h2 = padNumber(n2.toString(16),8);

    let a0 = h1.slice(0,2);
    let a1 = h1.slice(2,4);
    let a2 = h1.slice(4,6);
    let a3 = h1.slice(6,8);
    let a4 = h2.slice(0,2);
    let a5 = h2.slice(2,4);
    let a6 = h2.slice(4,6);
    let a7 = h2.slice(6,8);

    a0 = parseInt(a0, 16);
    a1 = parseInt(a1, 16);
    a2 = parseInt(a2, 16);
    a3 = parseInt(a3, 16);
    a4 = parseInt(a4, 16);
    a5 = parseInt(a5, 16);
    a6 = parseInt(a6, 16);
    a7 = parseInt(a7, 16);

    return [a0,a1,a2,a3,a4,a5,a6,a7];
}
//..............................................................................

//..............................................................................
function base32IdToUInt64(id)
{
    let base32_hi = id.slice(0,4) + id.slice( 5, 7);
    let base32_lo = id.slice(7,9) + id.slice(10,14);

    base32_hi = base32_hi.toLowerCase();
    base32_lo = base32_lo.toLowerCase();

    const num_hi = fromBase32(base32_hi);
    const num_lo = fromBase32(base32_lo);
    
    return new Int64(num_lo,num_hi, true);
}
//..............................................................................

//..............................................................................
function uInt64ToBase32Id(int64)
{
    const num_hi  = int64.high;
    const num_lo  = int64.low;
    const base32_hi = toBase32(num_hi,6);
    const base32_lo = toBase32(num_lo,6);

    let s = (base32_hi.slice(0,6) + base32_lo.slice(0,6)).toUpperCase();
    s = s.slice(0,4) + '-' + s.slice(4,8) + '-' + s.slice(8,12);
    // console.log
    // ({
    //     int64:int64.toString(16),
    //     num_hi:num_hi.toString(16),
    //     num_lo:num_lo.toString(16),
    //     base32_hi,
    //     base32_lo,
    //     s,
    // });
    return s;
}
//..............................................................................

//..............................................................................
function encodeSha256MultiHash(hex)
{
    if (!isString(hex))
    {
        log.error('ERROR:encodeSha256MultiHash:Not a string:',hex);
        return null;
    }

    if (hex.length !== 64)
    {
        log.error('ERROR:encodeSha256MultiHash:Invalid-Length:',hex.length, 'hex:',hex);
        return null;
    }

    if (parseInt(hex.slice(0, 2), 16) > 60)
        hex = '01' + hex;
    else
        hex = '02' + hex;

    try
    {
        return 'Qm' + bs58.encode(Buffer.from(hex, 'hex'));
    }
    catch(e)
    {
        log.error('ERROR:encodeSha256MultiHash:Conversion-Error:',hex.length, 'hex:',hex);
        return null;
    }
}
//..............................................................................

//..............................................................................
function jsonToSha256MultiHash(obj)
{
    const recordHash = jsonToSha256Hex(obj);
    return encodeSha256MultiHash(recordHash);
}
//..............................................................................

//..............................................................................
function stringToSha256MultiHash(str)
{
    const recordHash = stringToSha256Hex(str);
    return encodeSha256MultiHash(recordHash);
}
//..............................................................................

//..............................................................................
function bufferToSha256MultiHash(buf)
{
    const recordHash = bufferToSha256Hex(buf);
    return encodeSha256MultiHash(recordHash);
}
//..............................................................................

//..............................................................................
function fileToSha256MultiHash(file, callback)
{
    fileToSha256Hex(file, function(err, hex)
    {
        if (err)
        {
            callback(err);
        }
        else
        {
            const multi = encodeSha256MultiHash(hex);
            callback(null, multi, hex);
        }
    });
}
//..............................................................................

//..............................................................................
function folderToSha256MultiHash(folder, callback)
{
    folderToSha256Hex(folder, function(err, hex)
    {
        if (err)
        {
            callback(err);
        }
        else
        {
            const multi = encodeSha256MultiHash(hex);
            callback(null, multi, hex);
        }
    });
}
//..............................................................................

//..............................................................................
// Only checks for sha256
// 1. Remove leading two characters (Qm)
// 2. Decode base58 string to 33 byte array
// 3. Remove the leading byte, which is part of the hash tag
// The hash will look like: QmPH4nmLYxgWyq9FqpzvxAEPZ5ZdwGZjmvusLqPDCk7mu1
//..............................................................................
 function decodeMultiHash(hash)
{
    if (!isString(hash))
    {
        log.error('ERROR:decodeMultiHash:Not a string:',hash);
        return null;
    }

    if (hash.slice(0, 2) !== 'Qm')
    {
        log.error('ERROR:decodeMultiHash:Invalid-Prefix:',hash);
        return null;
    }

    if (hash.length !== 46)
    {
        log.error('ERROR:decodeMultiHash:Invalid-Length:',hash.length, 'hash:',hash);
        return null;
    }

    try
    {
        const d = bs58.decode(hash.slice(2));
        return d.slice(1).toString('hex');
    }
    catch(e)
    {
        log.error('ERROR:decodeMultiHash:Conversion-Error:',hash.length, 'hash:',hash);
        return null;
    }
}
//..............................................................................

const exported =
{
    jsonToSha256HashId,
    encodeSha256MultiHash,
    jsonToSha256MultiHash,
    fileToSha256MultiHash,
    stringToSha256MultiHash,
    bufferToSha256MultiHash,
    folderToSha256MultiHash,
    decodeMultiHash,

    bytesAsUInt32BE,
    base32IdToBytes,
    base32IdToUInt64,
    bytesToBase32Id,
    uInt64ToBase32Id,
};

addProperties(util,exported);
module.exports = exported;
