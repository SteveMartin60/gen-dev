//var OneColor  = require('onecolor');

//..............................................................................
const {logger} = cxq;
//..............................................................................

//..............................................................................
var log = logger('Color Utils (Deprecated)');
log.setLevel('info');
//..............................................................................

//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const
{
    color:colorUtil,  // The new color lib
    isDefined,
    isString,
    every,
    addProperties,
    round1
} = util;
//..............................................................................

////..............................................................................
//var namedColors = cxq.util.namedColors = {};
////..............................................................................
//
////..............................................................................
////These are setup to match with the PCB configuration of the LED 595 shift chains
////But have corrected this in the VHDL driver.
////See "RGB_Select" signal in LedShiftDriver.Vhd
////..............................................................................
//namedColors.blue     = 0x0000FF;
//namedColors.green    = 0x00FF00;
//namedColors.red      = 0xFF0000;
////namedColors.green    = 0x0000FF;  //Should be blue
////namedColors.red      = 0x00FF00;  //Should be green
////namedColors.blue     = 0xFF0000;  //Should be red
////..............................................................................
//namedColors.white    = 0xFFFFFF;
//namedColors.black    = 0;
//namedColors.lightRed = 0xFF0404;
//
//namedColors.purple   = namedColors.red   + namedColors.blue;
//namedColors.cyan     = namedColors.blue  + namedColors.green;
//namedColors.yellow   = namedColors.green + namedColors.red;
//
////namedColors.orange   = 0xb21800;
//namedColors.orange   = 0xFF4000;
////..........................................................................

function colorToRGB(color)
{
    //var red   = (color >> 16) & 0x0ff;
    //var green = (color >>  8) & 0x0ff;
    //var blue  = (color)       & 0x0ff;
    //
    //return {r:red, g:green, b:blue};

    log.warn('cxq.util.colorToRGB will be deprecated. Use cxq.util.color.toRGBObject instead');
    return colorUtil.toRgbObject(color);
}
//..........................................................................

//..............................................................................
function rgbToColor (r,g,b)
{
    //return  ((r & 0x0ff) << 16) | ( (g & 0x0ff) << 8) | (b & 0x0ff);

    log.warn('cxq.util.rgbToColor will be deprecated. Use cxq.util.color.toRGBObject instead (Check for property syntax change)');
    return colorUtil.toInteger({r,g,b});
}
//..........................................................................
function rgbToHex(r, g, b)
{
    //function componentToHex(c)
    //{
    //    var hex = c.toString(16);
    //    return hex.length == 1 ? "0" + hex : hex;
    //}
    //////////////////////////////////////////////////////////////////////////
    //return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);

    log.warn('cxq.util.rgbToHex will be deprecated. Use cxq.util.color.toHexString instead');
    return colorUtil.toHexString({r,g,b});
}
//..............................................................................

//..........................................................................
function colorToHex(color)
{
    //var rgb = colorToRGB(color);
    //return rgbToHex(rgb.r, rgb.g, rgb.b);

    log.warn('cxq.util.rgbToHex will be deprecated. Use cxq.util.color.toHexString instead');
    return colorUtil.toHexString(color);
}
//..........................................................................

//..............................................................................
function hexToRgb(colorStr)
{
    //var s;
    //try
    //{
    //    s = colorStr.replace('#', '');
    //}
    //catch(err)
    //{
    //    console.log('hexToRgb error:',colorStr);
    //    s = colorStr;
    //}
    //
    //var number = parseInt(s, 16);
    //return colorToRGB(number);

    log.warn('cxq.util.hexToRgb will be deprecated. Use cxq.util.color.toRgbObject instead');
    return colorUtil.toRgbObject(colorStr);
}
//..............................................................................

//..........................................................................
function adjustBrightness(c, factor)
{
    //factor = factor / 1;
    //var rgb = colorToRGB(c);
    //
    //rgb.r = round1(rgb.r * factor);
    //rgb.g = round1(rgb.g * factor);
    //rgb.b = round1(rgb.b * factor);
    //
    //return rgbToColor(rgb.r, rgb.g,rgb.b);

    log.warn('cxq.util.adjustBrightness will be deprecated. Use cxq.util.color.brighten instead');
    return colorUtil.brighten(color, factor * 100);
}
//..............................................................................

//..........................................................................
function getGradientColor(colorA, colorB, offset)
{
    //var rgbA = colorToRGB(colorA);
    //var rgbB = colorToRGB(colorB);
    //var rgb  = {};
    //
    //rgb.r = rgbA.r + ((rgbB.r - rgbA.r) * offset);
    //rgb.g = rgbA.g + ((rgbB.g - rgbA.g) * offset);
    //rgb.b = rgbA.b + ((rgbB.b - rgbA.b) * offset);
    //rgb.r = round1(rgb.r);
    //rgb.g = round1(rgb.g);
    //rgb.b = round1(rgb.b);

    //var result = rgbToColor(rgb.r, rgb.g, rgb.b);

    //console.log('rA:' + rgbA.r + ' gA:' + rgbA.g + ' bA:' + rgbA.b);
    //console.log('rB:' + rgbB.r + ' gB:' + rgbB.g + ' bA:' + rgbB.b);
    //console.log('rF:' + rgb.r  + ' gF:' + rgb.g  + ' bF:' + rgb.b);
    //console.log('getGradientColor: 0x' + colorA.toString(16) + ' 0x' + colorB.toString(16) + ' ' + offset + ' => 0x' + result.toString(16));

    //return result;

    log.warn('cxq.util.adjustBrightness will be deprecated. Use cxq.util.color.getMidTone instead');
    return colorUtil.getMidTone(colorA, colorB, offset * 100);
}
//..........................................................................
// pwm  => 0..255
// load => 0..2000mA
//..........................................................................
//100% - red
// 90% - yellow
// 70% - green
function getLedIndicatorColor(pwmValue, loadValue, maxLoad)
{
    //var color;
    //var offset;
    //
    //var n = loadValue / maxLoad;
    //if (n > 1.0) n = 1.0;
    //
    //if (n < 0.6)
    //{
    //    //entire range is flat as green
    //    color = namedColors.green;
    //}
    //else
    //if (n >= 0.8)
    //{
    //    // between 0.8 and 1.0 is gradient between yellow and red
    //    offset = (n - 0.8) * 5;  //normalize 0..1
    //    //console.log('####################### 111 Offset:' + offset);
    //    color  = getGradientColor(namedColors.yellow, namedColors.red , offset);
    //}
    //else
    //{
    //    // between 0.6 and 0.8 is gradient between green and yellow
    //    offset = (n - 0.6) * 5;  //normalize 0..1
    //    //console.log('####################### 222 Offset:' + offset);
    //    color  = getGradientColor(namedColors.green, namedColors.yellow , offset);
    //}
    //
    //var brightness = pwmValue/255;
    //
    ////console.log('####################### 111 Offset:' + pwmValue + ':' + loadValue + ':' + maxLoad);
    //
    //return adjustBrightness(color, brightness);

    log.warn('cxq.util.getLedIndicatorColor will be deprecated. Use cxq.util.color.getLedIndicatorColor instead');
    return colorUtil.getLedIndicatorColor(pwmValue, loadValue, maxLoad);
}
//..........................................................................
function getAlarmIndicatorColor(value, valueAlarm_High, valueAlarm_CriticalHigh, valueAlarm_Low, valueAlarm_CriticalLow, warningMargin)
{
    //at alarm vale should be yellow
    //at critical alarm value should be red
    //var color;
    //var offset;
    //var range;
    //var d;
    //
    //if (!warningMargin) warningMargin = 10;
    //
    //if (valueAlarm_High > valueAlarm_CriticalHigh)
    //    valueAlarm_High = valueAlarm_CriticalHigh;
    //
    //var earlyWarning_High = valueAlarm_High - warningMargin;
    //var earlyWarning_Low  = valueAlarm_Low  + warningMargin;
    //
    //if ((value < earlyWarning_High) && (value > earlyWarning_Low))
    //{
    //    //entire range is green
    //    color = namedColors.green;
    //}
    //else
    //if ((value > valueAlarm_CriticalHigh) || (value < valueAlarm_CriticalLow))
    //{
    //    color = namedColors.red;
    //}
    //else
    //if (value >= valueAlarm_High)
    //{
    //    // between alarm-high and critical alarm-high - gradient between yellow and red
    //    range = valueAlarm_CriticalHigh - valueAlarm_High;
    //    d     = value - valueAlarm_High;
    //    offset = d / range;  //normalize 0..1
    //
    //    //console.log('####################### 111 Offset:' + offset);
    //    color  = getGradientColor(namedColors.yellow, namedColors.red , offset);
    //}
    //else
    //if (value <= valueAlarm_Low)
    //{
    //    // between alarm-low and critical alarm-low - gradient between yellow and red
    //    range = valueAlarm_Low - valueAlarm_CriticalLow;
    //    d     = valueAlarm_Low - value;
    //    offset = d / range;  //normalize 0..1
    //
    //    //console.log('####################### 222 Offset:' + offset);
    //    color  = getGradientColor(namedColors.yellow, namedColors.red , offset);
    //}
    //else
    //if (value >= earlyWarning_High)
    //{
    //    // between early-warning-high and alarm-high -  gradient between green and yellow
    //    range  = valueAlarm_High - earlyWarning_High;
    //    d      = value - earlyWarning_High;
    //    offset = d / range;  //normalize 0..1
    //
    //    //console.log('####################### 333 Offset:' + offset);
    //    color  = getGradientColor(namedColors.green, namedColors.yellow , offset);
    //}
    //else
    //if (value <= earlyWarning_Low)
    //{
    //    // between early-warning-low and alarm-low -  gradient between green and yellow
    //    range  = earlyWarning_Low - valueAlarm_Low;
    //    d      = earlyWarning_Low - value;
    //    offset = d / range;  //normalize 0..1
    //
    //    //console.log('####################### 444 Offset:' + offset);
    //    color  = getGradientColor(namedColors.green, namedColors.yellow , offset);
    //}
    //
    //return color;

    log.warn('cxq.util.getAlarmIndicatorColor is deprecated. Change your code');
}
//..........................................................................
function getRandomColor()
{
    //function random()
    //{
    //    return round1(Math.random() * 255);
    //}
    //var r = random();
    //var g = random();
    //var b = random();
    //return rgbToColor(r,g,b);

    log.warn('cxq.util.getRandomColor will be deprecated. Use cxq.util.color.getRandomColorInteger instead');
    return colorUtil.getRandomColorInteger();
}
//..........................................................................
function getRandomColorHex()
{
    //return colorToHex(getRandomColor());
    log.warn('cxq.util.getRandomColorHex will be deprecated. Use cxq.util.color.getRandomColorHexString instead');
    return colorUtil.getRandomColorHexString();
}
//..........................................................................

//..........................................................................
function makeColor(s)
{
    //return OneColor(s);

    log.warn('cxq.util.makeColor is deprecated because it exposes the inner mechanisms of a third-party dependency. Use alternative methods in cxq.util.color');
    return null;
}
//..........................................................................

//..............................................................................
function colorsEqual(c1,c2)
{
    //return (c1.hex() === c2.hex());

    log.warn('cxq.util.colorsEqual will be deprecated. Use cxq.util.color.colorsEqual instead');
    return colorUtil.colorsEqual(c1, c2);
}
//..............................................................................

//..............................................................................
function colorR(c)
{
    //return round1(c.red  () * 255);
    log.warn('cxq.util.colorR will be deprecated. Use cxq.util.color.toRgbObject(c).r instead');
    return cxq.util.color.toRgbObject(c).r;
}
//..............................................................................

//..............................................................................
function colorG(c)
{
    //return round1(c.green() * 255);
    log.warn('cxq.util.colorR will be deprecated. Use cxq.util.color.toRgbObject(c).g instead');
    return cxq.util.color.toRgbObject(c).g;
}
//..............................................................................

//..............................................................................
function colorB(c)
{
    //return round1(c.blue () * 255);
    log.warn('cxq.util.colorB will be deprecated. Use cxq.util.color.toRgbObject(c).r instead');
    return cxq.util.color.toRgbObject(c).b;
}
//..............................................................................

//var c = makeColor('rgba(27%, 0%, 0%, .5)');
//var c = makeColor('rgba(240, 21, 33, .5)');
//console.warn('color_as_red:', c.red(), 'rgb:',colorR(c), colorG(c), colorB(c));
//console.warn('makeColor:',makeColor('rgba(100%, 0%, 0%, .5)').alpha(.4).cssa()); // 'rgba(255,0,0,0.4)'
////////////////////////////////////////////////////////////////////////////
addProperties(util,
{
    colorToRGB,
    rgbToColor,
    rgbToHex,
    colorToHex,
    hexToRgb,
    adjustBrightness,
    getLedIndicatorColor,
    getAlarmIndicatorColor,
    getRandomColor,
    getRandomColorHex,
    colorsEqual,
    colorR,
    colorG,
    colorB
});
