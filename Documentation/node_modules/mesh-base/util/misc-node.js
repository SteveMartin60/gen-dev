const os         = require('os'      );
const url        = require('url'     );
const nodeAbi    = require('node-abi');
const winVersion = require('win-version');
//..............................................................................
const {fs, path, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    utcAsString,
    getObjectFromString,
    processList,
    addCaptionsAndDescriptions,
    loadJsonSync,
    isString,
} = util;
//..............................................................................

//..............................................................................
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
//..............................................................................

//..............................................................................
function urlParse(urlString)
{
    return url.urlParse(urlString);
}
//..............................................................................

//..............................................................................
function urlFormat(urlObject)
{
    return url.urlFormat(urlObject);
}
//..............................................................................

//..............................................................................
function dumpSystemInfo()
{
    var MB   = 1024*1024;
    var Hour = 3600;

    console.log('node start time :', utcAsString());
    console.log('os.hostname     :', os.hostname());
    console.log('os.totalmem     :', os.totalmem()/MB,'MB');
    console.log('os.freemem      :', os.freemem ()/MB,'MB');
    console.log('os.tmpdir       :', os.tmpdir  ());
    console.log('os.uptime       :', os.uptime  ()/Hour, 'Hours');
    console.log('os.type         :', os.type    ());
    console.log('os.platform     :', os.platform());
    console.log('cpu count       :', os.cpus().length  );
    console.log('cpu type        :', os.cpus()[0].model);
    console.log('cpu speed       :', os.cpus()[0].speed);

    console.log('process.title   :', process.title   );
    console.log('process.arch    :', process.arch    );
    console.log('process.platform:', process.platform);
    console.log('process.cwd()   :', process.cwd()   );
    console.log('process.version :', process.version );

    console.log('Device Model    :', getDeviceModelForNodeController());
}
//..............................................................................

//..............................................................................
function getHostInfo()
{
    var dataRecord = {};
    dataRecord.hostname         = os.hostname  (); // hostname of the operating system.
    dataRecord.os_type          = os.type      (); // operating system name.
    dataRecord.os_release       = os.release   (); // operating system release.
    dataRecord.os_platform      = os.platform  (); // operating system platform.
    dataRecord.os_architecture  = os.arch      (); // operating system CPU architecture.
    dataRecord.cpu_type         = os.cpus()[0].model;
    dataRecord.cpu_count        = os.cpus().length;
    dataRecord.cpu_architecture = process.arch;
    dataRecord.cpu_speed        = os.cpus()[0].speed;

    //dataRecord.platform      = process.platform;
    //dataRecord.time          = cxq.util.meshNow();
    //dataRecord.totalmem      = totalmem();
    //dataRecord.freemem       = freemem ();
    //dataRecord.alive         = alive   ();

    return dataRecord;
}
//..............................................................................

//..............................................................................
function getDeviceModelForNodeController()
{
    // Other values for platform are ['darwin', 'freebsd', 'sunos'] - Ignored
    // TODO: If Linux ARM      : need to detect ['mesheven_som03']
    // TODO: If Linux MIPS24KE : need to detect ['mesheven_som02']
    // TODO: If Linux or Windows ARM : need to detect 32/64
    var model = false;

    if (process.platform == 'win32')
    {
        switch (process.arch)
        {
            case 'x64'  : model = 'windows_x64'  ; break;
            case 'ia32' : model = 'windows_ia32' ; break;
            case 'arm'  : model = 'windows_arm32'; break;
        }
    }
    else
    if (process.platform == 'linux')
    {
        switch (process.arch)
        {
            case 'x64'  : model = 'linux_x64'  ; break;
            case 'ia32' : model = 'linux_ia32' ; break;
            case 'arm'  : model = 'linux_arm32'; break;
        }
    }
    else
    if (process.platform == 'darwin')
    {
        // TODO: distinguish OSX & iOS
        switch (process.arch)
        {
            case 'x64'  : model = 'osx_x64'  ; break;
            case 'ia32' : model = 'osx_ia32' ; break;
        }
    }
    return model;
}
//..............................................................................

//..............................................................................
function getRelativePlatformPath()
{
    var platformPath;
    if (process.platform == 'win32')
    {
        if (process.arch == 'x64') platformPath = 'win/amd64';
        else                       platformPath = 'win/x86'  ;
    }
    else
    if (process.platform == 'linux')
    {
        if (process.arch == 'x64') platformPath = 'linux/amd64';
        else                       platformPath = 'linux/x86';
    }
    else
    if (process.platform == 'darwin')
    {
        if (process.arch == 'x64') platformPath = 'osx/amd64';
        else                       platformPath = 'osx/x86';
    }
    return platformPath;
}
//..............................................................................

//..............................................................................
function runBrowser(url, callback)
{
    function callback_RunBrowser(err, stdout, stderr)
    {
        if (err)
        {
            var msg = 'failed to run browser';
            if (callback) callback(msg + ':' + err);
        }
        else
        if (stdout)
        {
            var stdoutData = getObjectFromString(stdout);
            if (callback) callback(null,stdout);
        }
        else
        {
            var msg = 'Unable to get stdoutData';
            console.log(msg);
            if (callback) callback(msg);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    var cmd;
    var exec = require('child_process').exec;
    switch (process.platform)
    {
        case "win32":
            cmd = "start ";
            break;
        case "darwin":
            cmd = "open ";
            break;
        default:
            callback('add [runBrowser] support for Linux!!');
            return;
    }
    cmd += url;
    exec(cmd, callback_RunBrowser);
}
//..............................................................................

//..............................................................................
function getCommandLineOptions(argv)
{
    var options = {};
    //..........................................................................
    function processArgv(arg)
    {
        var match;
        var key;
        var value;
        if(match = arg.match(/^-{1,2}([^=]+)=(.+)/))
        {
            key   = match[1];
            value = match[2];
        }
        else
        if (match = arg.match(/^-{1,2}(\w+)/))
        {
            key   = match[1];
            value = true;
        }

        if (key)
        {
            options[key] = value;
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    if (!argv) argv = process.argv;
    processList(argv, processArgv);
    return options;
}
//..............................................................................

//..............................................................................
function fileHasExtension(filename, ext)
{
    return (path.extname(filename).toLowerCase() == '.' + ext.toLowerCase());
}
//..............................................................................

//..............................................................................
function itemIsCodeFile(item)
{
    return (fileHasExtension(item,'js') && fs.existsSync(item));
}
//..............................................................................

//..............................................................................
function itemIsOptionsFile(item)
{
    return (fileHasExtension(item,'json') && fs.existsSync(item));
}
//..............................................................................

//..............................................................................
function itemIsPackage(item)
{
    return (!itemIsCodeFile(item) && !itemIsOptionsFile(item));
}
//..............................................................................

//..............................................................................
function memoryUsageByte()
{
    return process.memoryUsage().rss;
}
//..............................................................................

//..............................................................................
function getAppName()
{
    return '';
}
//..............................................................................

//..............................................................................
function getAppPath(urlString)
{
    return '';
}
//..............................................................................

//..............................................................................
function loadMetaDefinition()
{
    const definition      = {};
    const topFile         = process.mainModule.filename;
    const topFolder       = path.dirname(topFile);
    const metaInfoPath    = path.join(topFolder, 'meta.json');
    const releaseInfoPath = path.join(topFolder, 'release.json');

 // console.log('loadMetaDefinition:metaInfoPath   :', metaInfoPath   );
 // console.log('loadMetaDefinition:releaseInfoPath:', releaseInfoPath);

    var metaInfo, releaseInfo;

    if (fs.existsSync(metaInfoPath))
        metaInfo = loadJsonSync(metaInfoPath);

    if (fs.existsSync(releaseInfoPath))
        releaseInfo = loadJsonSync(releaseInfoPath);

    if (!metaInfo && !releaseInfo)
    {
        console.error('Failed to load meta.json or release.json in ' + topFolder);
        process.exit();
    }

    const info = releaseInfo || metaInfo;

    definition.id           = info.package || info.package_id || info.project_id;
    definition.dependencies = info.dependencies;//forceToArray(info.dependencies);

    if (releaseInfo && releaseInfo.package_size && releaseInfo.package_type && releaseInfo.revision)
        definition.release = releaseInfo;

    addCaptionsAndDescriptions(metaInfo, definition);

 // console.log('loadMetaDefinition:', metaInfoPath, definition);
    return definition
}
//..............................................................................

//..............................................................................
function getAbi(nodeVersion)
{
    let abi = nodeAbi.getAbi(nodeVersion, 'node');
    if (isString(abi) && abi.startsWith('nodeABI'))
        return abi.slice(3);
    else
        return abi || 'UNKNOWN';
}
//..............................................................................

//..............................................................................
const nodeExe      = process.versions.node;
const nodeV8       = process.versions.v8;
const nodeABI      = getAbi(nodeExe);
const nodePlatform = process.platform + '-' + process.arch;
//..............................................................................

console.log('---------------------------------------------------------------------');
console.log('Node.JS EXE='+ nodeExe, ' V8='+ nodeV8, ' ABI='+nodeABI,  'Platform=' + nodePlatform);
console.log('---------------------------------------------------------------------');

//..............................................................................
function getPlatformInfo()
{
    if (process.platform !== 'win32')
    {
        abort('getPlatformInfo currently valid for Windows only');
    }

    const v = winVersion();
    return 'Windows ' + [v.major, v.minor, v.build, v.revision].join('.') + ' ['+v.releaseId+']';
}
//..............................................................................

//..............................................................................
function getVersions()
{
    const result = {nodeExe, nodeV8, nodeABI, nodePlatform};
    if (process.platform === 'win32')
        result.OS = getPlatformInfo();

    return result;
}
//..............................................................................


addProperties(util,
{
    urlParse,
    urlFormat,
    dumpSystemInfo,
    getHostInfo,
    getDeviceModelForNodeController,
    getRelativePlatformPath,
    runBrowser,
    getCommandLineOptions,
    memoryUsageByte,
    getAppName,
    getAppPath,
    loadMetaDefinition,
    getVersions,
});
