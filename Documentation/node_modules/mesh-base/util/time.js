//..............................................................................
const {moment, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    isDefined,
    isNumeric,
    isString,
    every,
    addProperties,
    round1
} = util;
//..............................................................................

//..............................................................................
const oneSecond = 1000;
const oneMinute = oneSecond *  60;
const oneHour   = oneMinute *  60;
const oneDay    = oneHour   *  24;
const oneYear   = oneDay    * 365;
//..............................................................................

//..............................................................................
function makeDate(v)
{
    return new Date(v);
}
//..............................................................................

//..............................................................................
function meshNow()
{
    return new Date();
}
//..............................................................................

//..............................................................................
function meshNowMs()
{
    return meshNow().getTime();
}
//..............................................................................

//..............................................................................
// Sync node's high-res timer to standard Date at startup
//..............................................................................
var startTime = meshNowMs();
var startHres = getHighResTime();
//..............................................................................

//..............................................................................
function meshNowSeconds()
{
    return Math.floor(meshNowMs()/1000);
}
//..............................................................................

//..............................................................................
function getHighResTime()
{
    if (isNodeJs)
    {

        var hrTime = process.hrtime();
        var ns     = hrTime[1];
        var us     = round1(ns)/1000;
        var sec    = hrTime[0];

        return (sec * 1000) + (us / 1000);
    }
    else
    {
        return meshNowMs();
    }
}
//..............................................................................

//..............................................................................
function meshNowHighRes()
{
    var r = getHighResTime() - startHres;
    //console.log('startTime:' + startTime, 'r:',r);
    return (startTime + r);
}
//..............................................................................

//..............................................................................
// Returns true when:
// 1. olderTime is more recent than newerTime
// 2. olderTime is undefined and newerTime is defined
//..............................................................................
function isNewer(newerTime, olderTime)
{
    if (isDefined(newerTime) && !isDefined(olderTime)) return true;

    olderTime = moment(olderTime);
    newerTime = moment(newerTime);

    if(!olderTime.isValid() || !newerTime.isValid()) return false;

    return olderTime.isBefore(newerTime);
}
//..............................................................................

//..............................................................................
function isOlder(olderTime, newerTime)
{
    return isNewer(newerTime, olderTime);
}
//..............................................................................

//..............................................................................
function addSeconds (date, seconds)
{
    return makeDate(date.getTime() + seconds * 1000);
}
//..............................................................................

//..............................................................................
function addMinutes(date, minutes)
{
    return makeDate(date.getTime() + minutes * 60 * 1000);
}
//..............................................................................

//..............................................................................
function addHours(date, hours)
{
    return addMinutes(date, hours*60);
}
//..............................................................................

//..............................................................................
function addDays(date, days)
{
    return addHours(date, days*24);
}
//..............................................................................

//..............................................................................
function utc()
{
    return moment.utc();
}
//..............................................................................

//..............................................................................
function utcAsString()
{
    return utc().format('YYYY-MMM-DD HH:mm:ss.SSS');
}
//..............................................................................

//..............................................................................
function nowAsString()
{
    return moment().format('YYYY-MMM-DD HH:mm:ss.SSS');
}
//..............................................................................

//..............................................................................
function timeAsString(time, options={})
{
    var format = 'HH:mm:ss';
    if (options.ms)
        format += ':SSS';
    return moment(time).format(format);
}
//..............................................................................

//..............................................................................
function getMoment(time)
{
    //console.log('getMoment:1',time);
    if (isNumeric(time) || isString(time))
        time = makeDate(time);

    if (!time || !time.getTime) return null;

    //console.log('getMoment:2',typeof time, 'time:',time, time.getTime);

    var ms = time.getTime(); //Use milliseconds rather than moments parser from data object
    //console.log('getMoment:3',ms);

    var m = moment(ms, 'x');
    //console.log('getMoment:4',m.format());
    return m;
}
//..............................................................................

//..............................................................................
function datetimeAsString(time, options={})
{
    var m = getMoment(time);
    if (!m) return 'Bad DateTime:' + time;

    var format = 'YYYY-MMM-DD HH:mm';
    if (!options.compact)
    {
        format += ':ss';
        if (options.ms)
            format += ':SSS';
    }

    return m.format(format);
}
//..............................................................................

//..............................................................................
function dateAsString(date)
{
    var m = getMoment(date);
    if (!m) return 'Bad Date:' + date;

    var format = 'YYYY-MMM-DD';
    return m.format(format);
}
//..............................................................................

//..............................................................................
function fromNowAsString(time)
{
    var m = getMoment(time);
    if (!m) return 'Bad DateTime:' + time;

    var elapsed = meshNowMs() - m.valueOf();  //Milliseconds
    if (elapsed < 120*oneSecond)
    {
        var s = '';
        if (elapsed < 2*oneSecond)
            s = 'Just Now';
        else
            s = round1(elapsed/1000) + ' Seconds Ago';

        return s;
    }
    else
        return m.fromNow();
}
//..............................................................................

//..............................................................................
function toNowAsString(time)
{
    var m = getMoment(time);
    if (!m) return 'Bad DateTime:' + time;

    var fromNow = m.valueOf() - meshNowMs();  //Milliseconds
    if (fromNow < 120*oneSecond)
    {
        var s = '';
        if (fromNow < 2*oneSecond)
            s = 'Just Now';
        else
            s = round1(fromNow/1000) + ' Seconds';

        return s;
    }
    else
    {
        return m.toNow(true);
    }
}
//..............................................................................

//..............................................................................
function nowAsId()
{
    return moment().format('YYYY-MM-DD-HH-mm-ss-SSS');
}
//..............................................................................

//..............................................................................
function timeAsFilename(time, options)
{
    options = options || {};
    options.limit = options.limit || 'minute';
    var format = '';

         if (options.limit == 'month' ) format = 'YYYY-MM';
    else if (options.limit == 'day'   ) format = 'YYYY-MM-DD';
    else if (options.limit == 'hour'  ) format = 'YYYY-MM-DD-HH';
    else if (options.limit == 'minute') format = 'YYYY-MM-DD-HH-mm';
    else if (options.limit == 'second') format = 'YYYY-MM-DD-HH-mm-ss';
    else                                format = 'YYYY-MM-DD-HH-mm-ss-SSS';

    return moment(time).format(format);
}
//..............................................................................

//..............................................................................
function nowAsFilename(options)
{
    return timeAsFilename(meshNow(), options);
}
//..............................................................................

//..............................................................................
function msAsId(ms)
{
    return moment(ms).format('YYYY-MM-DD-HH-mm-ss-SSS');
}
//..............................................................................

//..............................................................................
function getTimestampId(time)
{
    var m = getMoment(time);
    if (m)
        return m.format('YYYYMMDD-HHmmss-SSS');
    else
        return '' + meshNowMs();
}
//..............................................................................

//..............................................................................
function utcConsoleString()
{
    return utc().format('MMM-DD-HH:mm:ss.SSS');
}
//..............................................................................

//..............................................................................
function utcAsId()
{
    return utc().format('YYYY-MMM-DD-HH-mm-ss-SSS');
}
//..............................................................................

//..............................................................................
function utcAsMinuteId()
{
    return utc().format('YYMMDDHHmm');
}
//..............................................................................

//..............................................................................
// Add or a remove a timer based on an id.
// Current state of timers is maintained on the hostObject that is passed in.
//..............................................................................
function ensureTimer(hostObject, makeActive, id, handler, period)
{
    hostObject.timers = hostObject.timers || {};
  //console.log('ensureTimer:',makeActive, id, period);
    var timer = hostObject.timers[id];
    //..........................................................................
    function enableTimer()
    {
        timer.handler = handler;
        timer.period  = period;
        timer.handle  = every(period).do(handler);
    }
    //..........................................................................
    function disableTimer()
    {
        clearInterval(timer.handle);
        timer.handle = null;
    }
    ////////////////////////////////////////////////////////////////////////////
    if (!timer)
    {
        timer = {handler:handler, period:period, handle:null};
        hostObject.timers[id] = timer;
    }

    if (!timer.handle && makeActive)
    {
        enableTimer();
    }
    else
    if (timer.handle && makeActive && (period != timer.period))
    {
        //Already active but change of period
        disableTimer();
        enableTimer();
    }
    else
    if (timer.handle && !makeActive)
    {
        disableTimer();
    }
}
//..............................................................................

addProperties(util,
{
    oneSecond,
    oneMinute,
    oneHour,
    oneDay,
    oneYear,
    startTime,
    meshNow,
    meshNowMs,
    meshNowSeconds,
    makeDate,
    getHighResTime,
    meshNowHighRes,
    isNewer,
    isOlder,
    addSeconds,
    addMinutes,
    addHours,
    addDays,
    utc,
    utcAsString,
    nowAsString,
    timeAsString,
    datetimeAsString,
    dateAsString,
    nowAsId,
    timeAsFilename,
    nowAsFilename,
    fromNowAsString,
    toNowAsString,
    utcConsoleString,
    utcAsId,
    utcAsMinuteId,
    msAsId,
    getTimestampId,
    ensureTimer
});

