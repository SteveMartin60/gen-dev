// Some code from nlogger library - http://github.com/igo/nlogger
// Basic Multi-level logging that works in node.js and in the browser
// Needs to be there for everything else so tries not to use other utils.

var colorLog = require('./color-console');

//..............................................................................
const {fs, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    meshNow,
    meshNowMs,
    makeDate,
    propertiesAsSortedArray,
    functionAsProperty_ReadOnly,
    addToNameSpace
} = util;
//..............................................................................

//..............................................................................
var logLocal = true;
var loggers  = {};
//..............................................................................

//..............................................................................
function getLoggerList()
{
    return propertiesAsSortedArray(loggers).map(function(item){return item.id});
}
//..............................................................................

//..............................................................................
function padZero(number)
{
    var n = String(number);
    if (number < 10)
        return '0' + n;
    else
        return n;
}
//..............................................................................

//..............................................................................
function pad2Zeros(number)
{
    var n = String(number);
         if (number <  10) return '00' + n;
    else if (number < 100) return  '0' + n;
    else                   return        n;
}
//..............................................................................

//..............................................................................
function getDate(now)
{
    var s =       now.getFullYear    ()      + '-' +
        padZero  (now.getMonth       () + 1) + '-' +
        padZero  (now.getDate        ()    ) + ' ' +
        padZero  (now.getHours       ()    ) + ':' +
        padZero  (now.getMinutes     ()    ) + ':' +
        padZero  (now.getSeconds     ()    ) + '.' +
        pad2Zeros(now.getMilliseconds()    );

    return '[' + s + ']';
}
//..............................................................................

//..............................................................................
var transports = {};
//..............................................................................
var methods =
{
    'trace': { 'color': 'black', 'priority': 1},
    'debug': { 'color': 'blue' , 'priority': 2},
    'info' : { 'color': 'green', 'priority': 3},
    'warn' : { 'color': 'pink' , 'priority': 4},
    'error': { 'color': 'red'  , 'priority': 5}
};
//..............................................................................

//..............................................................................
function makeLogPacket(id, logParams, time, delta, level)
{
    var packet =
    {
        time      : time,
        delta     : delta,
        id        : id,
        level     : level,
        arguments : logParams
    };
    //console.log('makeLogPacket:',packet);
    return packet;
}
//..............................................................................

//..............................................................................
function consoleLogPacket(packet)
{
    try
    {
        var time     = makeDate(packet.time);
        var delta    = packet.delta;
        var level    = packet.level;
        var levelStr = level.toUpperCase();
        if (levelStr.length == 4)
            levelStr += ' ';

        var idString   = '# '+ getDate(time) + ' [' + delta + '] [' + levelStr + '] [' + packet.id + '] ';
        colorLog[methods[level].color](idString);
        colorLog[level].apply(colorLog, packet.arguments);
    }
    catch (e)
    {
        console.log('ERROR:consoleLogPacket:',e, '\nPacket:',packet);
    }
}
//..............................................................................

//..............................................................................
function registerTransport(transportInfo)
{
    console.log('RegisterTransport:',transportInfo);
    transports[transportInfo.id] = transportInfo;
}
//..............................................................................

//..............................................................................
function makeLogger(loggerId)
{
    //..........................................................................
    var logLevel;
    var priority;
    var lastNow = meshNowMs();
    var options = {deltaEnable:false, deltaBase:meshNowMs()};
    //..........................................................................
    function setLevel(newLevel, showInfo)
    {
        if (showInfo)
            console.log('SettingLogLevel:',loggerId,newLevel);
        if (methods[newLevel])
        {
            logLevel = newLevel;
            priority = methods[logLevel].priority;
        }
        else
        {
            console.error('ERROR: Invalid Logger Level for', loggerId, ':', newLevel)
        }
    }
    //..........................................................................
    function resetDelta()
    {
        //logDelta = meshNowMs();
    }
    //..........................................................................
    function getDelta()
    {
        var now = meshNowMs();
        var delta = now - lastNow;
        lastNow = now;
        return padZero(delta) +'ms';
    }
    //..........................................................................
    function makeLoggerFunction(level)
    {
        return function(msg)
        {
            if (methods[level].priority >= priority)
            {
                var logParams = Array.prototype.slice.call(arguments, 0);
                var now       = meshNow();
                var delta     = getDelta();
                var logPacket = makeLogPacket(loggerId, logParams, now, delta, level);
                if (logLocal)
                {
                    consoleLogPacket(logPacket);
                }

                if (transports.ipc)
                {
                    transports.ipc.send(logPacket);
                }
            }
        }
    }
    ////////////////////////////////////////////////////////////////////////////

    //TODO NM: Experimental way to get Object type names for public scope objects
    function Log(){}
    const publicScope = new Log();

    addProperties(publicScope,
    {
        getDelta,
        resetDelta,
        setLevel
    });
    //console.log('##################  :',publicScope);

    functionAsProperty_ReadOnly(publicScope, function(){return loggerId;} , 'id' );

    for (var level in methods)
    {
        publicScope[level] = makeLoggerFunction(level);
    }
    setLevel('trace');

    loggers[loggerId] = publicScope;
    return publicScope;
}
//..............................................................................

//..............................................................................
function getLogger(id)
{
    if (loggers[i])
    {
        return loggers[id];
    }
    else
    {
        console.error('ERROR: Invalid Logger ID:', id);
        return null;
    }
}
//..............................................................................

//..............................................................................
function setLoggerLevel(id)
{
    var log    = loggers[id];
    var result = null;
    if (log)
    {
        result =
        {
            trace : function(){log.setLevel('trace', true);},
            debug : function(){log.setLevel('debug', true);},
            info  : function(){log.setLevel('info' , true);},
            warn  : function(){log.setLevel('warn' , true);},
            error : function(){log.setLevel('error', true);}
        };
    }
    else
    {
        console.error('ERROR: Invalid Logger ID:', id);
        result =
        {
            trace : function(){},
            debug : function(){},
            info  : function(){},
            warn  : function(){},
            error : function(){}
        };
    }
    return result;
}
//..............................................................................

//..............................................................................
function setChromium()
{
    colorLog.useChromiumConsole = true;
}
//..............................................................................

//..............................................................................
var loggerSystem =  makeLogger;
//..............................................................................

//..............................................................................
loggerSystem.get               = getLogger;
loggerSystem.set               = setLoggerLevel;
loggerSystem.list              = getLoggerList;
loggerSystem.registerTransport = registerTransport;
loggerSystem.showInConsole     = consoleLogPacket;
loggerSystem.setChromium       = setChromium;
//..............................................................................

addToNameSpace(loggerSystem, 'logger');

var testObject =
{
    aString:'aString',
    aBoolean : true,
    aNumber  : 12345,
    aFunction : function(a,b,c){return a+b+c}
};
//..........................................................................
//var testLogger = cxq.logger('Test-Logger');
//testLogger.trace('trace: This is a logger test:',testObject);
//testLogger.debug('debug: This is a logger test:',testObject);
//testLogger.info ('info : This is a logger test:',testObject);
//testLogger.warn ('warn : This is a logger test:',testObject);
//testLogger.error('error: This is a logger test:',testObject);
