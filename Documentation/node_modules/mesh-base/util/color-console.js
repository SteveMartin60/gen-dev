//..............................................................................
var deepClone                         = cxq.util.deepClone                     ;
var mergeObjectDeep                   = cxq.util.mergeObjectDeep               ;
var isString                          = cxq.util.isString                      ;
var isNumeric                         = cxq.util.isNumeric                     ;
//..............................................................................

//..............................................................................
var colorStyles =
{
    reset       : {vt100:  0, color: null,             background:null,          bold: false, underscore: false, blink: false, revert: false, concealed: false},
    bold        : {vt100:  1,                                                    bold:  true                                                                  },
    underscore  : {vt100:  4,                                                                 underscore:  true                                               },
    blink       : {vt100:  5,                                                                                    blink:  true                                 },
    revert      : {vt100:  7,                                                                                                  revert:  true                  },
    concealed   : {vt100:  8,                                                                                                                 concealed:  true},

    black       : {vt100: 30, color: [  0,   0,   0]                                                                                                          },
    red         : {vt100: 31, color: [254,   0,   0]                                                                                                          },
    green       : {vt100: 32, color: [  0, 254,   0]                                                                                                          },
    yellow      : {vt100: 33, color: [254, 254,   0]                                                                                                          },
    blue        : {vt100: 34, color: [  0,   0, 254]                                                                                                          },
    pink        : {vt100: 35, color: [254,   0, 254]                                                                                                          },
    cyan        : {vt100: 36, color: [  0, 254, 254]                                                                                                          },
    white       : {vt100: 37, color: [254, 254, 254]                                                                                                          },

    blackBg     : {vt100: 40,                         background: [  0,   0,   0]                                                                             },
    redBg       : {vt100: 41,                         background: [128,   0,   0]                                                                             },
    greenBg     : {vt100: 42,                         background: [  0, 128,   0]                                                                             },
    yellowBg    : {vt100: 43,                         background: [128, 128,   0]                                                                             },
    blueBg      : {vt100: 44,                         background: [  0,   0, 128]                                                                             },
    pinkBg      : {vt100: 45,                         background: [128,   0, 128]                                                                             },
    cyanBg      : {vt100: 46,                         background: [  0, 128, 128]                                                                             },
    whiteBg     : {vt100: 47,                         background: [128, 128, 128]                                                                             }
};
//..............................................................................

//..............................................................................
var outputMethod     = ["log", "error", "warn", "debug", "info", "trace"];
var colorLog = {useChromiumConsole:false};
//..............................................................................

//..............................................................................
colorLog.defaultState = colorStyles.reset;
colorLog.state        = deepClone(colorLog.defaultState);
colorLog.state.vtArgs = [];
//..............................................................................

//..............................................................................
colorLog.cache = function ()
{
    if (!colorLog.cached) colorLog.cached = [];
    var state = deepClone(colorLog.state);
    for (var i = 0; i < arguments.length; i++)
    {
        colorLog.cached.push({ arg: arguments[i], state: state});
    }
};
//..............................................................................

//..............................................................................
function makeStateFunction(name)
{
    colorLog[name] = function ()
    {
        if (arguments.length)
        {
            colorLog[name]();
            colorLog.cache.apply(colorLog, arguments);
            colorLog.reset();
            return colorLog;
        }
        else
        {

            if (name == "reset")
            {
                colorLog.state = deepClone(colorLog.defaultState);
                colorLog.state.vtArgs = [];
            }
            else
            {
                mergeObjectDeep(true, colorLog.state, colorStyles[name]);
                colorLog.state.vtArgs.push(colorStyles[name].vt100);
            }
        }
        return colorLog;
    };
}
//..............................................................................

//..............................................................................
function makeLogFunction(methodName)
{
    var method;
    if (console[methodName] && methodName != "trace")
    {
        method = console[methodName];
    }
    else
    {
        method = console.log;
    }
    colorLog[methodName] = function ()
    {
        colorLog.cache.apply(colorLog, arguments);
        var args = [];
        var index;
        var arg;
        if (isNodeJs && !colorLog.useChromiumConsole)
        {
            method = console.log;
            for (index in colorLog.cached)
            {
                arg = colorLog.cached[index];
                var escapeChar = '\x1B[' + arg.state.vtArgs.join(";") + 'm';
                var unescapeChar = '\x1B[m';
                if (isNumeric(arg.arg))
                {
                    arg.arg = "" + arg.arg;
                }
                if (isString(arg.arg))
                {
                    arg.arg = escapeChar + arg.arg + unescapeChar;
                }
                else
                if (isString(args[index - 1]))
                {
                    args[index - 1] += escapeChar;
                }
                else
                {
                    args.push(escapeChar);
                }
                args.push(arg.arg);
            }
        }
        else
        {
            args[0] = "";
            for (index in colorLog.cached)
            {
                arg = colorLog.cached[index];
                var style = "";
                if (arg.state.color)
                {
                    if (!arg.state.bold)
                    {
                        arg.state.color[0] /= 2;
                        arg.state.color[1] /= 2;
                        arg.state.color[2] /= 2;
                    }
                    style += "color: rgb(" + arg.state.color.join() + ");";
                }
                if (arg.state.background)
                {
                    style += "background: rgb(" + arg.state.background.join() + ");";
                }
                if (arg.state.underscore)
                {
                    style += "text-decoration: underline;";
                }
                if (isString(arg.arg))
                {
                    args[0] += "%c%s";
                    args.push(style, arg.arg);
                }
                else
                if (isNumeric(arg.arg))
                {
                    args[0] += "%c%f";
                    args.push(style, arg.arg);
                }
                else
                {
                    args[0] += "%c%o";
                    args.push(style, arg.arg);
                }
                args[0] += "%c ";
                args.push("");
            }
            args[0] = args[0].trim();
        }
        try
        {
            method.apply(console, args);
        }
        catch (e)
        {
            console.error('ERROR: Exception in console');
        }
        colorLog.reset();
        colorLog.cached = [];
    };
}
//..............................................................................

//..............................................................................
for (var name in colorStyles)
{
    makeStateFunction(name);
}

for (var methodId in outputMethod)
{
    var methodName = outputMethod[methodId];
    makeLogFunction(methodName);
}
//..............................................................................

module.exports = colorLog;
