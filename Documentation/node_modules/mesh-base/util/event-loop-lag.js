//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    after,
    meshNowMs,
    round1,
} = util;
//..............................................................................

//..............................................................................
var averageLag  = 0;
var sampleSum   = 0;
var samples     = [];
var cInterval   = 1000; // Every 1000ms
var cDelay      = 500;  // Check a delay of 500ms
var cMaxSamples = 10;   // Use the average lag over 10 samples
var startTime   = meshNowMs();
//..............................................................................

//..............................................................................
function checkLag()
{
    function addSample(newSample)
    {
        //Add new values at end and remove vales from beginning;
        //But only remove if we have reach the limit
        if (samples.length >= cMaxSamples)
        {
            sampleSum -= samples[0];
            samples.shift();
        }
        sampleSum += newSample;
        samples.push(newSample);
        //console.log(samples.length, samples);

        averageLag = round1(sampleSum/samples.length);
    }
    //..........................................................................
    var before = meshNowMs();
    //..........................................................................
    function timeoutHandler()
    {
        var endTime   = meshNowMs();
        var fromStart = endTime-startTime;
        var elapsed   = endTime - before;
        var error     = elapsed - cDelay;
        //console.log('fromStart:',fromStart, elapsed);
        if (error < 0)
        {
            //Means that we ran this before we were supposed to!!
            //if (error < -10)
            //    console.log('negativeLag!!!!',error, elapsed);
            error = 0;
        }
        addSample(error);
        after(cInterval-elapsed).do(checkLag);
    }
    ////////////////////////////////////////////////////////////////////////////
    after(cDelay).do(timeoutHandler);
}
//..............................................................................

//..............................................................................
function getEventLoopLag()
{
    return averageLag;
}
//..............................................................................

var tracking = false;
//..............................................................................
function trackEventLoopLag()
{
    if (!tracking)
    {
        tracking = true;
        after(1000).do(checkLag); //Start after 1 second
    }
}
//..............................................................................

addProperties(util,
{
    trackEventLoopLag,
    getEventLoopLag
});


