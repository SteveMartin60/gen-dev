const hashJs = require('hash.js');

//..............................................................................
const {logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    getCanonicalJson,
} = util;
//..............................................................................

//..............................................................................
const log = logger('secure-hash-browser');
log.setLevel('info');
//..............................................................................

//..............................................................................
// Return as standard Javascript array of bytes
//..............................................................................
function stringToSha256(s)
{
    const data = getCanonicalJson(s);

    return hashJs.sha256().update(data).digest('');
}
//..............................................................................

//..............................................................................
// Return as hex string
//..............................................................................
function stringToSha256Hex(s)
{
    return hashJs.sha256().update(s).digest('hex');
}
//..............................................................................

//..............................................................................
// Return as standard Javascript array of bytes
//..............................................................................
function jsonToSha256(obj)
{
    const data = getCanonicalJson(obj);

    return hashJs.sha256().update(data).digest('');
}
//..............................................................................

//..............................................................................
// Return as hex string
//..............................................................................
function jsonToSha256Hex(obj)
{
    const data   = getCanonicalJson(obj);
    return hashJs.sha256().update(data).digest('hex');
}
//..............................................................................

//..............................................................................
function fileToSha256Hex(file, callback)
{
    if (!callback) return;

    const sha256Hex = hashJs.sha256();
    //..........................................................................
    function onChunk(chunk)
    {
        sha256Hex.update(chunk);
    }
    //..........................................................................
    function onError(err)
    {
        callback(err);
    }
    //..........................................................................
    function onDone()
    {
        callback(null, sha256Hex.digest('hex'));
    }
    ////////////////////////////////////////////////////////////////////////////
    parseFile(file, onChunk, onDone, onError);
}
//..............................................................................

//..............................................................................
function parseFile(file, onChunk, onDone, onError) 
{
    const fileSize   = file.size;
    const chunkSize  = 64 * 1024; // bytes    

    var offset = 0;
    //..........................................................................
    function handleLoadChunk(evt) 
    {
        if (evt.target.error == null) 
        {
            offset += evt.target.result.length;
            if (onChunk) onChunk(evt.target.result);
        }
        else 
        {
            if (onError) onError(evt.target.error);
            return;
        }

        if (offset >= fileSize) 
        {
            console.log("Done reading file");
            if (onDone) onDone();
            return;
        }

        readChunk(offset, chunkSize, file);
    }
    //..........................................................................
    function readChunk(chunkOffset, length, chunkFile) 
    {
        const reader = new FileReader();
        const blob   = chunkFile.slice(chunkOffset, length + chunkOffset);
        
        reader.onload = handleLoadChunk;
        reader.readAsBinaryString(blob);
    }
    //..........................................................................
    readChunk(offset, chunkSize, file);
}
//..............................................................................

const exported =
{
    stringToSha256,
    stringToSha256Hex,
    jsonToSha256,
    jsonToSha256Hex,
    fileToSha256Hex,
};

addProperties(util,exported);
module.exports = exported;