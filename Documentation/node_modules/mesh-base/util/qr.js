const qr = require('qr-image');

//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const {addProperties, processList, padLeft} = util;
//..............................................................................

function coord2offset(x, y, size)
{
    return (size + 1) * y + x + 1;
}

/**
 * bitmap.size — width (and height) of resulting image in pixels
 * bitmap.data — Buffer with image data. It's a linear representation
 * of image in format:
 *    <00> <xx> <xx> ..        <xx>
 *    <00> <xx> <xx> ..        <xx>
 *    ..
 *    <00> <xx> <xx> ..        <xx>
 *    ^    | size number of bytes |
 *    \ do not modify. Must be 00
 *
 * Each <xx> is a pixel of image. It's value 0 — black, 255 — white,
   everything between are shades of gray.
 */
//..............................................................................
function gradientImage(bitmap)
{
    const size = bitmap.size;
    const data = bitmap.data;

    for (let x = 0; x < size; x++)
    {
        for (let y = 0; y < x; y++)
        {
            const offset = coord2offset(x, y, size);
            // If it's white change it's color
            if (data[offset])
            {
                data[offset] = 255 - Math.abs(x - y);
            }
        }
    }
}
//..............................................................................
function invertImage(bitmap)
{
    const size = bitmap.size;
    const data = bitmap.data;

    for (let x = 0; x < size; x++)
    {
        for (let y = 0; y < size; y++)
        {
            const offset = coord2offset(x, y, size);
            // If it's white change it's color
            if (data[offset])
                data[offset] = 0;
            else
                data[offset] = 255;
        }
    }
}
//..............................................................................

//..............................................................................
function getQrPng(s, options)
{
    const {invert} = options || {};
    // qr.image('Customize PNG', {type: 'png', customize});
    var customize = null;
    if (invert)
        customize = invertImage;//gradientImage;
    return qr.imageSync(s, {type:'png', margin:0, ec_level:'L', customize});
}
//..............................................................................

//..............................................................................
function getQrSvg(s)
{
    return qr.imageSync(s, {type:'svg', margin:0, ec_level:'L'});
}
//..............................................................................

//..............................................................................
function getQrPngUri(s, options)
{
    const buffer = getQrPng(s, options);
    const base64 = buffer.toString('base64');

    return 'data:image/png;base64,' + base64;
}
//..............................................................................

//..............................................................................
function getQrMatrix(s)
{
    console.log('getQrMatrix:',s);
    const matrix =  qr.matrix(s);
    processList(matrix, function(row, index)
    {
        console.log(padLeft(index,2), '  ', row.join(' '));
    });
    return matrix
}
//..............................................................................

//..............................................................................
function getIdentityQR(identity)
{
    return getQrPngUri('https://id.mesheven.com.cn/id/' + identity);
}
//..............................................................................

//..............................................................................
function getInstanceQR(instanceId)
{
    return getQrPngUri('https://cxq.mesheven.com.cn/m#instances/' + instanceId);
}
//..............................................................................

addProperties(util,
{
    getQrPng,
    getQrPngUri,
    getQrSvg,
    getQrMatrix,
    getInstanceQR,
    getIdentityQR,
});
