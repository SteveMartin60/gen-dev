//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const 
{
    oneSecond,
    meshNowSeconds,
    processList,   
    addProperties, 
    wait
} = util;
//..............................................................................

//..............................................................................
function makeBasicCache(options)
{
    //..........................................................................
    var cacheTable      = {};
    var settings        = {};
    var default_options = {lifetime : 60 * oneSecond};
    var expireTimer     = null;
    //..........................................................................
    addProperties(settings, default_options);
    addProperties(settings, options);
    //..........................................................................
    function getItem(key)
    {
        var cache = cacheTable[key];
        if (cache)
        {
            cache.lastHit = meshNowSeconds();
            cache.hitCount += 1;
            return cache.payload;
        }
        else
        {
            return null;
        }
    }
    //..........................................................................
    function addItem(key, value)
    {
        if (key)
        {
            var now = meshNowSeconds();
            cacheTable[key] =
            {
                payload  : value,
                createAt : now,
                lastHit  : now,
                hitCount : 0
            };
            return this;
        }
    }
    //..........................................................................
    function deleteItem(key)
    {
        var cache = cacheTable[key];
        delete cacheTable[key];
        return cache;
    }
    //..........................................................................
    function checkExpire()
    {
        //Although lastHit & hitCount is calculated, now we just simply
        // delete a cache after *lifetime* seconds from creation
        //To ensure the cache will live **no more than** the lifetime, we should
        // check every *half of the lifetime*, and delete caches that live over
        // *half of the lifetime*
        function checkExpireItr(value, key)
        {

            if ( meshNowSeconds() - value.createAt > (settings.lifetime / 2))
            {
                deleteItem(key);
                //console.log("delete cache: ", key, ", lifetime: ", meshNowSeconds() - value.createAt);
            }
        }
        ////////////////////////////////////////////////////////////////////////
        processList(cacheTable,checkExpireItr);
        expireTimer = wait(settings.lifetime / 2).then(checkExpire);
    }
    ////////////////////////////////////////////////////////////////////////////
    var publicScope = 
    {
        getItem,
        addItem,
        deleteItem
    };    
    checkExpire();
    
    return publicScope;
}
//..............................................................................

addProperties(cxq, {makeBasicCache}); 
