const makeRunningAverager = require('./running-average');
const alphaNumber         = require('alphanum-increment');
const polygonsIntersect   = require('polygons-intersect');
//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    padNumber,
    isDefined,
    processList,
} = util;
//..............................................................................

//..............................................................................
function rootMeanSquare(values)
{
    var sumOfSquares = values.reduce(function(s,x) {return (s + x*x)}, 0);
    return Math.sqrt(sumOfSquares / values.length);
}
//..............................................................................

//..............................................................................
function arrayMean(data)
{
    var sum   = 0;
    var count = data.length;
    for (var i = 0; i < count; i++)
        sum += data[i];

    return sum/count;
}
//..............................................................................


//..............................................................................
const alphabet_base32         = '23456789abcdefghjklmnpqrstuvwxyz';
const alphabet_base32_length  = alphabet_base32.length;
const alphabet_base32_reverse = {};
//..............................................................................
function addBase32Reverse()
{
    for (var i=0;i<alphabet_base32_length;i++)
    {
        const c = alphabet_base32.charAt(i);
        alphabet_base32_reverse[c] = i;
    }
}
addBase32Reverse();
//..............................................................................

//..............................................................................
function getRandomInt(max)
{
    return Math.floor(Math.random() * Math.floor(max));
}
//..............................................................................

//..............................................................................
// 32^8 = 1,099,511,627,776 (5-bits x 8 => 2^40) 1 x Trillion (About) Default
// 32^6 = 1,073,741,824     (5-bits x 6 => 2^30) 1 x Billion
// 32^4 = 1,048,576         (5-bits x 4 => 2^20) 1 x Million
//..............................................................................
function randomBase32(len)
{
    if (!len) len = 8;
    var result = '';
    //..........................................................................
    function getChar()
    {
        const n = getRandomInt(alphabet_base32_length);
        return alphabet_base32.charAt(n);
    }
    ////////////////////////////////////////////////////////////////////////////

    for (var i=0;i<len;i++)
        result += getChar();

    return result;
}
//..............................................................................

//..............................................................................
function randomBase32Id()
{
    const s = randomBase32(12).toUpperCase();
    return s.slice(0,4) + '-' + s.slice(4,8) + '-' + s.slice(8);
}
//..............................................................................

//..............................................................................
function toRadix(n, radix, padLength)
{
    var result = '';
    var Q = Math.floor(Math.abs(n));
    var R;
    while (true)
    {
        R      = Q % radix;
        result = alphabet_base32.charAt(R) + result;
        Q      = (Q-R) / radix;
        if (Q==0) break;
    }
    if (n < 0) result = '-' + result;
    if (padLength)
        result = padNumber(result,padLength, alphabet_base32.charAt(0));
    return result;
}
//..............................................................................

//..............................................................................
function toBase32(n, padLength)
{
    return toRadix(n,32,padLength);
}
//..............................................................................

//..............................................................................
function fromBase32(s)
{
    var mult = 1;
    var sum  = 0;
    for (var i=s.length-1; i>=0; i--)
    {
        const c = s.charAt(i);
        const n = alphabet_base32_reverse[c];
        if (!isDefined(n))
        {
            console.error('ERROR fromBase32: Invalid Character[',c,'] in:',s);
            process.exit();
        }
        sum += (n*mult);
        mult = mult * 32;
    }
    return sum;
}
//..............................................................................

//..............................................................................
function alphaInc(s, options)
{
    return alphaNumber.increment(s, options);
}
//..............................................................................

//..............................................................................
function alphaDec(s, options)
{
    return alphaNumber.decrement(s, options);
}
//..............................................................................

//..............................................................................
function polygonListBounding(polygonList)
{
    polygonList = polygonList || [];
    if (polygonList.length < 0)
        return null;

    const firstPolygon = polygonList[0] || [];
    if (firstPolygon.length < 0)
        return null;

    const firstPoint = firstPolygon[0];
    const result =
    {
        x1:firstPoint.x,
        y1:firstPoint.y,
        x2:firstPoint.x,
        y2:firstPoint.y
    };

    processList(polygonList, function(polygon)
    {
        processList(polygon, function({x,y})
        {
            if (x < result.x1) result.x1 = x;
            if (x > result.x2) result.x2 = x;
            if (y < result.y1) result.y1 = y;
            if (y > result.y2) result.y2 = y;
        });
    });

    result.w = result.x2 - result.x1;
    result.h = result.y2 - result.y1;
    return result;
}
//..............................................................................

//..............................................................................
function polygonBounding(polygon)
{
    return polygonListBounding([polygon]);
}
//..............................................................................

addProperties(util,
{
    rootMeanSquare,
    arrayMean,
    getRandomInt,
    randomBase32,
    randomBase32Id,
    toBase32,
    fromBase32,
    makeRunningAverager,
    alphaInc,
    alphaDec,
    polygonsIntersect,
    polygonBounding,
    polygonListBounding,
});
