//..............................................................................
// Simple money type that includes an amount and  currency.
// Currencies must match to currencies in mesh-base currencies.
// Amounts are kept internally as strings then converted to number as required.
// Formatted amounts are based on the decimals specified in the currency object.
//
//..............................................................................

var currencies = require('./currencies');

//..............................................................................
const {numeral, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    isFunction,
    isDefined,
    isString,
    isNumeric,
    isObject,
    getCurrency,
    round1,
    roundN,
    addProperties
} = util;
//..............................................................................

//..............................................................................
function assertSameCurrency(left, right)
{
    if (left.currency !== right.currency)
        throw new Error('Different currencies');
}
//..............................................................................

//..............................................................................
function isMoney()
{
    return (this instanceof Money)
}
//..............................................................................

//..............................................................................
function assertType(other)
{
    if (!(other instanceof Money))
        throw new TypeError('Instance of Money required');
}
//..............................................................................

//..............................................................................
function assertOperand(operand)
{
    if (!isNumeric(operand))
        throw new TypeError('Operand must be a number');
}
//..............................................................................

//..............................................................................
// source can be any of:
//   a Javascript number                            (currencyId arg is required)
//   a number as a string                           (currencyId arg is required)
//   a Number instance                              (currencyId arg is ignored)
//   a full string like "money(USD,123.0123456789)" (currencyId arg is ignored)
//   an object, with amount and currency props      (currencyId arg is ignored)
//..............................................................................
function Money(source, currencyId)
{
    //console.log('NewMoney:Raw:', source, currencyId);
    var amount = 0;

    if (isObject(source)) //Could be another money instance or pure object
    {
        if (isDefined(source.currency) && isDefined(source.amount))
        {
            currencyId = source.currency;
            amount     = source.amount;
        }
        else
        {
            throw new TypeError('Invalid source object for Number: requires currency and amount');
        }
    }
    else
    if (isString(source) && (source.slice(0,6) == 'money(') && !isDefined(currencyId))
    {
        source = source.slice(6,-1);
        var parts = source.split(',');
        if (parts.length !== 2)
            throw new TypeError('Invalid number format');
        currencyId = parts[0];
        amount     = parts[1];
    }
    else
    {
        amount = source;
    }

    var currency = currencies[currencyId];
    if (!isDefined(currency))
        throw new TypeError('Invalid currency');

    this.amount = roundN(amount,10);
    // Clean to 10 digits so conversions don't cause loss of precision

    //console.log('NewMoney:' + currencyId+':' + this.amount);
    this.currency = currencyId;
    this.value    = roundN(amount,currency.decimals)
}
//..............................................................................

//..............................................................................
function eq(other)
{
    assertType(other);
    return this.amount   === other.amount &&
           this.currency === other.currency;
}
//..............................................................................

//..............................................................................
function add(other)
{
    assertType(other);
    assertSameCurrency(this, other);

    return new Money(this.amount + other.amount, this.currency);
}
//..............................................................................

//..............................................................................
function sub(other)
{
    assertType(other);
    assertSameCurrency(this, other);

    return new Money(this.amount - other.amount, this.currency);
}
//..............................................................................

//..............................................................................
function mul(multiplier, fn)
{
    if (!isFunction(fn))
        fn = round1;

    assertOperand(multiplier);
    var amount = fn(this.amount * multiplier);

    return new Money(amount, this.currency);
}
//..............................................................................

//..............................................................................
function div(divisor, fn)
{
    if (!isFunction(fn))
        fn = round1;

    assertOperand(divisor);
    var amount = fn(this.amount / divisor);

    return new Money(amount, this.currency);
}
//..............................................................................

//..............................................................................
function compare(other)
{
    assertType(other);
    assertSameCurrency(this, other);

    return this.amount.cmp(other.amount);
}
//..............................................................................

//..............................................................................
function gt(other)
{
    return 1 === this.compare(other);
}
//..............................................................................

//..............................................................................
function gte(other)
{
    return 0 <= this.compare(other);
}
//..............................................................................

//..............................................................................
function lt(other)
{
    return -1 === this.compare(other);
}
//..............................................................................

//..............................................................................
function lte(other)
{
    return 0 >= this.compare(other);
}
//..............................................................................

//..............................................................................
function isZero()
{
    return this.amount.eq(0);
}
//..............................................................................

//..............................................................................
function isPositive()
{
    return this.amount.gt(0);
}
//..............................................................................

//..............................................................................
function isNegative()
{
    return this.amount.lt(0);
}
//..............................................................................

//..............................................................................
function toString()
{
    return '' + this.value;
}
//..............................................................................

//..............................................................................
function toJSON()
{
    return('money(' + this.currency + ',' + this.amount + ')');
 // return this.currency + '|' + this.amount;
 // return {c:this.currency, v:this.amount};
 // return {amount: this.amount, currency: this.currency};
}
//..............................................................................

//..............................................................................
function toRaw()
{
    return {
        amount  : this.amount,
        currency: this.currency,
        value   : this.value
    };
}
//..............................................................................

//..............................................................................
function getAs(otherCurrencyId)
{
    var otherValue = this.amount;

    if (otherCurrencyId == this.currency || !isDefined(otherCurrencyId))
        return Number(otherValue);

    //Central Currency is USD
    // So first need to covert to that (which is currency's own rate)
    //    then  convert to other using other currency's rate

    var selfCurrency    = cxq.currencies[this.currency];
    var otherCurrency   = cxq.currencies[otherCurrencyId];
    if (selfCurrency && otherCurrency)
    {
        var thisRate  = selfCurrency.rate;
        var otherRate = otherCurrency.rate;
        if (isDefined(thisRate) && isDefined(otherRate))
        {
            otherValue = roundN(otherValue / thisRate * otherRate, 10);
            return Number(otherValue);
        }
        else
        {
            console.error('CurrencyWithNoRate:',otherCurrencyId);
            return null;
        }
    }
    else
    {
        console.error('BadCurrency:',otherCurrencyId);
        return null;
    }
}
//..............................................................................


//..............................................................................
function as(otherCurrencyId)
{
    return new Money(this.getAs(otherCurrencyId), otherCurrencyId);
}
//..............................................................................

//..............................................................................
function formatAs(otherCurrencyId, {includeSymbol=true})
{
    otherCurrencyId = otherCurrencyId || this.currency;
    var otherValue = this.getAs(otherCurrencyId);
    if (otherValue === null)
        return otherValue;

    var currency = cxq.currencies[otherCurrencyId];
    if (currency)
    {
        var formatString = '0,0.' + '000000000000'.slice(0,currency.decimals);

        //console.log('formatAs:',this.amount, otherCurrencyId, formatString, currency);

        var s = numeral(this.amount).format(formatString);
        if (includeSymbol && currency.symbol)
            s = currency.symbol + s;

        return s;
    }
    else
    {
        console.error('ERROR: Money formatAs-BadCurrency:',otherCurrencyId);
        return null;
    }
}
//..............................................................................

//..............................................................................
Money.prototype.eq                  = eq;
Money.prototype.add                 = add;
Money.prototype.sub                 = sub;
Money.prototype.mul                 = mul;
Money.prototype.div                 = div;
Money.prototype.compare             = compare;
Money.prototype.gt                  = gt;
Money.prototype.gte                 = gte;
Money.prototype.lt                  = lt;
Money.prototype.lte                 = lte;
Money.prototype.isZero              = isZero;
Money.prototype.isPositive          = isPositive;
Money.prototype.isNegative          = isNegative;
Money.prototype.toString            = toString;
Money.prototype.toJSON              = toJSON;
Money.prototype.getAs               = getAs;
Money.prototype.formatAs            = formatAs;
Money.prototype.as                  = as;
Money.prototype.toRaw               = toRaw;
Money.prototype.isMoney             = isMoney;
//..............................................................................

//..............................................................................
function formatMoney(amount, currency, {includeSymbol=true}={})
{
    //console.log('formatMoney:',amount, currency, options || '(No Options)');
    currency = currency || getCurrency();
    if (isNumeric(amount))
    {
        const number = new Money(amount, currency);
        return number.formatAs(currency, {includeSymbol});
    }
    return amount;
}
//..............................................................................

addProperties(util,
{
    formatMoney
});