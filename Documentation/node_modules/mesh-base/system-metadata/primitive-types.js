const validators  = require('./validators' );
const comparators = require('./comparators');

//..............................................................................
const {Int64, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    processList,
    addProperties,
    isFunction,
    isDefined,
    padLeft,
    padRight,
} = util;
//..............................................................................

//..............................................................................
const types =
{
    string     : {sql:'varchar'         ,firm_type:'string' , base_type:'string'  , caption_en : 'Text'                  , description_en : 'UTF-8 Text'                                       , caption_zh : '文本'             , description_zh : 'UTF-8编码文本'},
    memo       : {sql:'varchar'         ,firm_type:'string' , base_type:'string'  , caption_en : 'Memo'                  , description_en : 'Large UTF-8 Text Block'                           , caption_zh : '备忘录'           , description_zh : '大型UTF-8编码文本块'},
    json       : {sql:'json'            ,firm_type:'string' , base_type:'string'  , caption_en : 'JSON Data'             , description_en : 'JSON Data Record'                                 , caption_zh : 'JSON数据'         , description_zh : 'JSON数据记录'},
    guid       : {sql:'varchar'         ,firm_type:'string' , base_type:'string'  , caption_en : 'GUID'                  , description_en : 'Standard UUID'                                    , caption_zh : '全局唯一标识符'    , description_zh : '标准通用唯一标识符'},
    url        : {sql:'varchar'         ,firm_type:'string' , base_type:'string'  , caption_en : 'URL'                   , description_en : 'Hyperlink with CaptionEN and URL'                 , caption_zh : '网址'             , description_zh : '题注和网址的超链接'},
    file       : {sql:'varchar'         ,firm_type:'string' , base_type:'string'  , caption_en : 'File'                  , description_en : 'File Reference'                                   , caption_zh : '文件'             , description_zh : '文件引用'},
    email      : {sql:'varchar'         ,firm_type:'string' , base_type:'string'  , caption_en : 'email'                 , description_en : 'Standard format email address'                    , caption_zh : '电子邮件地址'      , description_zh : '标准电子邮件地址格式'},
    password   : {sql:'varchar'         ,firm_type:'string' , base_type:'string'  , caption_en : 'Password'              , description_en : 'Password'                                         , caption_zh : '密码'             , description_zh : '密码'},
    int8       : {sql:'smallint'        ,firm_type:'int8'   , base_type:'integer' , caption_en : 'Signed 8-bit'          , description_en : 'Signed 8-bit Integer'                             , caption_zh : '8位有符号数'       , description_zh : '8位有符号整数'},
    int16      : {sql:'smallint'        ,firm_type:'int16'  , base_type:'integer' , caption_en : 'Signed 16-bit'         , description_en : 'Signed 16-bit Integer'                            , caption_zh : '16位有符号数'      , description_zh : '16位有符号整数'},
    int32      : {sql:'integer'         ,firm_type:'int32'  , base_type:'integer' , caption_en : 'Signed 32-bit'         , description_en : 'Signed 32-bit Integer'                            , caption_zh : '32位有符号数'      , description_zh : '32位有符号整数'},
    int48      : {sql:'bigint'          ,firm_type:'int48'  , base_type:'integer' , caption_en : 'Signed 48-bit'         , description_en : 'Signed 48-bit Integer'                            , caption_zh : '48位有符号数'      , description_zh : '48位有符号整数'},
    int64      : {sql:'bigint'          ,firm_type:'int64'  , base_type:'integer' , caption_en : 'Signed 64-bit'         , description_en : 'Signed 64-bit Integer'                            , caption_zh : '64位有符号数'      , description_zh : '64位有符号整数'},
    uint8      : {sql:'smallint'        ,firm_type:'uint8'  , base_type:'integer' , caption_en : 'Unsigned 8-bit'        , description_en : 'Unsigned 8-bit Integer'                           , caption_zh : '8位无符号数'       , description_zh : '8位无符号整数'},
    uint16     : {sql:'integer'         ,firm_type:'uint16' , base_type:'integer' , caption_en : 'Unsigned 16-bit'       , description_en : 'Unsigned 16-bit Integer'                          , caption_zh : '16位无符号数'      , description_zh : '16位无符号整数'},
    uint32     : {sql:'bigint'          ,firm_type:'uint32' , base_type:'integer' , caption_en : 'Unsigned 32-bit'       , description_en : 'Unsigned 32-bit Integer'                          , caption_zh : '32位无符号数'      , description_zh : '32位无符号整数'},
    uint48     : {sql:'bigint'          ,firm_type:'uint48' , base_type:'integer' , caption_en : 'Unsigned 48-bit'       , description_en : 'Unsigned 48-bit Integer'                          , caption_zh : '48位无符号数'      , description_zh : '48位无符号整数'},
    uint64     : {sql:'numeric(20)'     ,firm_type:'uint64' , base_type:'integer' , caption_en : 'Unsigned 64-bit'       , description_en : 'Unsigned 64-bit Integer'                          , caption_zh : '64位无符号数'      , description_zh : '64位无符号整数'},
    boolean    : {sql:'boolean'         ,firm_type:'boolean', base_type:'boolean' , caption_en : 'Boolean'               , description_en : 'Boolean'                                          , caption_zh : '布尔值'           , description_zh : '布尔值'},
    color      : {sql:'varchar'         ,firm_type:'uint32' , base_type:'color'   , caption_en : 'Color'                 , description_en : 'Color as CSS String'                              , caption_zh : '颜色'             , description_zh : 'CSS颜色值字符串' },
    money      : {sql:'numeric(20,8)'   ,firm_type:''       , base_type:'money'   , caption_en : 'Money'                 , description_en : 'Fixed 64-Bit + String[3] (for ISO 4217 Currency)' , caption_zh : '货币'             , description_zh : '固定位+3位字符串（ISO4217标准货币）'},
    percent    : {sql:'real'            ,firm_type:'float32', base_type:'float'   , caption_en : 'Percent'               , description_en : 'Percentage'                                       , caption_zh : '百分比'            , description_zh : '百分比'},
    single     : {sql:'real'            ,firm_type:'float32', base_type:'float'   , caption_en : '32-bit Floating-Point' , description_en : '32-bit IEEE 754 floating-point number'            , caption_zh : '32位浮点数'        , description_zh : '32位IEEE754标准浮点数'},
    double     : {sql:'double precision',firm_type:'float64', base_type:'float'   , caption_en : '64-bit Floating-Point' , description_en : '64-bit IEEE 754 floating-point number'            , caption_zh : '64位浮点数'        , description_zh : '64位IEEE754标准浮点数'},
    datetime   : {sql:'bigint'          ,firm_type:'uint48' , base_type:'datetime', caption_en : 'DateTime'              , description_en : 'Date time (ms resolution)'                        , caption_zh : '日期时间'          , description_zh : '日期时间（毫秒级分辨率）' },
    date       : {sql:'bigint'          ,firm_type:'uint48' , base_type:'datetime', caption_en : 'Date'                  , description_en : 'Date'                                             , caption_zh : '日期'             , description_zh : '日期'},
    time       : {sql:'bigint'          ,firm_type:'uint48' , base_type:'datetime', caption_en : 'Time'                  , description_en : 'Time'                                             , caption_zh : '时间'             , description_zh : '时间'},
    hrtime     : {sql:'bigint'          ,firm_type:'uint64' , base_type:'float'   , caption_en : 'Hi-Res Time'           , description_en : 'Time stored as ms with ns resolution'             , caption_zh : '高分辨率时间'      , description_zh : '以毫秒数存储的时间（纳秒级分辨率）'},
};
//..............................................................................

//..............................................................................
addProperties(types.string   , {comparator: comparators.string  , validator:validators.isString             });
addProperties(types.memo     , {comparator: comparators.string  , validator:validators.isString             });
addProperties(types.json     , {comparator: comparators.json    , validator:validators.isJSON               });
addProperties(types.guid     , {comparator: comparators.string  , validator:validators.isString             });
addProperties(types.url      , {comparator: comparators.string  , validator:validators.isUrl                });
addProperties(types.file     , {comparator: comparators.string  , validator:validators.isString             });
addProperties(types.email    , {comparator: comparators.string  , validator:validators.isEmail              });
addProperties(types.password , {comparator: comparators.string  , validator:validators.isPassword           });
addProperties(types.int8     , {comparator: comparators.integer , validator:validators.isInteger            , min:           -0x7f-1 , max:                    0x7f });
addProperties(types.int16    , {comparator: comparators.integer , validator:validators.isInteger            , min:         -0x7fff-1 , max:                  0x7fff });
addProperties(types.int32    , {comparator: comparators.integer , validator:validators.isInteger            , min:     -0x7fffffff-1 , max:              0x7fffffff });
addProperties(types.int48    , {comparator: comparators.integer , validator:validators.isInteger            , min: -0x7fffffffffff-1 , max:          0x7fffffffffff });
addProperties(types.int64    , {comparator: comparators.integer , validator:validators.isLongInt            , min:   Int64.MIN_VALUE , max:         Int64.MAX_VALUE });
addProperties(types.uint8    , {comparator: comparators.integer , validator:validators.isInteger            , min:                 0 , max:                    0xff });
addProperties(types.uint16   , {comparator: comparators.integer , validator:validators.isInteger            , min:                 0 , max:                  0xffff });
addProperties(types.uint32   , {comparator: comparators.integer , validator:validators.isInteger            , min:                 0 , max:              0xffffffff });
addProperties(types.uint48   , {comparator: comparators.integer , validator:validators.isInteger            , min:                 0 , max:          0xffffffffffff });
addProperties(types.uint64   , {comparator: comparators.integer , validator:validators.isUnsignedLongInt    , min:       Int64.UZERO , max: Int64.MAX_UNSIGNED_VALUE});
addProperties(types.boolean  , {comparator: comparators.boolean , validator:validators.isBoolean            });
addProperties(types.color    , {comparator: comparators.color   , validator:validators.isColor              });
addProperties(types.money    , {comparator: comparators.number  , validator:validators.isNumber             });
addProperties(types.percent  , {comparator: comparators.integer , validator:validators.isPercent            });
addProperties(types.single   , {comparator: comparators.float   , validator:validators.isFloat              });
addProperties(types.double   , {comparator: comparators.number  , validator:validators.isNumber             });
addProperties(types.datetime , {comparator: comparators.datetime, validator:validators.isISO8601            });
addProperties(types.date     , {comparator: comparators.datetime, validator:validators.isISO8601            });
addProperties(types.time     , {comparator: comparators.datetime, validator:validators.isISO8601            });
addProperties(types.hrtime   , {comparator: comparators.number  , validator:validators.isNumber             });
//..............................................................................

//..............................................................................
function logTypeInfo()
{
    function logType(id)
    {
        const t = types[id];
        console.log(padRight(id,10), padLeft(t.min.toString(),20), '   ', padLeft(t.max.toString(),20), ' ', padRight(t.caption_en,20));
    }
    ////////////////////////////////////////////////////////////////////////////

    console.log('--------------------------------------------------------------------------');
    console.log('Type                        Min                      Max                  ');
    console.log('--------------------------------------------------------------------------');
    logType('int8'  );
    logType('int16' );
    logType('int32' );
    logType('int48' );
    logType('int64' );
    logType('uint8' );
    logType('uint16');
    logType('uint32');
    logType('uint48');
    logType('uint64');
    console.log('--------------------------------------------------------------------------');
}
//..............................................................................
// logTypeInfo();
//..............................................................................


/*
fallback            : { code: 100, en: "input value failed validation"                       , zh: "输入值未能通过验证"     },
    rgba                : { code: 304, en: "input must be an RGBA value"                         , zh: "值必须是RGBA颜色值"      },
    hsl                 : { code: 305, en: "input must be an HSL value"                          , zh: "值必须是HSL颜色值"       },
    hsv                 : { code: 306, en: "input must be an HSV value"                          , zh: "值必须是HSV颜色值"       },

    // input types
    record              : { code: 401, en: "record failed validation"                            , zh: "数据记录未能通过验证"     },
    field               : { code: 402, en: "data field value failed validation"                  , zh: "数据记录字段未能通过验证" },

    // record specifics
    record_schema       : { code: 501, en: "record was not well-formed"                          , zh: "数据记录架构存在错误"     },
    relationship        : { code: 502, en: "cannot find related record"                          , zh: "无法找到关联记录ID"       },
    record_idt          : { code: 503, en: "record had inconsistent _idt value"                  , zh: "数据记录"                 }

// generic category
presence            : { code: 101, en: "absent value as required"                            , zh: "缺少必须值"             },
listInclusion       : { code: 102, en: "input was not in the given list"                     , zh: "值不在列表中"           },
lessThan            : { code: 103, en: "input must be less than the max value"               , zh: "值超过上限"             },
greaterThan         : { code: 104, en: "input must be greater than the min value"            , zh: "值下于下限"             },
lessThanInclusive   : { code: 105, en: "input must be equal to or less than the max value"   , zh: "值必须小等于最大允许值"  },
greaterThanInclusive: { code: 106, en: "input must be equal to or greater than the min value", zh: "值必须大等于最小允许值"  },

// data types
dataType            : { code: 200, en: "input was incompatible with its data type"           , zh: "数据类型不匹配"          },
*/


//..............................................................................
function validatePrimitiveValue(value, fieldDef)
{
    if (!fieldDef)
    {
        console.error('ERROR: Invalid fieldDef in validatePrimitiveValue value:', value);
        return
    }
    var validationResults = [];
    //..........................................................................
    function runValidator(validator)
    {
        if (!isFunction(validator.fn))
        {
            console.error('Attempt to run missing validator:',validator);
            return false;
        }

        var validatorResult = validator.fn(value);
        var result = {valid:validatorResult};
        if (!result.valid)
        {
            result.errorInfo = validator.info;
            validationResults.push(result);
        }
    }
    ////////////////////////////////////////////////////////////////////////////

 // console.log('validatePrimitiveValue:',value, 'fieldDef:',fieldDef);
    var validator;

    if (fieldDef.required)
    {
        runValidator(validators.isPresent);
    }

    if (!fieldDef.required && !value)
    {
        //If field is not required the dont run the other checks if not defined
    }
    else
    if (fieldDef.primitive_type)
    {

        var primitiveType = types[fieldDef.primitive_type];
     // console.log('  validatePrimitiveType:',primitiveType);
        if (!primitiveType) return false;

        runValidator(primitiveType.validator);
    }

    if (!validationResults.length)
         validationResults = null;

 // console.log('  ValidationResult:', validationResults);

    return validationResults;
}
//..............................................................................

//..............................................................................
function validateDefault()
{
    return true;
}
//..............................................................................

//..............................................................................
processList(types, function(type, typeId)
{
    type.id = typeId;
    var fnName = 'validate'+ typeId.slice(0,1).toUpperCase() + typeId.slice(1);
    if (isFunction(type.validator.fn))
        util[fnName] = type.validator.fn;
    else
        util[fnName] = validateDefault;
});
//..............................................................................

cxq.validatePrimitiveValue = validatePrimitiveValue;
module.exports = types;

