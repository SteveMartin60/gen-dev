//..............................................................................
const {util} = cxq;
const {isNumeric, lockObject, processList} = util;
//..............................................................................

//..............................................................................
const mtDataTypes = lockObject
({
    DATA_TYPE_UNDEFINED : 0x00,
    DATA_TYPE_FLOAT     : 0x01,
    DATA_TYPE_BOOLEAN   : 0x02,
    DATA_TYPE_CHAR      : 0x03,
    DATA_TYPE_INT8      : 0x04,
    DATA_TYPE_INT16     : 0x05,
    DATA_TYPE_INT32     : 0x06,
    DATA_TYPE_INT64     : 0x07,
    DATA_TYPE_UINT8     : 0x08,
    DATA_TYPE_UINT16    : 0x09,
    DATA_TYPE_UINT32    : 0x0A,
    DATA_TYPE_UINT64    : 0x0B,
});
//..............................................................................

//..............................................................................
const mtRegTypes = lockObject
({
    REG_TYPE_UNDEFINED : 0x00,
    REG_TYPE_METRICS   : 0x01,
    REG_TYPE_CONTROL   : 0x02,
    REG_TYPE_DYNAMIC   : 0x03,
});
//..............................................................................

//..............................................................................
let mtCommands =
{
    CMD_IMAGE_SEND_START              : 0xC0,
    CMD_IMAGE_DATA                    : 0xC1,
    CMD_IMAGE_WRITE                   : 0xC2,
    CMD_IMAGE_SEND_END                : 0xC3,
    CMD_IMAGE_EN_UPDATE               : 0xC4,
    
    CMD_GPIO_MODE                     : 0xD0,   // [pinNumber][pinMode:pinmode_t]
    CMD_GPIO_WRITE                    : 0xD1,   // [pinNumber][pinValue]
    CMD_GPIO_READ                     : 0xD2,   // [pinNumber][pinValue]
    
    CMD_PWM                           : 0xD3,   // [pinNumber][duty cycle][[[[frequency]]]]
    
    CMD_ANALOG_WRITE                  : 0xD4,   // [pinNumber][[level]]
    CMD_ANALOG_READ                   : 0xD5,   // [pinNumber][[level]]
    
    CMD_PIN_REQUEST                   : 0xD6,   // [pinNumber][pinMode:pinmode_t][[[[period ms]]]]
    CMD_PIN_STATE                     : 0xD7,   // [pinNumber][pinMode:pinmode_t][pinValue]
    
    CMD_SPI_REQUEST                   : 0xD8,   // [mode][[[[frequency]]]]{DATA}
    CMD_SPI_RESPONSE                  : 0xD9,   // {DATA}
    
    CMD_I2C_WRITE                     : 0xDA,   // [stop]{data}
    CMD_I2C_READ                      : 0xDB,   // {data}
    CMD_I2C_DONE                      : 0xDC,   // no data
    
    CMD_SECURITY_UPDATE_BEGIN         : 0xE2,
    CMD_SECURITY_UPDATE_STREAM        : 0xE3,
    CMD_SECURITY_UPDATE_END           : 0xE4,
    
    CMD_REQUEST                       : 0xE5,
    CMD_RESPONSE                      : 0xE6,
    CMD_RESPONSE_ACK                  : 0xE7,
    
    CMD_MESSAGE                       : 0xE9,
    
    CMD_DEBUG                         : 0xEB,
    
    CMD_PERIPHERALS_INIT              : 0xEC,
    CMD_PERIPHERALS_REPORT            : 0xED,   // [type][id][available modes]
    
    CMD_ADAPTERS_LIST                 : 0xEE,   // [[handle]]{driverId}[0]{hid}
    CMD_ADAPTERS_HANDLE               : 0xEF,   // [cmd][handle]{payload}
    
    CMD_REBOOT                        : 0xF0,   // {TIMESTAMP}
    CMD_PING                          : 0xF1,
    CMD_PONG                          : 0xF2,
    CMD_META                          : 0xF3,
    CMD_META_ACK                      : 0xF4,
    CMD_SETKEY_PRIMARY                : 0xF5,
    CMD_SETKEY_LIMITED                : 0xF6,

    CMD_MCU_FW_INFO                   : 0xFD,
    CMD_MCU_APP_CONNECT               : 0xFE,
    
    CMD_SENSORS                       : 0xFF,    // [[[[PERIOD_MS]]]]
    
    CMD_MCU_REG_SET_DELTA             : 0xA0,
    CMD_MCU_REG_SET_PERIOD            : 0xA1,
    CMD_MCU_REG_SET_TARGET            : 0xA2,
    CMD_MCU_REG_REPORT                : 0xA3,
    CMD_MCU_REG_REQUEST_REG           : 0xA4,
    CMD_MCU_REG_ACTION                : 0xA5,
    CMD_MCU_REG_EVENT                 : 0xA6,
    CMD_MCU_REG_REQUEST_REGS          : 0xA7,
    CMD_MCU_REG_SET_REGS              : 0xA8,

    CMD_MCU_BLOB_GET_LIST             : 0xB0,
    CMD_MCU_BLOB_GET_LIST_BEGIN       : 0xB1,
    CMD_MCU_BLOB_GET_LIST_END         : 0xB2,
    CMD_MCU_BLOB_GET_BLOB_INFO        : 0xB3,
    CMD_MCU_BLOB_GET_BLOB_BEGIN       : 0xB4,
    CMD_MCU_BLOB_GET_BLOB             : 0xB5,
    CMD_MCU_BLOB_GET_BLOB_DATA        : 0xB6,
    CMD_MCU_BLOB_GET_BLOB_END         : 0xB7,
    CMD_MCU_BLOB_ADD_BLOB_BEGIN       : 0xB8,
    CMD_MCU_BLOB_ADD_BLOB             : 0xB9,
    CMD_MCU_BLOB_ADD_BLOB_DATA        : 0xBA,
    CMD_MCU_BLOB_ADD_BLOB_END         : 0xBB,
    CMD_MCU_BLOB_REMOVE_BLOB          : 0xBC,
    CMD_MCU_BLOB_UPDATE_BLOB          : 0xBD,

    CMD_MCU_IMAGE_SEND_START          : 0xC0,
    CMD_MCU_IMAGE_DATA                : 0xC1,
    CMD_MCU_IMAGE_WRITE               : 0xC2,
    CMD_MCU_IMAGE_SEND_END            : 0xC3,
    CMD_MCU_IMAGE_EN_UPDATE           : 0xC4,
    
    CMD_MCU_GPIO_MODE                 : 0xD0, // [pinNumber][pinMode:pinmode_t]
    CMD_MCU_GPIO_WRITE                : 0xD1, // [pinNumber][pinValue]
    CMD_MCU_GPIO_READ                 : 0xD2, // [pinNumber][pinValue]
    
    CMD_MCU_PWM                       : 0xD3, // [pinNumber][duty cycle][[[[frequency]]]]
    
    CMD_MCU_ANALOG_WRITE              : 0xD4, // [pinNumber][[level]]
    CMD_MCU_ANALOG_READ               : 0xD5, // [pinNumber][[level]]
    
    CMD_MCU_SPI_REQUEST               : 0xD8, // [mode][[[[frequency]]]]{DATA}
    CMD_MCU_SPI_RESPONSE              : 0xD9, // {DATA}
    
    CMD_MCU_I2C_WRITE                 : 0xDA, // [stop]{data}
    CMD_MCU_I2C_READ                  : 0xDB, // {data}
    CMD_MCU_I2C_DONE                  : 0xDC, // no data

    CMD_MCU_SECURITY_UPDATE_BEGIN     : 0xE2,
    CMD_MCU_SECURITY_UPDATE_STREAM    : 0xE3,
    CMD_MCU_SECURITY_UPDATE_END       : 0xE4,

    CMD_MCU_REQUEST                   : 0xE5,
    CMD_MCU_RESPONSE                  : 0xE6,
    CMD_MCU_RESPONSE_ACK              : 0xE7,

    CMD_MCU_MESSAGE                   : 0xE9,

    CMD_MCU_DEBUG                     : 0xEB,

    // CMD_PERIPHERALS_INIT              : 0xEC,
    // CMD_PERIPHERALS_REPORT            : 0xED, // [type][id][available modes], where
    //                                                    // type - 0:IO, 1:SPI, 2:I2C, 3:UART, MtMCU::mt_mcu_io_t
    //                                                    // id - io_pins_t (PIN_A0-PIN_C31), interface (SPI, I2C, Serial) - 0-32
    //                                                    // available modes:
    //                                                    // - for MT_MCU_INTERFACE_IO  - MtExtremeIO::mt_io_modes_t

    CMD_MCU_REBOOT                    : 0xF0, // {TIMESTAMP}

    CMD_MCU_IDENTIFY                  : 0xFC,

    // CMD_MCU_FW_INFO                   : 0xFD,
    // CMD_MCU_APP_CONNECT               : 0xFE,
    CMD_MCU_SENSORS                   : 0xFF, // [[[[PERIOD_MS]]]]
};
//..............................................................................

//..............................................................................
function formattedCMD(CMD)
{
    if (isNumeric)
        return '0x' + CMD.toString(16).toUpperCase();
    else
        return CMD || '';
}
//..............................................................................

//..............................................................................
const mtCommandInfo = {};
processList(mtCommands, function(CMD, caption)
{

    mtCommandInfo[CMD] = {CMD, CMD_Str:formattedCMD(CMD), caption};
    // console.log({CMD, caption});
});
//..............................................................................

//..............................................................................
function getInfo(CMD)
{
    return mtCommandInfo[CMD] || {CMD:null, CMD_str:formattedCMD(CMD), caption:'Invalid CMD:' + formattedCMD(CMD)}
}
//..............................................................................

//..............................................................................
mtCommands.getInfo = getInfo;
mtCommands = lockObject(mtCommands);
//..............................................................................

module.exports = {mtDataTypes, mtRegTypes, mtCommands};
