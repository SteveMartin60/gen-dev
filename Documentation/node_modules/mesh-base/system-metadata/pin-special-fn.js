const {addPinTypeDefinition} = require('./pin-electrical');

//..............................................................................
const {fs, path, util} = cxq;
const
{
    processList,
} = util;
//..............................................................................

//..............................................................................
const specialFunctionPinTypes =
[

    { id: 'mosi_master'   , default_name:'MOSI'      , electrical_type: 'digital_out'    , caption_en: 'SPI Master MOSI'      , description_en: 'Master-Out-Slave-In. Sends data to the slave.'           , caption_zh:'SPI主MOSI', description_zh: '主出从入。发数据给从设备'},
    { id: 'miso_master'   , default_name:'MISO'      , electrical_type: 'digital_in'     , caption_en: 'SPI Master MISO'      , description_en: 'Master-In-Slave-Out. Receives data from the slave.'      , caption_zh:'SPI主MISO', description_zh: '主入从出。从从设备接收数据'},
    { id: 'sclk_master'   , default_name:'SCLK'      , electrical_type: 'digital_out'    , caption_en: 'SPI Master SCLK'      , description_en: 'Clock signal provided to slaves.'                        , caption_zh:'SPI主时钟', description_zh: '提供给从设备的时钟信号'},
    { id: 'mosi_slave'    , default_name:'MOSI'      , electrical_type: 'digital_in'     , caption_en: 'SPI Slave MOSI'       , description_en: 'Master-Out-Slave-In. Receives data from the master.'     , caption_zh:'SPI从MOSI', description_zh: '主出从入。从主设备接收数据'},
    { id: 'miso_slave'    , default_name:'MISO'      , electrical_type: 'digital_out'    , caption_en: 'SPI Slave MISO'       , description_en: 'Master-In-Slave-Out. Sends data to the master.'          , caption_zh:'SPI从MISO', description_zh: '主入从出。发数据到主设备'},
    { id: 'sclk_slave'    , default_name:'SCLK'      , electrical_type: 'digital_in'     , caption_en: 'SPI Slave SCLK'       , description_en: 'Clock signal provided by master.'                        , caption_zh:'SPI从时钟', description_zh: '主设备提供的时钟信号'},
    { id: 'cs_n_slave'    , default_name:'CS_N'      , electrical_type: 'digital_in'     , caption_en: 'SPI Slave Chip-Select', description_en: 'Chip-Select provided by the master. Normally a GPIO'     , caption_zh:'SPI从片选', description_zh: '主设备提供的片选。通常用一个GPIO'},
    { id: 'swdio'         , default_name:'SWDIO'     , electrical_type: 'digital_io'     , caption_en: 'SWD Data'             , description_en: 'Serial-Wire-Debug data signal'                           , caption_zh:'SWD数据', description_zh: '串行线调试数据信号'},
    { id: 'swclk'         , default_name:'SWCLK'     , electrical_type: 'digital_in'     , caption_en: 'SWD Clock'            , description_en: 'Serial-Wire-Debug clock signal from attached debugger.'  , caption_zh:'SWD时钟', description_zh: '来自附属调试器的串行线调试时钟信号'},
    { id: 'sda_master'    , default_name:'SDA'       , electrical_type: 'digital_io'     , caption_en: 'I2C Master SDA'       , description_en: 'I2C data signal on master'                               , caption_zh:'I2C主SDA', description_zh: '主设备I2C数据信号'},
    { id: 'scl_master'    , default_name:'SCL '      , electrical_type: 'digital_io'     , caption_en: 'I2C Master SCL'       , description_en: 'I2C clock signal from master.'                           , caption_zh:'I2C主SCL', description_zh: '主设备I2C时钟信号'},
    { id: 'sda_slave'     , default_name:'SDA'       , electrical_type: 'digital_io'     , caption_en: 'I2C Slave SDA'        , description_en: 'I2C data signal on slave'                                , caption_zh:'I2C从SDA', description_zh: '从设备I2C数据行'},
    { id: 'scl_slave'     , default_name:'SCL '      , electrical_type: 'digital_io'     , caption_en: 'I2C Slave SCL'        , description_en: 'I2C clock signal provided by master.'                    , caption_zh:'I2C从SCL', description_zh: '从设备I2C时钟信号'},
    { id: 'wake_out'      , default_name:'WAKE_OUT'  , electrical_type: 'digital_out'    , caption_en: 'Wakeup Output'        , description_en: 'Output generated by slave to interrupt or wake-up master', caption_zh:'唤醒输出', description_zh: '从设备产生的中断或唤醒主设备的信号'},
    { id: 'wake_in'       , default_name:'WAKE_IN'   , electrical_type: 'digital_in'     , caption_en: 'Wakeup Input'         , description_en: 'Input from master to wake-up slave'                      , caption_zh:'唤醒输入', description_zh: '主设备的被唤醒输入信号'},
    { id: 'reset_n'       , default_name:'RST_N'     , electrical_type: 'digital_in'     , caption_en: 'Reset-N'              , description_en: 'Active-low hardware reset.'                              , caption_zh:'复位-N', description_zh: '低电平有效硬件复位'},
    { id: 'consumer_3V3'  , default_name:'3V3'       , electrical_type: 'power_consumer' , caption_en: '3V3 Consumer'         , description_en: 'Consumes energy from connected 3V3 power producer.'      , caption_zh:'3V3负载', description_zh: '连接3V3功率提供者的负载'},
    { id: 'consumer_5V'   , default_name:'5V'        , electrical_type: 'power_consumer' , caption_en: '5V Consumer'          , description_en: 'Consumes energy from connected 5V power producer.'       , caption_zh:'5V负载', description_zh: '连接5V3功率提供者的负载'},
    { id: 'provider_3V3'  , default_name:'3V3'       , electrical_type: 'power_provider' , caption_en: '3V3 Provider'         , description_en: 'Provides energy for connected 3V3 power consumers.'      , caption_zh:'3V3提供者', description_zh: '为3V3负载提供能量'},
    { id: 'provider_5V'   , default_name:'5V'        , electrical_type: 'power_provider' , caption_en: '5V Provider'          , description_en: 'Provides energy for connected 5V power consumers.'       , caption_zh:'5V提供者', description_zh: '为5V负载提供能量'},
];
//..............................................................................

//..............................................................................
// Special function to be described at a higher level
// These devolve to an electrical type but provide more info at the system level
//..............................................................................
function addSpecialFunctionPins()
{
    processList(specialFunctionPinTypes, function(info)
    {
        addPinTypeDefinition(info);
    });
}
//..............................................................................

addSpecialFunctionPins();

