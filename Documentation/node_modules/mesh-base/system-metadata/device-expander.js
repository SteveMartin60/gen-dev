//..............................................................................
const {logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    convertTemplate,
    deepClone,
    updateValidProperty,
    mergeObjectDeep,
    propertyCount,
    isDefined,
    isString,
    isNumeric,
    padLeft,
    padNumber,
    padRight,
    processList
} = util;
//..............................................................................

//..............................................................................
var log = logger('device-expander');
log.setLevel('info');
//..............................................................................

//..............................................................................
function logRegister(reg)
{
    var dataType;
         if (reg.firm_type     ) dataType = 'firm:' + reg.firm_type;
    else if (reg.unit_type     ) dataType = 'unit:' + reg.unit_type;
    else if (reg.primitive_type) dataType = 'prim:' + reg.primitive_type;
    
    log.debug('LOG_REG:', padRight(reg.id, 20), 'dataType:'+padRight(dataType,20), 'type:' + padRight(reg.type,8), 'caption:'+reg.caption_en, 'delta:',reg.delta);
}
//..............................................................................

//..............................................................................
const validRegisterProperties =
[
    'id'               , //
    'device'           , // true (default) - register exists on device-side.
    'machine'          , // true (default) - register exists on machine-side.
    'caption_en'       , //
    'caption_zh'       , //
    'description_en'   , //
    'description_zh'   , //
    'primitive_type'   , //
    'unit_type'        , //
    'firm_type'        , //
    'type'             , //
    'delta'            , //
    'period'           , //
    'picklist_type'    , //
    'public'           , //
    'default'          , //
];
//..............................................................................

//..............................................................................
const validEndpointProperties =
[
    'id',
    'caption_en',
    'caption_zh',
    'description_en',
    'description_zh',
    'primitive_type',
    'metrics',
    'control',
    'registers',
    'group'
];
//..............................................................................

//..............................................................................
function getRegisters(registerInfo, endpointIndex)
{
    const result = [];
    const index  = padNumber(endpointIndex,2);
    //..........................................................................
    function addRegister(registerInfo)//, index)
    {
        const extraFields = registerInfo.reg || {};
        const definition  = mergeObjectDeep({}, registerInfo, extraFields);
        const base = definition.base || definition.id;
        const reg = {base};

        processList(validRegisterProperties, function(propId)
        {
            if (isString(definition[propId]))
                reg[propId] = convertTemplate(definition[propId], {base,index});
            else
                updateValidProperty(definition, reg, propId);
        });

        result.push(reg);
        log.debug('Reg:',reg);
    }
    ////////////////////////////////////////////////////////////////////////////
    processList(registerInfo, addRegister);
    return result;
}
//..............................................................................

//..............................................................................
function getEndpoints(endpointInfo)
{
    const result = {};
    //..........................................................................
    function addEndpoint(definition, count, index)
    {
        log.debug('AddEndpoint:',definition.id, index);
        const endpoint = {};
        const ch = padNumber(index,2);

        processList(validEndpointProperties, function(propId)
        {
            if (isString(definition[propId]))
                endpoint[propId] = convertTemplate(definition[propId], {index:ch});
            else
                updateValidProperty(definition, endpoint, propId);
        });

        if (isDefined(index))
        {
            endpoint.count = count;
            endpoint.index = index;
        }
        result[endpoint.id] = endpoint;
    }
    ////////////////////////////////////////////////////////////////////////////
    processList(endpointInfo, function(definition)
    {
        if (isNumeric(definition.count))
        {
            for (var i=0; i<definition.count; i++)
            {
                addEndpoint(definition.type, definition.count, i);
            }
        }
        else
        {
            addEndpoint(definition.type);
        }

    });

    return result;
}
//..............................................................................

//..............................................................................
function getGroups(endpointInfo)
{
    const result = {};
    processList(endpointInfo, function(endpoint)
    {
        const group = endpoint.type.group;
        if (group)
        {
            group.endpoints = [];
            result[group.id] = group;
            if (isDefined(endpoint.count))
            {
                group.endpoints.length = endpoint.count;
            }
        }
    });

    return result;
}
//..............................................................................

//..............................................................................
function expandDeviceDefinition(_props, options= {})
{
    const props          = deepClone(_props);
    const id             = props.id;
    const family         = props.family;
    const registers      = getRegisters(props.registers);
    const endpoints      = getEndpoints(props.endpoints);
    const groups         = getGroups   (props.endpoints);
    const includeMachine = options.includeMachine;
    const includeDevice  = options.includeDevice;
    const fromIdToIndex  = {};
    const fromIndexToId  = [];
    //..........................................................................
    function generateLookup()
    {
        var index = 0;
        processList(registers, function(reg)
        {
            if (reg.device)
            {
                reg.index = index;
                fromIdToIndex[reg.id.toUpperCase()] = index;
                fromIndexToId.push(reg.id);
                index++;
            }
        });
    }
    //..........................................................................
    function processRegister(reg, index)
    {
        const valid = (includeMachine && reg.machine) ||
                      (includeDevice  && reg.device );

        if (!valid)
        {
            log.debug('excludingRegister:',reg.id);
            return;
        }

        logRegister(reg);
        registers.push(reg);
    }
    //..........................................................................
    function processEndpoint(endpoint)
    {
        const index = endpoint.index;
        const endpointRegisters = getRegisters(endpoint.registers, index);
        processList(endpointRegisters, function(reg)
        {
            if (!isDefined(reg.device )) reg.device  = true;
            if (!isDefined(reg.machine)) reg.machine = true;

            log.debug('ExpandedRegister:',endpoint.id,'EndpointIndex:',index, 'base:',reg.base, 'id:',reg.id,reg);
            processRegister(reg);
        });
        endpoint.registers = endpointRegisters;

        if (endpoint.group && isDefined(endpoint.index))
        {
            const group = groups[endpoint.group.id];
            group.endpoints[endpoint.index] = endpoint.id;
        }
        delete endpoint.group;
        delete endpoint.count;
    }
    //..........................................................................
    function simplifyEndpoint(endpoint)
    {
        const endpointRegisters = endpoint.registers;
        endpoint.registers = {};
        processList(endpointRegisters, function(reg)
        {
            endpoint.registers[reg.base || reg.id] = reg.id;
        });
    }
    //..........................................................................
    function simplifyRegisterForDevice(register)
    {
        delete register.device;
        delete register.machine;
        delete register.primitive_type;
        delete register.unit_type;
        delete register.base;
    }
    ////////////////////////////////////////////////////////////////////////////
    processList(endpoints, processEndpoint);
    generateLookup();    
    log.trace('EEEE:',endpoints);
    log.trace('RRRR:',registers);
   // processList(registers, processRegister);

    const result = {family, id, registers, fromIndexToId, fromIdToIndex};
    if (includeMachine)
    {
        processList(endpoints, simplifyEndpoint);
        result.endpoints = endpoints;
        if (propertyCount(groups))
            result.groups = groups;
    }
    else
    {
        processList(registers, simplifyRegisterForDevice);
        if (propertyCount(groups))
            result.groups = groups;
    }

    log.debug('expandDeviceDefinition:result:',registers);
    return result;
}
//..............................................................................

//..............................................................................
addProperties(util,
{
    expandDeviceDefinition
});
//..............................................................................
