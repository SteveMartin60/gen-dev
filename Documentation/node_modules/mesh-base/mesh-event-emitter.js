//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const
{
    processList,
    addToNameSpace
} = util;
//..............................................................................

//..............................................................................
var instanceCount = 0;
//..............................................................................

//..............................................................................
function makeEventEmitter(targetObject)
{
    var id = 'ee' + instanceCount;
    instanceCount++;

    var publicScope = targetObject || {eventEmitterId:id};
    var eventList   = {};

    //..........................................................................
    function setMaxListeners(n)
    {
    }
    //..........................................................................
    function emit(eventId)
    {
      //console.log('eventEmitter_emit instance:'+id,'eventId:'+eventId, 'list:',eventList);

        var args = Array.prototype.slice.call(arguments, 1);
        var listenerList = eventList[eventId];

        if (listenerList)
        {
            for (var i = 0; i < listenerList.length; i++)
            {
                listenerList[i].apply(this, args);
            }
        }
    }
    //..........................................................................
    function addListener(eventId, listener)
    {
      //console.log('eventEmitter_addListener:',id,eventId, listener);
        eventList[eventId] = eventList[eventId] || [];
        eventList[eventId].push(listener);
      //console.log('eventEmitter_addListener_list:',id,eventList);
    }
    //..........................................................................
    function once(eventId, listener)
    {
        var fired = false;
        //......................................................................
        function localListener()
        {
            removeListener(eventId, localListener);
            if (!fired)
            {
                fired = true;
                listener.apply(this, arguments);
            }
        }
        ////////////////////////////////////////////////////////////////////////
        localListener.listener = listener;
        addListener(eventId, localListener);
    }
    //..........................................................................
    function removeListener(eventId, listener)
    {
        var listenerList = eventList[eventId];
        if (listenerList)
            listenerList.splice(listenerList.indexOf(listener), 1);
    }
    //..........................................................................
    function removeAllListeners(eventId)
    {
        var listenerList = eventList[eventId];
        if (listenerList)
            listenerList.length = 0;
    }
    //..........................................................................
    function reset()
    {
        processList(eventList, function(eventId)
        {
            removeAllListeners(eventId);
        });
        eventList = {};
    }
    //..........................................................................
    function listeners(eventId)
    {
        var listenerList = eventList[eventId];
        return listenerList || [];
    }
    //..........................................................................
    function listenerCount(eventId)
    {
        var result = 0;
        var listenerList = eventList[eventId];
        if (listenerList)
            result = listenerList.length;
        return result;
    }
    ////////////////////////////////////////////////////////////////////////////
    publicScope.emit               = emit               ;
    publicScope.setMaxListeners    = setMaxListeners    ;
    publicScope.addListener        = addListener        ;
    publicScope.on                 = addListener        ;
    publicScope.once               = once               ;
    publicScope.removeListener     = removeListener     ;
    publicScope.reset              = reset              ;
    publicScope.listenerCount      = listenerCount      ;
    publicScope.removeAllListeners = removeAllListeners ;
    publicScope.listeners          = listeners          ;

    return publicScope; //This will be the target object if one was passed in.
}
//..............................................................................

addToNameSpace(makeEventEmitter, 'makeEventEmitter');