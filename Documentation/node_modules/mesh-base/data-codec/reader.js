//..............................................................................
const {mtDataTypes, Int64, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    isBuffer,
    functionAsProperty_ReadOnly,
    addToNameSpace,
    getObjectFromString,
} = util;
//..............................................................................

//..............................................................................
const
{
    DATA_TYPE_FLOAT,
    DATA_TYPE_BOOLEAN,
    DATA_TYPE_CHAR,
    DATA_TYPE_INT8,
    DATA_TYPE_INT16,
    DATA_TYPE_INT32,
    DATA_TYPE_INT64,
    DATA_TYPE_UINT8,
    DATA_TYPE_UINT16,
    DATA_TYPE_UINT32,
    DATA_TYPE_UINT64,
} = mtDataTypes;
//..............................................................................

//..............................................................................
function makeDataReader(buffer)
{
    var data = isBuffer(buffer) ? buffer : Buffer.from(buffer);
    var index = 0;
    //..........................................................................
    function U8()
    {
        var result = null;
        if (index < buffer.length)
        {
            result = data.readUInt8(index);
            index += 1;
        }
        return result;
    }
    //..........................................................................
    function I8()
    {
        var result = null;
        if ((index + 1) <= buffer.length)
        {
            result = data.readInt8(index);
            index += 1;
        }
        return result;
    }
    //..........................................................................
    function U16()
    {
        var result = null;
        if ((index + 2) <= buffer.length)
        {
            result = data.readUInt16BE(index);
            index += 2;
        }
        return result;
    }
    //..........................................................................
    function I16()
    {
        var result = null;
        if ((index + 2) <= buffer.length)
        {
            result = data.readInt16BE(index);
            index += 2;
        }
        return result;
    }
    //..........................................................................
    function U32()
    {
        var result = null;
        if ((index + 4) <= buffer.length)
        {
            result = data.readUInt32BE(index);
            index += 4;
        }
        return result;
    }
    //..........................................................................
    function I32()
    {
        var result = null;
        if ((index + 4) <= buffer.length)
        {
            result = data.readInt32BE(index);
            index += 4;
        }
        return result;
    }
    //..........................................................................
    function U48()
    {
        var result = null;
        if ((index + 6) <= buffer.length)
        {
            result = data.readUIntBE(index, 6);
            index += 6;
        }
        return result;
    }
    //..........................................................................
    function I48()
    {
        var result = null;
        if ((index + 6) <= buffer.length)
        {
            result = data.readIntBE(index, 6);
            index += 6;
        }
        return result;
    }
    //..........................................................................
    function U64()
    {
        var result = null;
        if ((index + 8) <= buffer.length)
        {
            var msb = data.readUInt32BE(index);
            var lsb = data.readUInt32BE(index + 4);
            result = new Int64(lsb,msb, true);

            index += 8;
        }
        return result;
    }
    //..........................................................................
    function I64()
    {
        var result = null;
        if ((index + 8) <= buffer.length)
        {
            var msb = data.readInt32BE(index);
            var lsb = data.readUInt32BE(index + 4);
            result = new Int64(lsb, msb, false);
            index += 8;
        }
        return result;
    }
    //..........................................................................
    function F32()
    {
        var result = null;
        if ((index + 4) <= buffer.length)
        {
            result = data.readFloatBE(index);
            index += 4;
        }
        // console.log('F32:',result);
        return result;
    }
    //..........................................................................
    function F64()
    {
        var result = null;
        if ((index + 8) <= buffer.length)
        {
            result = data.readDoubleBE(index);
            index += 8;
        }
        // console.log('F64:',result);
        return result;
    }
    //..........................................................................
    function BIN()
    {
        const length = U32();
        let result = data.slice(index, index+length);
        index += length;
        return result;
    }
    //..........................................................................
    function STR()
    {
        return BIN().toString('utf8');
    }
    //..........................................................................
    function JSN()
    {
        const dataContent = BIN();
        const dataString  = dataContent.toString('utf8');
        const jsonRecord  = getObjectFromString(dataString);
        return jsonRecord;
    }
    //..........................................................................
    function Bool()
    {
        const value = U8();
        return (value === 1);
    }
    //..........................................................................
    function byType(type)
    {
        if (readByType[type])
        {
            return readByType[type]();
        }
        else
        {
            raise(new Error);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    const readByType =
    {
        [DATA_TYPE_FLOAT  ] : F32,
        [DATA_TYPE_BOOLEAN] : Bool,
        [DATA_TYPE_CHAR   ] : I8,
        [DATA_TYPE_INT8   ] : I8,
        [DATA_TYPE_INT16  ] : I16,
        [DATA_TYPE_INT32  ] : I32,
        [DATA_TYPE_INT64  ] : I64,
        [DATA_TYPE_UINT8  ] : U8,
        [DATA_TYPE_UINT16 ] : U16,
        [DATA_TYPE_UINT32 ] : U32,
        [DATA_TYPE_UINT64 ] : U64
    };
    //..........................................................................
    function toString(encoding)
    {
        return publicScope.data.toString(encoding);
    }
    //..........................................................................
    const publicScope =
    {
        U8 , U16, U32, U48, U64,
        I8 , I16, I32, I48, I64,
                  F32,      F64,
        BIN,
        STR,
        JSN,
        Bool,

        uint8      : U8 ,
        uint16     : U16,
        uint32     : U32,
        uint48     : U48,
        uint64     : U64,
        int8       : I8 ,
        int16      : I16,
        int32      : I32,
        int48      : I48,
        int64      : I64,
        readF32    : F32,
        readF64    : F64,
        readBinary : BIN,
        readString : STR,
        byType,
        toString,
    };

    functionAsProperty_ReadOnly(publicScope, function(){return index        ; }, 'length');
    functionAsProperty_ReadOnly(publicScope, function(){return data.slice(0); }, 'data'  );

    return publicScope;
}
//..............................................................................

addToNameSpace(makeDataReader, 'makeDataReader');
module.exports = {makeDataReader};