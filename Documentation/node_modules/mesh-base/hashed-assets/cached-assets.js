const crypto  = require('crypto');

//..............................................................................
const {cloud, fs, path, pathAssetCache, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    abort,
    encodeSha256MultiHash,
    fileToSha256MultiHash,
    isFunction,
    isObject,
    isNumeric,
} = util;
//..............................................................................

//..............................................................................
function checkFileUploaded(targetPath, callback)
{
    console.log('checkFileUploaded:', targetPath);
    cloud.fileItemExists({targetPath}, function(err, raw)
    {
        if (err)
        {
            console.warn('getFolderContents_error:', targetPath, err);
            callback(err);
        }
        else
        {
            console.log('checkFileUploaded:getItemInfo:', raw);
            callback(null, raw);
        }
    });
}
//..............................................................................

//..............................................................................
function getFilenameFromHash(fileHash, filenamePrefix)
{
    if (filenamePrefix)
        fileHash = filenamePrefix + '-' + fileHash;
    return fileHash;
}
//..............................................................................

//..............................................................................
function getFileHash(filePath, callback)
{
    if (isFunction(callback))
    {
        fileToSha256MultiHash(filePath, function(err, multi, hex)
        {
            if (err)
            {
                console.warn('getFileHashAsync:Failed:',err, filePath);
                abort();
            }
            else
            {
                console.log('getFileHash:async:hex  :',hex  );
                console.log('getFileHash:async:multi:',multi);
                callback(null, multi);
            }
        });
    }
    else
    {
        try
        {
            const data = fs.readFileSync(filePath);
            const hash = crypto.createHash('sha256');
            hash.update(data);
            const hex = hash.digest().toString('hex');
            console.log('getFileHash: sync:hex  :',hex);
            const multi = encodeSha256MultiHash(hex);
            console.log('getFileHash: sync:multi:',multi);
            console.log();

            return multi;
        }
        catch (e)
        {
            console.warn('ERROR:getFileHash:Failed:',e);
            return null;
        }
    }
}
//..............................................................................

//..............................................................................
// Checks if a file, with the filename, exists in the cloud asset store.
// If not, then add it to the cloud.
// Does not check further by downloading!!
//..............................................................................
function uploadHashedFile({localPath, filenamePrefix, filename}, callback)
{
    if (isFunction(filenamePrefix))
    {
        callback = filenamePrefix;
        filenamePrefix = null;
    }

    getFileHash(localPath, function(err, fileHash)
    {
        const targetFilename = filename || getFilenameFromHash(fileHash, filenamePrefix);
        const targetFolder   = 'hashes';
        const options        = {targetFilename, localPath, targetFolder};
        const checkPath      = targetFolder + '/' + targetFilename;

        console.log('uploadHashedFile:start:',options);
        checkFileUploaded(checkPath, function(err, fileinfo)
        {
            if (err)
            {
                console.log('uploadHashedFile:checkPath:error:',err);
                if (callback)
                    callback(err);
            }
            else
            if (fileinfo)
            {
                console.log('uploadHashedFile:checkPath:alreadyUploaded:',fileinfo);
                if (callback)
                    callback(null, fileHash, fileinfo)
            }
            else
            {
                console.log('uploadHashedFile:checkPath:needUpload:', options);
                //abort();

                cloud.uploadFile(options, function(err)
                {
                    if (err)
                    {
                        console.warn('uploadHashedFile:Failed:',localPath);
                        if (callback)
                            callback(err);
                    }
                    else
                    {
                        console.log('uploadHashedFile:OK:',localPath);
                        if (callback)
                            callback(null, fileHash);
                    }
                });
            }
        });
    });
}
//..............................................................................

//..............................................................................
function downloadHashedFile(filename, callback)
{
    const targetFolder = 'hashes';
    const localPath    = path.join(pathAssetCache, filename);
    const targetPath   = targetFolder + '/' + filename;

    cloud.downloadFile({localPath, targetPath}, function(err)
    {
        if (err)
        {
            console.warn('Download Failed:',err, targetPath, ' =>', localPath);
            callback(err);
        }
        else
        {
            console.log('Downloaded:',localPath);
            callback(null, localPath);
        }
    });
}
//..............................................................................

//..............................................................................
function getCachedHashedFile(filename, callback)
{
    const localPath = path.join(pathAssetCache, filename);
    fs.exists(localPath, function(existing)
    {
        if (existing)
            callback(null, localPath);
        else
            callback(null, null);
    });
}
//..............................................................................

//..............................................................................
function getHashedFile(filename, callback)
{
    getCachedHashedFile(filename, function(err, localPath)
    {
        if (localPath)
            callback(null, localPath);
        else
            downloadHashedFile(filename, callback);
    });
}
//..............................................................................

module.exports =
{
    getCachedHashedFile,
    uploadHashedFile,
    downloadHashedFile,
    getHashedFile,
    getFileHash,
};
