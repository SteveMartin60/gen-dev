const {uploadAssetFile} = require('./upload-asset');

//..............................................................................
const {logger, path, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    processFunctionListSerial,
    fileToSha256MultiHash,
} = util;
//..............................................................................

//..............................................................................
const log = logger('add-hashed-asset');
log.setLevel('debug');
//..............................................................................

//..............................................................................
// Filename is optional.
// This function will add (hash of the asset file if its not supplied.
//..............................................................................
function addPlainAsset({localPath, filename}, mainCallback)
{
    log.info('addPlainAsset:',{localPath, filename});

    let   plainAssetHash      = null;
    let   remoteAssetInfo     = null;
    let   downloadedAssetInfo = null;
    //...........................................................................
    function getSourceHash(callback)
    {
        fileToSha256MultiHash(localPath, function(err, hash, hex)
        {
            if (err)
            {
                log.warn('getSourceHash:Callback:Error:', err);
                callback(err)
            }
            else
            {
                console.log('getSourceHash:',hash,'hex:',hex);
                plainAssetHash = hash;
                callback(null);
            }
        });
    }
    //..........................................................................
    function upload(callback)
    {
        uploadAssetFile({localPath, filename}, function(err, info)
        {
            if (err)
            {
                log.warn('ERROR:After-upload:', localPath);
                callback(err);
            }
            else
            {
                remoteAssetInfo     = info.remoteAssetInfo;
                downloadedAssetInfo = info.downloadedAssetInfo;
                log.debug('After-upload:', {remoteAssetInfo, downloadedAssetInfo});
                callback(null);
            }
        });
    }
    //..........................................................................
    function getResult()
    {
        return {
            plainAssetHash,
            finalHash : plainAssetHash,
            remoteAssetInfo,
            downloadedAssetInfo,
        };
    }
    ////////////////////////////////////////////////////////////////////////////
    const execution =
    [
        getSourceHash,
        upload,
    ];
    processFunctionListSerial(execution, function(err)
    {
        log.debug('All-Done:',err);
        const result = getResult();
        log.debug('RESULT:',result);
        if (err)
            mainCallback(err);
        else
            mainCallback(null, result);
    });
}
//..............................................................................

module.exports = {addPlainAsset};