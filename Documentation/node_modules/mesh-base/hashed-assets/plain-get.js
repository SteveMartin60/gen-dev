const crypto  = require('crypto');

//..............................................................................
const {cloud, logger, path, pathAssetCache, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    processFunctionListSerial,
    fileToSha256MultiHash,
    getFileInfo,
} = util;
//..............................................................................

//..............................................................................
const log = logger('plain-get');
log.setLevel('debug');
//..............................................................................

//..............................................................................
// At this level we treat the asset as a singe-file so check the hash against
// its content hash. If this is a zip file then it change for each time we zip
// the contents. Higher level will keep the content hash for whole folder.
//..............................................................................
function getPlainAsset(props, mainCallback)
{
    const plainAssetHash     = props.plain;
    const filename           = props.file;
    const plainAssetPath     = path.join(pathAssetCache, plainAssetHash);
    let   downLoadAssetPath    = null;
    let   secureAssetInfo      = null;
    //..........................................................................
    function getAsset(callback)
    {
        log.debug('getAsset:start:',plainAssetHash);
        cloud.getHashedFile(plainAssetHash, function(err, filePath)
        {
            if (err)
            {
                log.warn('getAsset:failed:',err);
                callback(err);
            }
            else
            {
                downLoadAssetPath = filePath;
                log.debug('getAsset:done:',plainAssetHash, downLoadAssetPath);
                secureAssetInfo = getFileInfo(downLoadAssetPath);
                if (!secureAssetInfo || !secureAssetInfo.size)
                    callback('ERROR:getAsset Failed:' + plainAssetHash + ' To: ' + downLoadAssetPath);
                else
                    callback(null);
            }
        });
    }
    //..........................................................................
    function validateAsset(callback)
    {
        fileToSha256MultiHash(plainAssetPath, function(err, finalHash, hex)
        {
            if (err)
            {
                log.warn('validateAsset:fileToSha256MultiHash:Error:', err);
                callback(err)
            }
            else
            if (finalHash !== plainAssetHash)
            {
                const err = 'ERROR:validateAsset:Failed Final Hash Check';
                log.warn(err);
                log.warn('expected:', plainAssetHash);
                log.warn('actual  :', finalHash     );

                callback({err,plainAssetHash,finalHash});
            }
            else
            {
                log.debug('validateAsset:OK');
                callback(null);
            }
        });
    }
    //..........................................................................
    function getResult()
    {
        const result =
        {
            plainAssetHash,
            plainAssetPath,
        };
        log.debug('RESULT:',result);
        return result;
    }
    ////////////////////////////////////////////////////////////////////////////
    const execution =
    [
        getAsset,
        validateAsset,
    ];
    processFunctionListSerial(execution, function(err)
    {
        log.debug('All-Done err:',err);
        if (err)
            mainCallback(err);
        else
            mainCallback(null, getResult());
    });
}
//..............................................................................

module.exports = {getPlainAsset};