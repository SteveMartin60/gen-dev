//..............................................................................
const {cloud, logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    abort,
    isNumeric,
    isObject,
    processFunctionListSerial,
    getTempFolder,
    forceDirectory,
    getFileInfo,
} = util;
//..............................................................................

//..............................................................................
const log = logger('upload-asset');
log.setLevel('debug');
//..............................................................................

//..............................................................................
// We use the hash of the actual file (zip) do check that the upload/download is
// correct. But the filename will usually be based on the contents of the file.
// This allows it do be independent of the compression method used.
// To ensure upload integrity, this function will do an independent download
// and check the hash on this file matches with the original file it sent.
// There is no knowledge of content or encryption at this level.
//..............................................................................
function uploadAssetFile({localPath,filename}, mainCallback)
{
    const workingFolder = getTempFolder('asset-upload');
    var   fileHashOriginal;
    var   fileHashUploaded;
    var   fileHashDownloaded;

    var   downloadedAssetPath;
    var   downloadedAssetInfo;
    var   remoteAssetInfo;
    var   sourceAssetInfo = getFileInfo(localPath);

    log.debug('uploadAssetFile:',{localPath, workingFolder});
    //..........................................................................
    function makeWorkingFolder(callback)
    {
        forceDirectory(workingFolder, function(err)
        {
            if (err)
            {
                log.warn('Error:makeWorkingFolder.creatingTempFolder:',err);
                callback('Failed to create temp folder:'+workingFolder);
            }
            else
            {
                callback(null);
            }
        });
    }
    //..........................................................................
    function hashAssetFile(callback)
    {
        cloud.getFileHash(localPath, function(err, fileHash)
        {
            fileHashOriginal = fileHash;
            callback(err);
        });
    }
    //..........................................................................
    function doUpload(callback)
    {
        cloud.uploadHashedFile({localPath, filename}, function(err, hashId)
        {
            if (err)
            {
                log.warn('Upload Failed:',err);
                callback(err);
            }
            else
            {
                fileHashUploaded = hashId;
                log.debug('doUpload:done:',fileHashUploaded, filename);
                callback(null);
            }
        });
    }
    //..........................................................................
    function getRemoteFileInfo(callback)
    {
        const targetPath = 'hashes/' + filename;
        cloud.getFileItemInfo({targetPath}, function(err,info)
        {
            if (!isObject(info) || !isObject(info.item))
            {
                console.warn('ERROR:After-getFileItemInfo:', err, info);
                abort();
            }

            info = info.item;
            if (!isNumeric(info.size) || !info.size)
            {
                console.warn('ERROR:Zero-Bytes After-getFileItemInfo:', info);
                abort();
            }
            remoteAssetInfo = info;
            callback(null);
        });
    }
    //..........................................................................
    function doDownload(callback)
    {
        log.debug('doDownload:start:', filename);
        cloud.getHashedFile(filename, function(err, filePath)
        {
            if (err)
            {
                console.warn('Download Failed:',err);
               callback(err);
            }
            else
            {
                downloadedAssetPath = filePath;
                log.debug('doDownload:done:',fileHashUploaded, downloadedAssetPath);
                downloadedAssetInfo = getFileInfo(downloadedAssetPath);
                if (!downloadedAssetInfo || !downloadedAssetInfo.size)
                    callback('Download-Failed:' + filename + ' To: ' + downloadedAssetPath);
                else
                    callback(null);
            }
        });
    }
    //..........................................................................
    function checkHash(callback)
    {
        cloud.getFileHash(downloadedAssetPath, function(err, hashId)
        {
            fileHashDownloaded = hashId;
            log.debug('Hash of Original  :', fileHashOriginal  );
            log.debug('Hash of Uploaded  :', fileHashUploaded  );
            log.debug('Hash of Downloaded:', fileHashDownloaded);
            callback(null, fileHashUploaded);
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    const execution = [makeWorkingFolder, hashAssetFile, doUpload, getRemoteFileInfo, doDownload, checkHash];
    processFunctionListSerial(execution, function(err)
    {
        log.debug('uploadAssetFile:done:',err);
        if (err)
            mainCallback(err , {});
        else
        {
            mainCallback(null, {fileHashUploaded, sourceAssetInfo, remoteAssetInfo, downloadedAssetInfo});
        }
    });
}
//..............................................................................

module.exports = {uploadAssetFile};