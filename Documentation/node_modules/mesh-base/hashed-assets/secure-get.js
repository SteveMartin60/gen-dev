const crypto  = require('crypto');

//..............................................................................
const {cloud, logger, path, pathPackageDownload, pathAssetCache, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    doCallback,
    processFunctionListSerial,
    fileToSha256MultiHash,
    getFileInfo,
    getExistingKeyPair,
    decryptFile,
} = util;
//..............................................................................

//..............................................................................
const log = logger('secure-get');
log.setLevel('debug');
//..............................................................................

//..............................................................................
// To retrieve and validate the plain-asset, you need to have the following things:
// - Secure-asset hash
// - Plain-asset hash
// - Encrypted secret-key
// - Public-key Id
//
// Do the following
// - Load the private-key using the public-key ID. Need this to continue.
// - Download the asset file using the Secure-asset hash as ID
// - Use the private-key to decrypt the encrypted secret-key
// - Use the decrypted secret-key to decrypt the secure-asset
// - Validate the decrypted-asset against the plain-asset-hash
//..............................................................................
function getSecureAsset(props, mainCallback)
{
    const secureAssetHash    = props.asset;
    const plainAssetHash     = props.plain;
    const encryptedSecretKey = Buffer.from(props.lock, 'base64');
    const publicKeyId        = props.key;
    const filename           = props.file;
    const fileExtension      = path.extname(filename);
    const plainAssetPath     = path.join(pathAssetCache     , plainAssetHash);
    const downLoadAssetPath  = path.join(pathPackageDownload, filename      );
    let   secureAssetPath    = null;
    let   secureAssetInfo    = null;
    let   publicKey          = null;
    let   privateKey         = null;
    let   dataEncryptionKey  = null;

    //..........................................................................
    function getPrivateKey(callback)
    {
        getExistingKeyPair(publicKeyId, function(err, keyInfo)
        {
            if (err)
            {
                callback(err);
            }
            else
            {
                publicKey  = keyInfo.publicKey;
                privateKey = keyInfo.privateKey;
                console.log();
                console.log('-------------------------------------------------');
                console.log('getKeyPair:hashCheck:',keyInfo.hashCheck);
                console.log('-------------------------------------------------');
                if (!privateKey)
                {
                    const err = 'No Private Key:' + publicKeyId;
                    log.warn('ERROR:' + err);
                    callback(err);
                }
                else
                {
                    callback(null);
                }
            }
        });
    }
    //..........................................................................
    function decryptKey(callback)
    {
        dataEncryptionKey = crypto.privateDecrypt(privateKey, encryptedSecretKey);
        log.debug('dataEncryptionKey:',dataEncryptionKey);
        doCallback(callback);
    }
    //..........................................................................
    function getSecureAsset(callback)
    {
        log.debug('getSecureAsset:start:',secureAssetHash);
        cloud.getHashedFile(secureAssetHash, function(err, filePath)
        {
            if (err)
            {
                console.warn('getSecureAsset:failed:',err);
                callback(err);
            }
            else
            {
                secureAssetPath = filePath;
                log.debug('getSecureAsset:done:',secureAssetHash, secureAssetPath);
                secureAssetInfo = getFileInfo(secureAssetPath);
                if (!secureAssetInfo || !secureAssetInfo.size)
                    callback('ERROR:getSecureAsset Failed:' + secureAssetHash + ' To: ' + secureAssetPath);
                else
                    callback(null);
            }
        });
    }
    //..........................................................................
    function decryptSecureAsset(callback)
    {
        // We decrypt with the key that was encrypted from private, decrypted with public
        decryptFile(secureAssetPath, plainAssetPath, 'aes-256-cbc', dataEncryptionKey, function(err)
        {
            if (err)
            {
                console.warn('decryptSecureAsset:Callback:Error:', err);
                callback(err)
            }
            else
            {
                callback(null);
            }
        });
    }
    //..........................................................................
    function validateAsset(callback)
    {
        fileToSha256MultiHash(plainAssetPath, function(err, finalHash, hex)
        {
            if (err)
            {
                console.warn('validateAsset:fileToSha256MultiHash:Error:', err);
                callback(err)
            }
            else
            if (finalHash !== plainAssetHash)
            {
                const err = 'ERROR:validateAsset:Failed Final Hash Check';
                log.warn(err);
                log.warn('expected:', plainAssetHash);
                log.warn('actual  :', finalHash     );

                callback({err,plainAssetHash,finalHash});
            }
            else
            {
                log.debug('validateAsset:OK');
                callback(null);
            }
        });
    }
    //..........................................................................
    function getResult()
    {
        const result =
        {
            publicKeyId,
            plainAssetHash,
            secureAssetHash,
            plainAssetPath,
            secureAssetPath,
        };
        log.debug('RESULT:',result);
        return result;
    }
    //..........................................................................
    function getSecure()
    {
        const execution =
        [
            getPrivateKey,
            decryptKey,
            getSecureAsset,
            decryptSecureAsset,
            validateAsset,
        ];
        processFunctionListSerial(execution, function(err)
        {
            log.debug('All-Done err:',err);
            if (err)
                mainCallback(err);
            else
                mainCallback(null, getResult());
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    // First check if plain asset is already in the cache

    cloud.getCachedHashedFile(plainAssetHash, function(err, existingPlainAssetPath)
    {
        if (existingPlainAssetPath)
        {
            log.debug('Found Existing Plain Asset:',existingPlainAssetPath);
            mainCallback(null, getResult());
        }
        else
            getSecure();

    });
}
//..............................................................................

module.exports = {getSecureAsset};