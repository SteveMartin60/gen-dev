//..............................................................................
// Connection Manager
// ------------------
// TODO: This should be using the socket.io connection to the cloud
// Maintains an active connection to the mesh cloud.
// Pings the server regularly and notifies if connection is lost.
// If the connection is lost, attempts to reconnect every few seconds.
// Maintains a list of spaces hosted by the server and keeps these up to date.
//
// Connection Objects
// ------------------
// Creation of connection objects is synchronous.
// Everything comes back through events emitted by the connection object.
//
// Usage Sequence:
//   - Get the connection connectionManager.getCloudConnectionx
//   - Add listeners
//   - Respond to events.
//
// Initial event, which is issued only once, is the 'connected' event.
// Issues a "stillConnected" event every time it successfully pings the server.
//
// After initial creation, can check if the connection has been connected or
// was connected at last ping time.
//..............................................................................

//..............................................................................
const {httpClient, logger, makeEventEmitter, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    isDefined,
    after,
    isString,
    getObjectFromString,
    isObject,
    promoteScope_ReadOnly,
    meshNowMs
} = util;
//..............................................................................

//..............................................................................
var log = logger('cloud-connection');
log.setLevel('debug');
//..............................................................................

//..............................................................................
function getServerInfo(connection, callback)
{
    //If we haven't built the space info for this server then get full data
    //otherwise just get summary.
    var url = ['','info'];
    if (connection.hasBeenConnected)
        url.push('summary');

    var urlString = connection.baseUrl + url.join('/');
  //log.info('getServerInfo:',urlString);
    httpClient.get(null, [urlString], callback);
}
//..............................................................................

//..............................................................................
function checkConnection(connection, callback)
{
  //log.info('checkConnection:',connection);
    //..........................................................................
    var startTime = meshNowMs();
    var result = {};
    result.connected     = false;
    result.serverAddress = connection.serverAddress;
    result.baseUrl       = connection.baseUrl;
    result.message       = '';
    //..........................................................................
    function callback_getInfo(err, body)
    {
        result.ping = meshNowMs() - startTime;
        //log.info('callback_getInfo:',err,body);
        if (err)
        {
            result.error     = err;
            result.connected = false;
            callback(err, result);
        }
        else
        if (!isDefined(body) )
        {
            result.error     = 'no data from server';
            result.connected = false;
            callback(null, result);
        }
        else
        {
            if (isString(body))
                result.serverInfo = getObjectFromString(body);
            else
            if (isObject(body))
                result.serverInfo = body;
            else
            {
                //log.debug('callback_getInfo response:', response.statusCode);
                result.error     = 'invalid data from server';
                result.connected = false;
                callback(null, result);
            }

            if (!result.serverInfo || !result.serverInfo.server_time || !result.serverInfo.api_version)
            {
                result.error     = 'Invalid response from server[' + result.serverAddress + ']';
                result.connected = false;
                callback(result.error, result);
            }
            else
            {
                result.connected = true;
                result.message  = 'Connected to Server[' + result.serverAddress + '] ' +
                                   'server_time: ' + result.serverInfo.server_time + ' ' +
                                   'api_version: ' + result.serverInfo.api_version;

                callback(null, result);
            }
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    if (!connection.serverAddress)
    {
        result.error = 'Server Address not set';
        callback(result.error, result);
    }
    else
    {
        getServerInfo(connection, callback_getInfo);
    }
}
//..............................................................................

//..............................................................................
function processConnectionInfo(connection, err, info)
{
//  log.info('processConnectionInfo:',err,info);
//  log.info('processConnectionInfoConnection:',connection);
    if (!err && isDefined(info) && isDefined(info.error))
    {
        err = info.error;
    }

    if (err) //Bad connection
    {
        connection.wasConnectedLastCheck = false;
        connection.connectionTracker.updateStatus(false);
    }
    else //Good connection
    {
        //log.info('processConnectionInfo:','hasBeenConnected:',connection.hasBeenConnected, 'wasConnectedLastCheck:',connection.wasConnectedLastCheck);
        if (!connection.hasBeenConnected)
        {
            //Never connected Before - so this is first successful connection
            connection.info = info;
        }
        connection.wasConnectedLastCheck = true;
        connection.hasBeenConnected      = true;
        connection.connectionTracker.updateStatus(true, info.ping);
    }
}

////////////////////////////////////////////////////////////////////////////////

var started = false;
//..............................................................................

//..............................................................................
function start()
{
    var connection =
    {
        hasBeenConnected       : false,
        wasConnectedLastCheck  : false,
        serverAddress          : cxq.cloud.serverUrl,
        baseUrl                : cxq.cloud.baseUrl
    };
    //..........................................................................
    function check()
    {
        checkConnection(connection, function(err, info)
        {
            //log.info(' callback Attempting to start connection with Server:',err,info);
            processConnectionInfo(connection, err, info);
            after(5000).do(check);
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    if (started) return;
    started = true;

    promoteScope_ReadOnly(publicScope, connection, 'hasBeenConnected'     );
    promoteScope_ReadOnly(publicScope, connection, 'wasConnectedLastCheck');
    promoteScope_ReadOnly(publicScope, connection, 'baseUrl'              );
    promoteScope_ReadOnly(publicScope, connection, 'serverAddress'        );

    connection.connectionTracker = cxq.makeConnectionTracker(connection.serverAddress, publicScope);

    log.debug('####### Attempting to start connection with Server[' + connection.serverAddress + ']');
    check()

}

//..............................................................................
var publicScope =
{
    id :'Mesh-Cloud',
    start
};
//..............................................................................

//..............................................................................
makeEventEmitter(publicScope);
module.exports = publicScope;


