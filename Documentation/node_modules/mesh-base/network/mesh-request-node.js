var FormData = require('form-data');
var get      = require('simple-get');

//..............................................................................
const {makeEventEmitter, util} = cxq;
const {getObjectFromString, processList, mergeProperties} = util;
//..............................................................................

//..............................................................................
const timeoutId = 524;
//..............................................................................

//..............................................................................
function makeFormData(formDef)
{
    const form = new FormData();

    processList(formDef, function(value, key)
    {
        form.append(key, value);
    });

    return form;
}
//..............................................................................

//..............................................................................
function makeTimeoutError(url, options)
{
    return {
        code: timeoutId,
        error:
        {
             status  : timeoutId,
             en      :'Timeout Error',
             zh      : '超时错误',
             code    : 'request_timeout',
             details : {url, timeout:options.timeout || 'default'}
        }
    }
}
//..............................................................................

//..............................................................................
function request(url, options, callback)
{
    var stream;
    //..........................................................................
    function makeError(error, response, body)
    {
        var errorResponse, bodyJson;

        if (error)
        {
            const errorStr = ''+error;
          //console.error('request_makeError:error:', errorStr, '\nresponse:', response, '\nbody:', body, '\nurl:',url, '\noptions:',options);

            if (!response && errorStr == 'Error: Request timed out')
            {
              // console.warn('request_makeError:timeout:', url);
                 errorResponse = makeTimeoutError(url, options);
            }
            else
            {
                errorResponse =
                {
                    code   : error.code,
                    error  : error.message,
                    details: null
                };
            }
        }
        else
        if (response && response.statusCode >= 400)
        {
            if (stream)
                console.error('httpStreamedDownload:error:', response.statusCode, 'Request Options:', options, 'Error:', error);

            if (body)
                bodyJson = getObjectFromString(body) || {error:'Failed to parse body', details:body};

            errorResponse =
            {
                code   : bodyJson.code    || response.statusCode,
                error  : bodyJson.error   || 'Undefined Error',
                details: bodyJson.details || null
            };
        }

        return errorResponse;
    }
    //..........................................................................
    function doCallback(err, response, data)
    {
        if (callback)
            callback(err, response, data);
    }
    //..........................................................................
    function callback_getParseResult(error, response, body)
    {
        var errorResponse = makeError(error, response, body);
        var contentType   = response && response.headers && response.headers['content-type'];

        if (!error && body && contentType && contentType.slice(0, 16) === 'application/json')
            body = getObjectFromString(body);

        if (errorResponse)
            requestEmitter.emit('error', errorResponse);
        else
            requestEmitter.emit('success', response, body);

        doCallback(errorResponse, response, body);
    }
    //..........................................................................
    function callback_getSkipParseResult(err, response)
    {
        var error;

        if (err)
        {
            error = makeError(err, response);
            doCallback(error, response);
        }
        else
        {
            response.once('error', function(err  ){error = makeError(err, response)});
            response.once('end'  , function()     {doCallback(error               )});
            response.pipe(stream);
        }
    }
    ////////////////////////////////////////////////////////////////////////////

    options.url = url;

    if (!options.headers)
        options.headers = {};

    if (options.json)
    {
        options.body = options.json;
        options.json = true;
    }

    if (options.formData)
    {
        options.body = makeFormData(options.formData);
        options.headers = mergeProperties(options.headers, options.body.getHeaders());
        delete options.formData;
    }

    if (options.stream)
    {
        stream = options.stream;
        delete options.stream;
    }

    if (stream) get       (options, callback_getSkipParseResult);
    else        get.concat(options, callback_getParseResult    );

}
//..............................................................................

//..............................................................................
var requestEmitter = makeEventEmitter();
request.on  = requestEmitter.on;
request.off = requestEmitter.off;
//..............................................................................

cxq.request = request;