//..............................................................................
const {logger, makeEventEmitter, meshSessionTokenIdentifier, util, cloud} = cxq;
//..............................................................................

//..............................................................................
const
{
    processList
} = util;
//..............................................................................

//..............................................................................
var log = logger('mesh-request-browser');
log.setLevel('info');
//..............................................................................

//..............................................................................
function MeshRequestError(error)
{
    this.error = error;
}

MeshRequestError.prototype = Object.create(Error.prototype);
MeshRequestError.prototype.constructor = MeshRequestError;
//..............................................................................

//..............................................................................
function redirectToLogin()
{
    log.error('ERROR: redirectToLogin:',window.location.href);
    // var url  = '/na/r/' + encodeURIComponent(window.location.href);
    // location = url;
}
//..............................................................................

//..............................................................................
function request(url, suppliedOptions, callback)
{
    //var domain = location.hostname.split('.')[0];

        url          = suppliedOptions.url || url;
    var type         = suppliedOptions.method;
    var stream       = suppliedOptions.stream;
    var global       = false;
    var headers      = new Headers();
    var body         = null;
    var contentType  = null;
    var formData;
    //..........................................................................
    function doCallback(err, data, responseBody)
    {
        try
        {
            if (callback) callback(err, data, responseBody);
        }
        catch(e)
        {
            log.error('Error while running callback',e);
        }
    }
    //..........................................................................
    function appendHeader(val, key)
    {
        headers.append(key, val);
    }
    //..........................................................................
    function appendFormData(val, key)
    {
        body.append(key, val);
    }
    //..........................................................................
    function response_checkForErrors(response)
    {
        if (!response.ok)
        {
            return response.json().then(function(data)
            {
                log.info('response_checkForErrors:',data);
                var error = new MeshRequestError(data.error);
                throw error;
            });
        }
        else
        {
            return response;
        }
    }
    //..........................................................................
    function response_handleSuccess(response)
    {
        // return response.json()
        //     .then(function(responseBody)

        var promise;

        const contentType = response.headers.get('content-type') || '';
        const isJson      = contentType.slice(0, 16) === 'application/json';

        if (stream)
            promise = response.body.pipeTo(stream);
        else
        if (isJson)
            promise = response.json();
        else
            promise = response.blob();

        return promise
            .then(function (responseBody)
            {
                var cbResponse = {statusCode: response.status};
                doCallback(null, cbResponse, responseBody);
                requestEmitter.emit('success', cbResponse, responseBody);
                return responseBody;
            });
    }
    //..........................................................................
    function response_handleError(err)
    {
        log.error('Response', url, err);
        var cbError;

        if (err instanceof MeshRequestError)
        {
            //var appId = window.location.pathname.split('/')[1];

            //if (err.code == 'api_validation_error' && appId != 'na')
            //    redirectToLogin();

            cbError = {error:err.error};
        }
        else
            cbError = {error: {code: 'api_error', status:400, en: 'API Error', zh: 'API Error'}};

        doCallback(cbError);
    }
    ////////////////////////////////////////////////////////////////////////////

    if (suppliedOptions.headers)
        processList(suppliedOptions.headers, appendHeader);

    if (suppliedOptions.formData)
    {
        body = new FormData();
        processList(suppliedOptions.formData, appendFormData);
    }
    else
    if (suppliedOptions.json)
    {
        body = JSON.stringify(suppliedOptions.json);
        headers.append('Content-Type', 'application/json; charset=utf-8');
    }

    var fetchOptions =
    {
        method      : suppliedOptions.method,
        headers     : headers,
        mode        : 'cors',
      //credentials : true,   //TODO NM: This doesn't work on Firefox
        body        : body
    };

    //log.info('doRequest:',url, fetchOptions);

    fetch(url, fetchOptions)
        .then (response_checkForErrors)
        .then (response_handleSuccess)
        .catch(response_handleError);
}
//..............................................................................

var requestEmitter = makeEventEmitter();
request.on         = requestEmitter.on;
request.off        = requestEmitter.off;
cxq.request        = request;

