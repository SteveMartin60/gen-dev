require('../top-use');

const {util} = cxq;
const
{
    rootMeanSquare,
    arrayMean,
    randomBase32,
    randomBase32Id,
    toBase32,
    fromBase32,
    makeRunningAverager,
    alphaInc,
    alphaDec,
    polygonsIntersect,
    polygonBounding,
    polygonListBounding,
} = util;

const
{
    jsonToSha256HashId,
    encodeSha256MultiHash,
    jsonToSha256MultiHash,
    fileToSha256MultiHash,
    stringToSha256MultiHash,
    bufferToSha256MultiHash,
    folderToSha256MultiHash,
    decodeMultiHash,
    bytesAsUInt32BE,
    base32IdToBytes,
    base32IdToUInt64,
    bytesToBase32Id,
    uInt64ToBase32Id,

    padNumber,
    padRight,
    padLeft,
    shutdown,
    getRandomInt,
} = util;

//..............................................................................
function showStats(caption, success, failure)
{
    console.log(padRight(caption,32), padLeft(success.length,6),  padLeft(failure.length,6));
}
//..............................................................................

//..............................................................................
function bytesAsUInt32BE_test(count)
{
    let success = [];
    let failure = [];
    //..........................................................................
    function randomByte()
    {
        return getRandomInt(255);
    }
    //..........................................................................
    function makeRandomBytes()
    {
        return [randomByte(), randomByte(), randomByte(), randomByte()];
    }
    //..........................................................................
    function run()
    {
        const testBytes = makeRandomBytes();
        const testHex   = testBytes.map(function(byte){return padNumber(byte.toString(16),2)}).join('');
        // console.log('bytesAsUInt32BE:bytes:', testHex);
        // console.log('bytesAsUInt32BE:hex  :', bytesAsUInt32BE(testBytes).toString(16));

        const resultAsHex = padNumber(bytesAsUInt32BE(testBytes).toString(16),8);
        if (resultAsHex === testHex)
            success.push(true);
        else
           failure.push({testBytes,testHex});
    }
    ////////////////////////////////////////////////////////////////////////////
    for (let i=0; i<count; i++)
    {
        run();
    }
    if (failure.length)
        console.log('bytesAsUInt32BE_test:Errors:',failure);
    
    showStats('bytesAsUInt32BE_test', success, failure);
}
//..............................................................................

//..............................................................................
function randomBase32Id_test(count)
{
    let success = [];
    let failure = [];
    //..........................................................................
    function run()
    {

        const testId  = randomBase32Id();
        if (testId.length === 14)
            success.push(true);
        else
           failure.push({testId});
    }
    ////////////////////////////////////////////////////////////////////////////
    for (let i=0; i<count; i++)
    {
        run();
    }
    if (failure.length)
        console.log('randomBase32Id_test:Errors:',failure);

    showStats('randomBase32Id_test', success, failure);
}
//..............................................................................

//..............................................................................
// Each test will:
//   - generate a random base32-ID
//   - convert to bytes
//   - convert bytes back to ID
//   - compare to original ID
//..............................................................................
function base32IdTest(count)
{
    let success = [];
    let failure = [];
    //..........................................................................
    function run()
    {

        const testId  = randomBase32Id();
        const bytes   = base32IdToBytes(testId);
        const checkId = bytesToBase32Id(bytes);
        if (testId === checkId)
            success.push(true);
        else
           failure.push({testId,bytes,checkId});
    }
    ////////////////////////////////////////////////////////////////////////////
    for (let i=0; i<count; i++)
    {
        run();
    }
    if (failure.length)
        console.log('base32IdTest:Errors:',failure);

    showStats('base32IdTest', success, failure);
}
//..............................................................................


const testId = 'AAAA-BBBB-CCCC';
const int64 = base32IdToUInt64(testId);
const bytes = base32IdToBytes(testId).map(function(n){return n.toString(16);}).join('');
const asInt = int64.toString(16);
console.log('Test          :', testId);
console.log('Bytes         :', bytes);
console.log('asInt         :', asInt);
console.log('Converted-Back:', uInt64ToBase32Id(int64));

console.log();
console.log('------------------------------------------------');
console.log('Test                            Success  Failure');
console.log('------------------------------------------------');

bytesAsUInt32BE_test(100*1000);
randomBase32Id_test (   10000);
base32IdTest        (   10000);
console.log('------------------------------------------------');
console.log();


shutdown();
