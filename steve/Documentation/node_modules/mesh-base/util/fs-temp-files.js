const os   = require('os');

//..............................................................................
const {util, path, fs, logger} = cxq;
//..............................................................................

//..............................................................................
const
{
    abort,
    deleteFolder,
    deleteExistingFile,
    meshNowMs,
    meshNow,
    makeDate,
    getFilenameForDateTime,
    findFilesInFolder,
    processListSerial,
    forceDirectory,
    randomBase32,
    oneHour,
    oneMinute,
    oneSecond,
    addProperties,
    wait,
    round1,
} = util;
//..............................................................................

//..............................................................................
var log = logger('fs-temp-files');
log.setLevel('info');
//..............................................................................

//..............................................................................
const cleanupInterval      = 30 * oneMinute;
const tempFileLifeSpan     =  1 * oneHour;
var   baseTempFolder       =  path.join(os.tmpdir(), 'mesheven');
const defaultSubPath       = 'general';
//..............................................................................

//..............................................................................
const runningMonitors = {};
//..............................................................................

//..............................................................................
function getTempFolder(id)
{
    return getTempName(id);
}
//..............................................................................

//..............................................................................
function getTempFile(id)
{
    return getTempName(id);
}
//..............................................................................

//..............................................................................
function getTempName(id)
{
    var filename;
    var subPath       = id || defaultSubPath;
    var filenameParts =
    [
        getFilenameForDateTime(meshNow()),
        randomBase32(4)
    ];

    filename = filenameParts.join('-');

    return path.join(baseTempFolder, subPath, filename);
}
//..............................................................................

//..............................................................................
function cleanupItem(pathToItem, callback)
{
    //..........................................................................
    function callback_deleteExpired(err)
    {
        if (err)
            callback(err);
        else
            callback(null, 'Deleted: ' + pathToItem);
    }
    //..........................................................................
    function callback_stat(err, stat)
    {
        var modifiedTime, elapsedTime, isFolder, expired, secondsUntilExpired;

        if (err)
        {
            callback(err);
        }
        else
        {
            isFolder            = stat.isDirectory();
            modifiedTime        = makeDate(stat.mtime).getTime();
            elapsedTime         = meshNowMs() - modifiedTime;
            expired             = elapsedTime > tempFileLifeSpan;
            secondsUntilExpired = round1((tempFileLifeSpan - elapsedTime) / oneSecond);

            if (expired)
            {
                if (isFolder)
                    deleteFolder(pathToItem, callback_deleteExpired);
                else
                    deleteExistingFile(pathToItem, callback_deleteExpired);
            }
            else
            {
                callback(null, 'Not expired: ' + pathToItem + ' (Expires in ' + secondsUntilExpired + ' seconds)');
            }
        }
    }
    //..........................................................................
    fs.stat(pathToItem, callback_stat);
}
//..............................................................................

//..............................................................................
function startTempFileMonitor(id)
{
    id = id || defaultSubPath;

    if (runningMonitors[id])
        runningMonitors[id].start();
    else
        runningMonitors[id] = makeNewMonitor(id);
}
//..............................................................................

//..............................................................................
function stopTempFileMonitor(id)
{
    id = id || defaultSubPath;

    if (runningMonitors[id])
        runningMonitors[id].stop();
}
//..............................................................................

//..............................................................................
function makeNewMonitor(subPath)
{
    var   stopped        = true;
    var   scheduled      = false;
    var   analyzing      = false;
    var   timeoutCounter = null;
    const tempFolder     = path.join(baseTempFolder, subPath);
    //..........................................................................
    function stop()
    {
        clearTimeout(timeoutCounter);
        stopped = true;
    }
    //..........................................................................
    function start()
    {
        stopped = false;

        if (!analyzing && !scheduled)
            analyzeTempFolders();
    }
    //..........................................................................
    function scheduleNextAnalysis()
    {
        analyzing = false;

        if (!stopped)
        {
            log.info(`Next analysis of ${tempFolder} will occur in ${round1(cleanupInterval / oneSecond)} seconds`);
            scheduled = true;
            clearTimeout(timeoutCounter);
            timeoutCounter = wait(cleanupInterval).then(analyzeTempFolders);
        }
    }
    //..........................................................................
    function analyzeTempFolders()
    {
        function callback_cleanupFolders(err, result)
        {
            if (err)
                log.info(`Error while cleaning ${tempFolder}`, err);
            else
                log.info(`Cleaned ${tempFolder}`, result);

            scheduleNextAnalysis();
        }
        //......................................................................
        function callback_findFilesInFolder(err, files)
        {
            if (err)
            {
                log.error(`Failed to find files in ${tempFolder}`, err);
                scheduleNextAnalysis();
            }
            else
            {
                if (files.length)
                {
                    processListSerial(files, cleanupItem, callback_cleanupFolders);
                }
                else
                {
                    log.info(`No temp files exist in ${tempFolder}, scheduling next Analysis`);
                    scheduleNextAnalysis();
                }
            }
        }
        ////////////////////////////////////////////////////////////////////////////
        log.info(`Mesh Releaser Cleanup started. Scanning for expired files in ${tempFolder}`);

        if (!analyzing)
        {
            analyzing = true;
            findFilesInFolder(tempFolder, null, callback_findFilesInFolder);
        }
    }
    //..........................................................................
    function callback_forceDirectory(err)
    {
        if (err)
            log.error(`Failed to create temp dir ${tempFolder}`);
        else
            start();
    }
    //..........................................................................
    forceDirectory(tempFolder, callback_forceDirectory);

    return {start, stop};
}
//..............................................................................

//..............................................................................
function setTempFileBase(newBasePath)
{
    if (fs.existsSync(newBasePath))
        baseTempFolder = newBasePath;
    else
        abort('setTempFileBase: Unknown Path:' + newBasePath);
}
//..............................................................................

//..............................................................................
function getTempFileBase()
{
    return baseTempFolder;
}
//..............................................................................

addProperties(util,
{
    startTempFileMonitor,
    stopTempFileMonitor,
    getTempFolder,
    getTempFile,
    getTempFileBase,
    setTempFileBase,
});


