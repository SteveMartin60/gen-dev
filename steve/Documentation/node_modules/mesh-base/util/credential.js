//..............................................................................
const {fs, logger, moment, path, util, pathCredentials, pathDataStorage} = cxq;
//..............................................................................

//..............................................................................
const
{
    addToNameSpace,
    addProperties,
    processList,
    processListParallel,
    isArrayWithElements,
    isObject,
    arrayToObject,
    findFilesByExtension,
    forceDirectory,
    loadJsonSync,
    functionAsProperty_ReadOnly,
    readJsonFile,
    deepClone,
    doCallback,
} = util;
//..............................................................................

//..............................................................................
const log = logger('credential');
log.setLevel('info');
//..............................................................................

//..............................................................................
var watchingFolders = false;
const credentials = {};
//..............................................................................

//..............................................................................
const pathMachineIdentities = path.join(pathDataStorage , 'machine-identities');
const pathMachineId         = path.join(pathDataStorage , 'machine-active.json');
const machineIdentity = {};
//..............................................................................

//..............................................................................
function getMachineIdentity()
{
    return deepClone(machineIdentity);
}
//..............................................................................

//..............................................................................
function getPathMachineId()
{
    return pathMachineId;
}
//..............................................................................

//..............................................................................
function getIdentityFolder()
{
    if (machineIdentity.cloudId)
        return path.join(pathMachineIdentities , machineIdentity.cloudId);
    else
        return null;
}
//..............................................................................

//..............................................................................
function getPathPrivateKey()
{
    if (machineIdentity.cloudId)
        return path.join(getIdentityFolder(), 'machine-private.key');
    else
        return null;
}
//..............................................................................

//..............................................................................
function getPathCertificates()
{
    if (machineIdentity.cloudId)
        return path.join(getIdentityFolder(), 'cert');
    else
        return null;
}
//..............................................................................

//..............................................................................
function getActiveIdentityId()
{
    return machineIdentity.cloudId || null;
}
//..............................................................................

//..............................................................................
function reloadMachineIdentity()
{
    if (fs.existsSync(pathMachineId))
    {
        var   identityInfo = null;
        const idInfo       = loadJsonSync(pathMachineId);

        if (idInfo && idInfo.id)
        {
            const pathMachineIdentity = path.join(pathMachineIdentities , idInfo.id, 'machine.json');

            if (fs.existsSync(pathMachineIdentity))
            {
                identityInfo = loadJsonSync(pathMachineIdentity);
                log.debug('loadedMachineIdentity:', idInfo.id, 'from machine.json:', identityInfo);

                if (identityInfo)
                {
                    machineIdentity.hostName     = identityInfo.host_name;
                    machineIdentity.hostId       = identityInfo.host_id;
                    machineIdentity.hardwareId   = '';
                    machineIdentity.modelId      = 'machine';
                    machineIdentity.secret       = identityInfo.secret;
                    machineIdentity.cloudId      = identityInfo.id;
                    machineIdentity.organization = identityInfo.organization || null;
                    if (identityInfo.cloud_machine)
                        machineIdentity.cloudMachine = identityInfo.cloud_machine;
                }
            }
            else
            {
                log.error('ERROR: Missing Identity File:', pathMachineIdentity);
            }
        }
        else
        {
            log.error('ERROR: Invalid Machine ID File:', pathMachineId);
        }
    }
}
//..............................................................................

//..............................................................................
function loadPrivateKey(callback)
{
    function callback_ReadPrivateKey(err, key)
    {
        if (err)
        {
            log.info('Fail to load private key', err);
        }
        callback(err, key);
    }
    ////////////////////////////////////////////////////////////////////////////
    const keyPath = getPathPrivateKey();
    if (keyPath)
        fs.readFile(getPathPrivateKey(), 'utf8', callback_ReadPrivateKey);
    else
        doCallback('No Key', callback);
}
//..............................................................................

//..............................................................................
function loadAuthorityCertificate(callback)
{
    var caFilePathRecord = path.join(pathCredentials, 'mesheven-root-ca.cer');
    log.debug('loadAuthorityCertificate:',caFilePathRecord);
    var cert;
    //..........................................................................
    function callback_ReadCARecord(err, file)
    {
        if (err)
        {
            callback(err);
        }
        else
        {
            cert = file;
            callback(err, cert);
        }
    }
    //..........................................................................
    function callback_ExistCACrtRecord(exists)
    {
        if (exists)
        {
            fs.readFile(caFilePathRecord, 'utf-8', callback_ReadCARecord);
        }
        else
        {
            var errInfo = 'Failed to load CA certificate';
            log.info(errInfo);
            callback(errInfo);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    fs.exists(caFilePathRecord, callback_ExistCACrtRecord);
}
//..............................................................................

//..............................................................................
function loadClientCertificates(mainCallback)
{
    var certificateFileExtension = '.cer';
    var certFolderPath           = getPathCertificates();
    var certificates             = {};
    //..........................................................................
    function processCertificate(certificatePath, callback)
    {
        fs.readFile(certificatePath, 'utf-8', function(err, cert)
        {
            if (!err && cert)
            {
                var name = path.basename(certificatePath, certificateFileExtension);
                if (name.slice(0,5) == 'star.')
                {
                    name = '*' + name.slice(4);
                }
                certificates[name] = cert;
            }
            callback(null);
        });
    }
    //..........................................................................
    function callback_ReadFiles(err, fileList)
    {
        if (err || !fileList)
        {
            mainCallback(err);
        }
        else
        if (fileList.length > 0)
        {
            processListParallel(fileList, processCertificate, function(err)
            {
              //log.info('loaded_certificates:',certificates);
                mainCallback(err, certificates);
            });
        }
        else
        {
            mainCallback(null, certificates);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    if (certFolderPath)
    {
        forceDirectory(certFolderPath, function(err)
        {
            findFilesByExtension(certFolderPath, certificateFileExtension, 1, callback_ReadFiles);
        });
    }
    else
    {
        doCallback(null, certificates, mainCallback);
    }
}
//..............................................................................

//..............................................................................
var updating       = false;
var pendingChanges = false;
//..............................................................................

//..............................................................................
function watchCredentialFolder()
{
    var certFolderPath  = getPathCertificates();
    var folderList      = [pathCredentials, certFolderPath];
    //..........................................................................
    function update(evt, name)
    {
        updating       = true;
        pendingChanges = false;

        log.info('watchCredentialFolder:updatingCredentials_start:', evt, name);
        loadCredentials(function(err)
        {
            log.info('watchCredentialFolder:updatingCredentials_loaded:',err);
            updating = false;
            if (pendingChanges)
                update();
        });
    }
    //..........................................................................
    function processChange(evt, name)
    {
        log.info('watchCredentialFolder:processChange:', evt, name);
        if (updating)
            pendingChanges = true;
        else
            update(evt, name);
    }
    //..........................................................................
    function watchSingleFolder(folderPath)
    {
        log.debug('watchCredentialFolder:watchSingleFolder:',folderPath);
        if (folderPath)
            fs.watch(folderPath, {persistent: true, recursive: false}, processChange);
    }
    ////////////////////////////////////////////////////////////////////////////
    if (watchingFolders)
        return;

    watchingFolders = true;
    processList(folderList, watchSingleFolder);
}
//..............................................................................

//..............................................................................
function replaceCredentials(newCredentials)
{
    for (const prop of Object.keys(credentials))
    {
        delete credentials[prop];
    }

    for (const prop of Object.keys(newCredentials))
    {
        credentials[prop] = newCredentials[prop];
    }
}
//..............................................................................

//..............................................................................
// Loads:
//     Mesheven CA from:
//         credentials/mesheven-root-ca.cer
//
//     Current active identity
//         machine-active.json
//         machine-identities/activeId/machine.json
//
//     Key and Certificates for active identity
//         machine-identities/activeId/machine-private.key
//         machine-identities/activeId/cert/all-certificates
//
// Optionally, if exists, loads:
//     credentials/cloud-credentials.json
//     credentials/machine-registration-key.json   (organization-level machine-registration token
//     root/machine-registration-invitation.json   (User-level         machine-registration token)
//
// A valid machine identity will have: private key and non-expired certificates:
//     localhost.cer
//     machine.cer
//
//..............................................................................
function loadCredentials(callback)
{
    log.debug('loadingCredentials:');
    reloadMachineIdentity();

    var cloudCredentials;
    var credentialsFilePath = path.join(pathCredentials, 'cloud-credentials.json');
    if (fs.existsSync(credentialsFilePath))
        cloudCredentials = loadJsonSync(credentialsFilePath) ;

    var botCredentials;
    var botCredentialsFilePath = path.join(pathCredentials, 'bot-credentials.json');
    if (fs.existsSync(botCredentialsFilePath))
    {
        const raw = loadJsonSync(botCredentialsFilePath);
        if (isArrayWithElements(raw))
            botCredentials = arrayToObject(raw, 'identity');
    }

    //..........................................................................
    const newCredentials =
    {
        cloud : cloudCredentials || null,
        bots  : botCredentials   || null,
        ca    : null,
        key   : null,
        certs : []
    };
    //..........................................................................
    loadPrivateKey(function(err, key)
    {
        newCredentials.key = key;
        loadAuthorityCertificate(function (err, ca)
        {
            //log.info('loadedCA:',err,ca);
            newCredentials.ca = ca;

            loadClientCertificates(function(err, certificates)
            {
                if (certificates)
                    newCredentials.certs = certificates;
                log.debug('loadedCredentials:updated');
                log.debug(newCredentials);
                replaceCredentials(newCredentials);
                if (!watchingFolders)
                    watchCredentialFolder();

                if (callback)
                    callback(null);

            });
        });
    });
}
//..............................................................................

//..............................................................................
function getBotCredentials(botId)
{
    if (credentials && isObject(credentials.bots))
    {
        const botCredentials = credentials.bots[botId];
        if (isObject(botCredentials))
        {
            const {identity, secret, domain} = botCredentials;
            if (identity && secret && domain)
            {
                return {identity, secret, domain};
            }
            else
            {
                log.warn('WARNING:getBotCredentials: Bad Bot Credentials:',botId,botCredentials);
                return null;
            }
        }
        else
        {
            log.warn('WARNING:getBotCredentials: Unknown Bot:',botId);
        }
    }
    else
    {
        log.warn('WARNING:getBotCredentials: No Bot credentials:',botId);
        return null;
    }
}
//..............................................................................

reloadMachineIdentity();

addToNameSpace(credentials, 'credentials');
addProperties(util,
{
    reloadMachineIdentity,
    loadCredentials,
    getMachineIdentity,
    getPathPrivateKey,
    getPathCertificates,
    getPathMachineId,
    getActiveIdentityId,
    getBotCredentials,
});
