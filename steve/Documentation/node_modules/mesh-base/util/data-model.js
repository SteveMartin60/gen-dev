//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    isArray,
    isDefined,
    processList
} = util;
//..............................................................................

//..............................................................................
function fieldIsPrimitiveType(field){return (isDefined(field.primitive_type));}
function fieldIsUnitType     (field){return (isDefined(field.unit_type     ));}
function fieldIsPicklist     (field){return (isDefined(field.picklist_type ));}
function fieldIsRelationship (field){return (isDefined(field.relationship  ));}
function fieldIsRelatedList  (field){return (isDefined(field.related_list  ));}
function fieldIsChildModel   (field){return (isDefined(field.child_model   ));}
function fieldIsArray        (field){return (isArray  (field               ));}
//..............................................................................

//..............................................................................
function fieldIsSimple(field)
{
    return  (
        (isDefined(field.primitive_type)) ||
        (isDefined(field.unit_type     )) ||
        (isDefined(field.picklist_type )) ||
        (isDefined(field.relationship  ))
    );
}
//..............................................................................

//..............................................................................
function getFieldDescription(field)
{
    var s = '';

    s +=  'field_id:'   + field.id;
    s += ' field_type:' + getFieldType(field);

         if (fieldIsPrimitiveType (field)) s += ' primitive_type:' + field.primitive_type;
    else if (fieldIsUnitType      (field)) s += ' unit_type:'      + field.unit_type;
    else if (fieldIsPicklist      (field)) s += ' picklist:'       + field.picklist_type;
    else if (fieldIsRelationship  (field)) s += ' data_model:'     + field.relationship;
    else if (fieldIsRelatedList   (field)) s += ' related_list:'   + field.related_list;
    else if (fieldIsChildModel    (field)) s += ' child_model:'    + field.child_model;

    if (fieldIsArray(field)) s += ' array:true';

    return s;
}
//..............................................................................

//..............................................................................
function getFieldType(field)
{
    var result;

         if (fieldIsPrimitiveType(field)) result = 'primitive';
    else if (fieldIsUnitType     (field)) result = 'unit';
    else if (fieldIsPicklist     (field)) result = 'picklist';
    else if (fieldIsRelationship (field)) result = 'relationship';
    else if (fieldIsRelatedList  (field)) result = 'related_list';
    else if (fieldIsChildModel   (field)) result = 'child_model';

    return result;
}
//..............................................................................

//..............................................................................
function processDataModel(dataModel, metadataCache, functionSet)
{
    function process_FieldList(fieldList)
    {
        function processPrimitive(field)
        {
            if (isDefined(functionSet.processPrimitive))
                functionSet.processPrimitive(dataModel, fieldList, field);
        }
        //......................................................................
        function processUnit(field)
        {
            if (isDefined(functionSet.processUnit))
                functionSet.processUnit(dataModel, fieldList, field)
        }
        //......................................................................
        function processPicklist(field)
        {
            if (isDefined(functionSet.processPicklist))
                functionSet.processPicklist(dataModel, fieldList, field)
        }
        //......................................................................
        function processRelationship(field)
        {
            if (isDefined(functionSet.processRelationship))
                functionSet.processRelationship(dataModel, fieldList, field)
        }
        //......................................................................
        function processUntypedField(field)
        {
            if (isDefined(functionSet.processUntypedField))
                functionSet.processUntypedField(dataModel, fieldList, field)
        }
        //..................................................................
        function processStructure_Array(field)
        {
            if (isDefined(functionSet.processArray_Begin))
                functionSet.processArray_Begin(dataModel, fieldList, field);

            process_FieldList(field.items);

            if (isDefined(functionSet.processArray_End))
                functionSet.processArray_End(dataModel, fieldList, field);
        }
        //..................................................................
        function processRelatedList(field)
        {
            if (isDefined(functionSet.processRelatedList))
                functionSet.processRelatedList(dataModel, fieldList, field);
        }
        //..................................................................
        function processChildModel(field)
        {
            if (isDefined(functionSet.processChildModel_Begin))
                functionSet.processChildModel_Begin(dataModel, fieldList, field);

            var childModel = metadataCache.getDataModel(field.child_model);
            if (childModel)
            {
                process_FieldList(childModel.properties);
            }

            if (isDefined(functionSet.processChildModel_End))
                functionSet.processChildModel_End(dataModel, fieldList, field);
        }
        //..................................................................
        function processField(field)
        {
            if (isDefined(functionSet.processField_Begin))
                functionSet.processField_Begin(dataModel, fieldList, field);


                 if (fieldIsPrimitiveType(field)) processPrimitive   (field);
            else if (fieldIsUnitType     (field)) processUnit        (field);
            else if (fieldIsPicklist     (field)) processPicklist    (field);
            else if (fieldIsRelationship (field)) processRelationship(field);
            else if (fieldIsRelatedList  (field)) processRelatedList (field);
            else if (fieldIsChildModel   (field)) processChildModel  (field);
            else if (fieldIsArray               )  {}
            else                                  processUntypedField(field);

            if (isDefined(functionSet.processField_End))
                functionSet.processField_End(dataModel, fieldList, field);
        }
        ////////////////////////////////////////////////////////////////////
        if (isDefined(functionSet.processFieldList_Begin))
            functionSet.processFieldList_Begin(dataModel, fieldList);

        processList(fieldList, processField);

        if (isDefined(functionSet.processFieldList_End))
            functionSet.processFieldList_End(dataModel, fieldList)
    }
    ////////////////////////////////////////////////////////////////////////////
    if (isDefined(dataModel) && isDefined(dataModel.properties))
        process_FieldList(dataModel.properties);
}
//..............................................................................

addProperties(util,
{
    fieldIsPrimitiveType,
    fieldIsUnitType,
    fieldIsPicklist,
    fieldIsRelationship,
    fieldIsRelatedList,
    fieldIsChildModel,
    fieldIsArray,
    fieldIsSimple,
    getFieldDescription,
    getFieldType,
    processDataModel
});

