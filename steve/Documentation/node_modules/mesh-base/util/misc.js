//..............................................................................
const {path, semver, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    isNumeric,
    isString,
    isDefined,
    addProperties,
    meshNow,
    randomBase32,
    processList
} = util;
//..............................................................................

//..............................................................................
function compareStrings(s1, s2)
{
    if (!s1 || !s2)
         return 0;

    try {
        return s1.localeCompare(s2);
    }
    catch (e)
    {
      console.log('ERROR: compareStrings:',s1, s2);
      return 0;
    }
}
//..............................................................................

//..............................................................................
function requestAction(connection, cloudId, actionId, data)
{
    function encodeMessage(messageData)
    {
        var messageRecord =
        {
            published_at : meshNow(),
            data         : messageData
        };
        return JSON.stringify(messageRecord);
    }
    ////////////////////////////////////////////////////////////////////////////
    var topic  = 'core/device_actions/' + cloudId;
    var action = {};

    action.id                = cloudId;
    action.info              = {};
    action.info.initiated_at = meshNow();
    action.info.uid          = randomBase32(8);
    action.info.action       = actionId;

    if (data)
        action.payload = data;

    console.log('requestAction topic:'+topic, 'action:'+actionId, action);
    connection.publish(topic, encodeMessage(action));
}

//..............................................................................
function getLatestReleaseFromList(range, targetId, kindId, releaseList, callback)
{
    function releaseMeetsTargetAndKind(release)
    {
        if (targetId && targetId != release.target) return false;
        if (kindId   && kindId   != release.kind  ) return false;
        return true;
    }
    ////////////////////////////////////////////////////////////////////////////
    if (!semver.validRange(range))
    {
        callback('Invalid-Range');
    }
    else
    {
        {
            var revisionMap  = {};
            var revisionIds  = [];
            processList(releaseList, function(release)
            {
                if (releaseMeetsTargetAndKind(release))
                {
                    revisionMap[release.revision] = release;
                    revisionIds.push(release.revision);
                }
            });
            var best = semver.maxSatisfying(revisionIds, range);
            if (best)
               callback(null, revisionMap[best]);
            else
               callback('unknown');
        }
    }
}
//..............................................................................
function getAllMatchingReleasesFromList(range, targetId, kindId, releaseList, callback)
{
    var results = [];
    //..........................................................................
    function releaseMeetsTargetAndKind(release)
    {
        if (targetId && targetId != release.target    ) return false;
        if (kindId   && kindId   != release.kind      ) return false;
        if (!semver.satisfies(release.revision, range)) return false;
        return true;
    }
    ////////////////////////////////////////////////////////////////////////////
    if (!semver.validRange(range))
    {
        callback('Invalid-Range');
    }
    else
    {
        {
            processList(releaseList, function(release)
            {
                if (releaseMeetsTargetAndKind(release))
                    results.push(release);
            });
            callback(null, results);
        }
    }
}
//..............................................................................

//..............................................................................
function parseRevisionString(revision)
{
    if (!revision)
        return null;

    var parts = revision.split('.');
    var result =
    {
        major : Number(parts[0]),
        minor : Number(parts[1]),
        patch : Number(parts[2])
    };

    if (!isNumeric(result.major)) return null;
    if (!isNumeric(result.minor)) return null;
    if (!isNumeric(result.patch)) return null;

    return result;
}
//..............................................................................

//..............................................................................
function compareRevisions(a, b)
{
    if (a.major > b.major) return +1;
    if (a.major < b.major) return -1;
    if (a.minor > b.minor) return +1;
    if (a.minor < b.minor) return -1;
    if (a.patch > b.patch) return +1;
    if (a.patch < b.patch) return -1;
    return 0;
}
//..............................................................................

//..............................................................................
function compareRevisionStrings(a, b)
{
    a = parseRevisionString(a);
    b = parseRevisionString(b);
    return compareRevisions(a, b);
}
//..............................................................................

//..............................................................................
// Elements of the array must be objects
// Will add an _age property to the array elements.
//..............................................................................
function sortArrayByRevisionProperty(list, propertyId)
{
    function addSortKey(e)
    {
        e._revisionObject = {};
        if (isString(e[propertyId]))
        {
            e._revisionObject = parseRevisionString(e[propertyId]) || null;
        }
    }
    //..........................................................................
    function removeSortKey(e)
    {
        delete e._revisionObject;
    }
    //..........................................................................
    function compareEntities(e1,e2)
    {
        return compareRevisions(e1._revisionObject, e2._revisionObject);
    }
    ////////////////////////////////////////////////////////////////////////////
    processList(list,addSortKey);
    var result = list.sort(compareEntities);
    processList(list,removeSortKey);
    return result;
}
//..............................................................................

//..............................................................................
function getFirstDefinedValue(values)
{
    for (var c in values)
    {
        if (isDefined(values[c]))
            return values[c];
    }

    return null;
}
//..............................................................................

addProperties(util,
{
    getFirstDefinedValue,
    requestAction,
    getLatestReleaseFromList,
    getAllMatchingReleasesFromList,
    parseRevisionString,
    compareStrings,
    compareRevisions,
    compareRevisionStrings,
    sortArrayByRevisionProperty
});

