const CircularJSON = require('./circular-json');
const canonicalJson = require('canonical-json');

//..............................................................................
const {async, _, numeral, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    isDefined,
    isString,
    isFunction,
    isArray,
    isArrayWithElements,
    isObject,
    isPlainObject,
    isInteger,
    isNumeric,
    isBuffer,
    getMemoryUsage
} = util;
//..............................................................................

//..............................................................................
const messageSourceKind =
{
    ipcNotify   : 'ipcNotify',
    zoneNotify  : 'zoneNotify',
    cloudNotify : 'cloudNotify',
    cloudStore  : 'cloudStore',
    localStore  : 'localStore'
};
//..............................................................................

//..............................................................................
function renameProperty(parent, oldPropertyName, newPropertyName)
{
    if (isDefined(parent[oldPropertyName]))
    {
        parent[newPropertyName] = parent[oldPropertyName];
        delete parent[oldPropertyName];
    }
}
//..............................................................................

//..............................................................................
function updateValidProperty(source, target, propertyName)
{
    if (source && target)
    {
        var n = source[propertyName];
        if (!isDefined(n)) return;
        if ( isString(n) && n=='') return;

        target[propertyName] = source[propertyName];
    }
}
//..............................................................................

//..............................................................................
function addProperties(destination, source)
{
    return _.extend(destination, source);
}
//..............................................................................

//..............................................................................
function mergeProperties(source1, source2)
{
    return _.extend({}, source1, source2);
}
//..............................................................................

//..............................................................................
function addCaptionsAndDescriptions(source, target)
{
    if (source && target)
    {
        updateValidProperty(source, target, 'caption_en'    );
        updateValidProperty(source, target, 'caption_zh'    );
        updateValidProperty(source, target, 'description_en');
        updateValidProperty(source, target, 'description_zh');
    }
}
//..............................................................................

//..............................................................................
function clearAllTimers()
{
    var intervalId = setInterval(function(){}, 1000);
    for (var i = 0; i <= intervalId; i++)
    {
        console.log('StopTimer:',intervalId);
        clearInterval(i);
    }
    console.error('All the timers(' + i + ') are cleared');
}
//..............................................................................

//..............................................................................
function exit(options={})
{
    if (isString(options))
        options = {message: options};

    if (!isDefined(options.stack))
        options.stack = true;

    console.error('SHUTDOWN BEGIN: exit is called. Process will stop shortly.');
    if (options.stack)
        console.error(new Error().stack);

    if (isNodeJs)
    {
        after(1000).do(function()
        {
            console.error('SHUTDOWN COMPLETE: Exiting Process.');
            process.exit();
        });
    }
    else
    {
        clearAllTimers();
    }
}
//..............................................................................

//..............................................................................
function makeFutureException(milliseconds, label)
{
    if (!label) label = 'no label';
    function makeFutureException()
    {
        var seconds = milliseconds/1000;
        throw new Error('FutureException [' + label + '] from '+ seconds + ' seconds ago!!!!!!');
    }
    ////////////////////////////////////////////////////////////////////////////
    after(milliseconds).do(makeFutureException);
}
//..............................................................................

//..............................................................................
function stringsEqual(string1, string2)
{
    return isDefined(string1) && isDefined(string2) && (string1.toLowerCase() === string2.toLowerCase());
}
//..............................................................................

//..............................................................................
function replaceAll(oldStr, removeStr, replaceStr)
{
    var regEx = new RegExp(removeStr, "gi");
    return oldStr.replace(regEx,replaceStr);
}
//..............................................................................

//..............................................................................
function insertString(oldString, index, extraString)
{
    return oldString.slice(0, index) + extraString + oldString.slice(index);
}
//..............................................................................

//..............................................................................
function getObjectFromString(s)
{
    if (!isDefined(s))
    {
        return null;
    }

    if (typeof Buffer != 'undefined' && Buffer.isBuffer(s))
    {
        s = s.toString();
    }
    else
    if (typeof s === 'object')
    {
        return s;
    }

    try
    {
        return JSON.parse(s);
    }
    catch(e)
    {
        //console.log('getObjectFromString - invalid JSON format:', s, e.stack);
        //console.trace();
        return null;
    }
}
//..............................................................................

//..............................................................................
function objectToQueryString(data)
{
    var dataAsString = JSON.stringify(data);
    return encodeURIComponent(dataAsString);
}
//..............................................................................

//..............................................................................
function queryStringToObject(queryString)
{
    // Its possible the string is already decoded before it arrives here.
    // In this case the first char will be '{' since it should be an object.
    if (!isString(queryString))
       return null;

    if (queryString.length == 0)
        return null;

    queryString = queryString.trim();

    if (queryString.charAt(0) != '{' && queryString.charAt(0) != '[') //Assume its encoded
        queryString = decodeURIComponent(queryString);

    if (queryString.charAt(0) != '{' && queryString.charAt(0) != '[')
        return null;

    return getObjectFromString(queryString);
}
//..............................................................................

//..............................................................................
function asString(val)
{
    var originalVal = val;

    if (isNumeric(val))
    {
        val = val + '';
    }
    else
    if (isObject(val) || isArray(val))
    {
        try
        {
            val = JSON.stringify(val);
        }
        catch(e)
        {
            val = originalVal;
        }
    }
    else
    if (typeof val === 'undefined')
        val = 'undefined';
    else
    if (val === null)
        val = 'null';

    return val;
}
//..............................................................................

//..............................................................................
function itemsIdentical(val1, val2)
{
    val1 = asString(val1);
    val2 = asString(val2);

    return val1 === val2;
}
//..............................................................................

//..............................................................................
function itemsNotIdentical(val1, val2)
{
    return !itemsIdentical(val1, val2);
}

//..............................................................................

//..............................................................................
function getByteAsHex(b)
{
    var result = b.toString(16);
    if (result.length < 2)
        result = '0' + result;
    return result.toLowerCase();
}
//..............................................................................

//..............................................................................
function padNumber(number, size, char='0')
{
    const padString = char.repeat(16);
    var s = '' + number;
    if (s.length >= size)
    {
        return s;
    }
    else
    {
        s = padString + number;
        return s.slice(-size);
    }
}
//..............................................................................

//..............................................................................
function padRight(s, size, char)
{
    var i;
    char = char || ' ';

    if  (!isString(s))
      s = asString(s);

    var extra = size - s.length;
    for (i=0; i<extra; i++)
        s += char;

    return s;
}
//..............................................................................

//..............................................................................
function padLeft(s, size, char)
{
    var i;
    char = char || ' ';

    if (!isString(s))
      s = asString(s);

    var extra = size - s.length;
    for (i=0; i<extra; i++)
        s = char + s;

    return s;
}
//..............................................................................

//..............................................................................
function formatNumber(value, width, decimals)
{
    const formatString = '0,0.' + '0'.repeat(decimals);
    const s = numeral(value).format(formatString);
    return padLeft(s,width);

}
//..............................................................................

// console.log('01234567890123456789');
// console.log(formatNumber(1.23,10,8));

//..............................................................................
function titleCase(s)
{
    if (isString(s))
    {
        s = s.slice(0,1).toUpperCase() + s.slice(1).toLowerCase();
    }
    return s;
}
//..............................................................................

//..............................................................................
function camelToSnakeCase(s)
{
    return s.replace(/([A-Z])/g, function($1){return "_"+$1.toLowerCase();});
}
//..............................................................................

//..............................................................................
function camelToConstantCase(s)
{
    return camelToSnakeCase(s).toUpperCase();
}
//..............................................................................

//..............................................................................
function defaults(object, default_option)
{
    return _.defaults.apply(_,arguments);
}
//..............................................................................

//..............................................................................
function appendUrlParams(url, params, dirty)
{
    if ( typeof params !== 'object' ) return url;
    if ( !dirty ) url += '?';
    else          url += '&';

    _.each(params, function (val, key) {
        url += (key + '=' + val + '&');
    });

    // remove last ampersand
    return url = url.substring(0, url.length - 1);
}
//..............................................................................

//..............................................................................
function getFilenameForDateTime(date)
{
    var year   = date.getFullYear().toString();
    var month  = padNumber(date.getMonth  () + 1,2);
    var day    = padNumber(date.getDate   (),2);
    var hour   = padNumber(date.getHours  (),2);
    var minute = padNumber(date.getMinutes(),2);
    var second = padNumber(date.getSeconds(),2);

    return year   + '-' +
           month  + '-' +
           day    + '-' +
           hour   + '-' +
           minute + '-' +
           second;
}
//..............................................................................

//..............................................................................
function logLoaded(s)
{
    console.log('Loaded Module: ' + s);
}
//..............................................................................

//..............................................................................
function dashToCamelCase(s)
{
    return s.replace(/(\-[a-z])/g, function($1){return $1.toUpperCase().replace('-','');});
}
//..............................................................................

//..............................................................................
function camelCaseToDash(s)
{
    return s.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}
//..............................................................................

//..............................................................................
function toConstantCase(s)
{
    s = dashToCamelCase(s);
    console.log('mid:',s);
    return camelToConstantCase(s);
}
//..............................................................................

//..............................................................................
function captitalizeFirstLetter(string)
{
    return string.charAt(0).toUpperCase() + string.slice(1);
}
//..............................................................................

//..............................................................................
function underscoreToSpace(string)
{
    return string.split('_').join(' ');
}
//..............................................................................

//..............................................................................
function underscoreToDash(string)
{
    return string.split('_').join('-');
}
//..............................................................................

//..............................................................................
// From nodejs util.inherits at:
// https://github.com/joyent/node/blob/master/lib/util.js
// Use this so can be same on browser and node
function inherits(constructor, superConstructor)
{
    if (!superConstructor) return;

    constructor.super_    = superConstructor;
    constructor.prototype = Object.create
    (
        superConstructor.prototype,
        {
            constructor:
            {
                value       : constructor,
                enumerable  : false,
                writable    : true,
                configurable: true
            }
        }
    );
}
//..............................................................................

//..............................................................................
function makePartiallyAppliedFunction(sourceFunction/*, arg1, arg2, ..., argN*/)
{
    // Returns a new function declaration with the results
    // of partial application on the given arguments memorized.
    // See _.partial()
    var args = [].slice.apply(arguments);
    return _.partial.apply(null, args);
}
//..............................................................................

//..............................................................................
function makeThrottledFunction(fn, waitMs, immediate)
{
    return _.debounce(fn, waitMs, immediate);
}
//..............................................................................

//..............................................................................
function once(fn)
{
    return _.once(fn);
}
//..............................................................................

//..............................................................................
function parseUriQueryString(uri)
{
    var params = {};
    uri.replace(
        new RegExp("([^?=&]+)(=([^&]*))?", "g"),
        function($0, $1, $2, $3) { params[$1] = decodeURIComponent($3); }
    );

    return params;
}
//..............................................................................

//..............................................................................
function parseMessageTopic(topic)
{
    var parts;
    parts = topic.split('/');
    if (parts.length < 3)
    {
        console.log('Invalid message topic:',topic);
        return null;
    }
    else
    {
        //SpaceId not needed for zone but keep for topic compatibility with cloud
        var result = {};
        result.actionType = parts[0];
        result.resourceId = parts[1];
        result.recordId   = parts[2];
        if (parts.length > 3)
            result.itemId = parts[3];
        return result;
    }
}
//..............................................................................

//..............................................................................
function buildMessageTopic(spaceId, tableId, recordId)
{
    return [spaceId, tableId, recordId].join('/');
}
//..............................................................................

//..............................................................................
function doCallback(a0, a1, a2)
{
    var err;
    var data;
    var callback;
    if (arguments.length == 3 && isFunction(a2))
    {
        err      = a0;
        data     = a1;
        callback = a2;
    }
    else
    if (arguments.length == 2 && isFunction(a1))
    {
        err      = a0;
        data     = null;
        callback = a1;
    }
    else
    if (arguments.length == 1 && isFunction(a0))
    {
        err      = null;
        data     = null;
        callback = a0;
    }
    else
    {
        console.error('ERROR: doCallback for with invalid arguments:', a0, a1, a2);
        return;
    }

    if (isNodeJs)
        process.nextTick(function(){callback(err,data)});
    else
        after(0).do(function(){callback(err, data)});
}
//..............................................................................

//..............................................................................
// every(interval).do(action)
function every(interval)
{
    return {
        do : function(action)
        {
            return setInterval(action, interval);
        }
    };
}
//..............................................................................

//..............................................................................
// after(delay).do(action)
function after(delay)
{
    return {
        do : function(action)
        {
            if (!action)
            {
                console.error('ERROR: Attempt to use [after] with null function');
                return null;
            }
            return setTimeout(action, delay);
        }
    };
}
//..............................................................................

//..............................................................................
function wait(delay)
{
    return {
        then : function(action)
        {
            if (!action)
            {
                console.error('ERROR: Attempt to use [after] with null function');
                return null;
            }
            return setTimeout(action, delay);
        }
    };
}
//..............................................................................

//..............................................................................
/*
var execFn =
{
    start : function(){},
    end   : function(){},
    times : function(){},
    step  : function(){},
    until : function(){},
    while : function(){}

};
function testFunction  (){}
function actionFunction(){}

execFn.start(  1).step(+1).times(13).do(actionFunction);
execFn.start(100).step(-2).times(10).do(actionFunction);
execFn.start( 10).end(20).do(actionFunction);
execFn.until(testFunction).do(actionFunction);
execFn.while(testFunction).do(actionFunction);
execFn.until(testFunction).do(actionFunction);
*/
//..............................................................................

//..............................................................................
function addSlashToUrl(url)
{
    if  (isString(url) && url.slice(-1) != '/')
        return url + '/';
    else
        return url;
}
//..............................................................................

//..............................................................................
function removeEndSlash(s)
{
    var lastChar = s.slice(s.length-1);
    if (lastChar == '\\' || lastChar == '/' )
        s = s.slice(0, s.length-1);

    return s;
}
//..............................................................................

//..............................................................................
function normalizeSlashes(s)
{
    return s.split('\\').join('/');
}
//..............................................................................

//..............................................................................
function removeNewlinesFromEnd(s)
{
    if (!isString(s)) return s;

    while (s.charAt(s.length-1) == '\n' ||
           s.charAt(s.length-1) == '\r')
    {
        s = s.slice(0, s.length-1);
    }

    return s;
}
//..............................................................................

//..............................................................................
function parsePackageString(packageString)
{
    if (!isString(packageString))
    {
        console.error('parsePackageString.fail:', packageString);
        return {};
    }

    var mainParts = packageString.split('@');
    var result =
    {
        packageId  : null   ,
        revisionId : '*'    ,
        targetId   : 'node' ,
        kindId     : 'debug'
    };

    if (mainParts.length > 0)
    {
        result.packageId = mainParts[0];
        if (mainParts.length > 1)
        {
            var version = mainParts[1] || null;
            if (version)
            {
                var versionParts = version.split('-');
                //console.log('versionParts:',versionParts);

                if (versionParts.length > 0) result.revisionId = versionParts[0];
                if (versionParts.length > 1) result.targetId   = versionParts[1];
                if (versionParts.length > 2) result.kindId     = versionParts[2];
            }
        }
    }

    //console.log('parsePackageString:',packageString,result);
    return result;
}
//..............................................................................

//..............................................................................
function btoa(s)
{
    var buffer;

    if (isBuffer(s))
        buffer = s;
    else
        buffer = Buffer.from(s.toString(), 'binary');

    return buffer.toString('base64');
}
//..............................................................................

//..............................................................................
function getMemoryUsageBytes()
{
    if (getMemoryUsage)
        return getMemoryUsage();
    else
        return 0;
}
//..............................................................................

//..............................................................................
function getMemoryUsageKB()
{
    return getMemoryUsageBytes()/1024;
}
//..............................................................................

//..............................................................................
function getMemoryUsageMB()
{
    return getMemoryUsageKB()/1024;
}
//..............................................................................

//..............................................................................
function lockObject(o)
{
    // From: https://github.com/substack/deep-freeze
    Object.freeze(o);

    Object.getOwnPropertyNames(o).forEach(function (prop)
    {
        // TODO: This throws an Error in IE 11. Not strict compliant in IE's view - Leo
        if (   o.hasOwnProperty(prop)
            && o[prop] !== null
            && (typeof o[prop] === "object" || typeof o[prop] === "function")
            && !Object.isFrozen(o[prop]))
        {
            lockObject(o[prop]);
        }
    });

    return o;
}
//..............................................................................

//..............................................................................
function round1(n)
{
    return Math.round(n);
}
//..............................................................................

//..............................................................................
function roundN(n, places=0)
{
    if (places == 0)
        return round1(n);

    var p = Math.pow(10, places);
    return round1(n*p) / p;
}
//..............................................................................


//..............................................................................
function round10(n)
{
    return round1(n*10) / 10;
}
//..............................................................................

//..............................................................................
function round100(n)
{
    return round1(n*100) / 100;
}
//..............................................................................

//..............................................................................
function round1000(n)
{
    return round1(n*1000) / 1000;
}
//..............................................................................

//..............................................................................
// From: https://github.com/sindresorhus/pretty-bytes
//..............................................................................
function bytesAsString(num)
{
    if (!isNumeric(num)) return '0 B';

    var exponent;
    var unit;
    var neg   = num < 0;
    var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    if (neg)
        num = -num;

    if (num < 1)
        return (neg ? '-' : '') + num + ' B';

    exponent = Math.min(Math.floor(Math.log(num) / Math.log(1000)), units.length - 1);
    num      = Number((num / Math.pow(1000, exponent)).toFixed(2));
    unit     = units[exponent];

    return (neg ? '-' : '') + num + ' ' + unit;
}
//..............................................................................

//..............................................................................
function stringifyStrong(a,b,c)
{
    return CircularJSON.stringify(a,b,c);
 // return JSON.stringify(a,b,c);
}
//..............................................................................

//..............................................................................
function convertTemplate(templateBody, params)
{
    if (!templateBody)
         return templateBody;

    _.templateSettings =
    {
      interpolate: /\{\{(.+?)\}\}/g
    };

    var result = templateBody;
    try
    {
        var template = _.template(templateBody);
        result   = template(params);
    }
    catch(e)
    {
        console.error('ERROR: convertTemplate failed: body[' + templateBody + '] params:', params);
    }
    return result;
}
//..............................................................................

//..............................................................................
function getCanonicalJson(obj)
{
    return canonicalJson(obj);
}
//..............................................................................

//..............................................................................
cxq.exit              = exit;
cxq.messageSourceKind = messageSourceKind;
//..............................................................................

//..............................................................................
function abort(s='Done')
{
    console.log('ABORTING:',s);
    if (isNodeJs)
        process.exit();
    else
        clearAllTimers();
}
//..............................................................................

//..............................................................................
function shutdown(s='Done')
{
    console.log('SHUTDOWN:',s);
    if (isNodeJs)
        process.exit();
    else
        clearAllTimers();
}
//..............................................................................

addProperties(util,
{
    abort,
    shutdown,
    minInt : Number.MIN_SAFE_INTEGER,
    maxInt : Number.MAX_SAFE_INTEGER,
    CRLF   : '\r\n',
    every,
    after,
    wait,
    addSlashToUrl,
    removeEndSlash,
    removeNewlinesFromEnd,
    normalizeSlashes,

    renameProperty,
    updateValidProperty,
    addProperties,
    mergeProperties,
    addCaptionsAndDescriptions,
    makeFutureException,

    stringsEqual,
    replaceAll,
    insertString,
    getObjectFromString,
    objectToQueryString,
    queryStringToObject,
    asString,
    itemsIdentical,
    itemsNotIdentical,
    getByteAsHex,
    padNumber,
    padRight,
    padLeft,
    formatNumber,
    titleCase,
    camelToSnakeCase,
    camelToConstantCase,
    toConstantCase,
    defaults,
    appendUrlParams,
    getFilenameForDateTime,
    logLoaded,
    dashToCamelCase,
    camelCaseToDash,
    captitalizeFirstLetter,
    underscoreToSpace,
    underscoreToDash,
    inherits,
    makePartiallyAppliedFunction,
    makeThrottledFunction,
    once,
    parseUriQueryString,
    parseMessageTopic,
    buildMessageTopic,
    doCallback,
    parsePackageString,
    btoa,
    getMemoryUsageKB,
    getMemoryUsageMB,
    lockObject,
    round1,
    round10,
    round100,
    round1000,
    roundN,
    bytesAsString,
    stringifyStrong,
    convertTemplate,
    getCanonicalJson,
    clearAllTimers,
});

