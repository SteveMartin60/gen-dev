var tinyColor   = require('tinycolor2');
var colorspaces = require('colorspaces');
var serialize   = require('./color-serialization');

//..............................................................................
const {logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    isString,
    isObject,
    isDefined,
    isFunction,
    isInteger
} = util;
//..............................................................................

//..............................................................................
const RANDOM = 'random';
const CIEXYZ_MAX_X = 0.95047;
const CIEXYZ_MAX_Y = 1;
const CIEXYZ_MAX_Z = 1.08883;
//..............................................................................

//..............................................................................
var log = logger('color');
log.setLevel('info');
//..............................................................................

//..............................................................................
function percentToInt8(percent)
{
    return parseInt(percent / 100 * 255);
}
//..............................................................................

//..............................................................................
function int8ToPercent(int8)
{
    return int8 / 255 * 100;
}
//..............................................................................

//..............................................................................
function is_Int24Color(color)
{
    return (isInteger(color) && color >= 0x000000 && color <= 0xFFFFFF);
}
//..............................................................................

//..............................................................................
function is_CIEXYZ_String(str)
{
    // "CIEXYZ(0,0.33,3993)"
    return (isString(str) && str.slice(0,7) == "CIEXYZ(" && str.slice(-1) == ")");
}
//..............................................................................

//..............................................................................
function is_CIEXYZ(obj)
{
    // {x:0, y:0, z:0}
    return (isObject(obj) && isDefined(obj.x) && isDefined(obj.y) && isDefined(obj.z));
}
//..............................................................................

//..............................................................................
function is_mesh_color(obj)
{
    // Duck typing - https://en.wikipedia.org/wiki/Duck_typing
    var isMeshColor =
    (
        isObject  (obj                ) &&
        isFunction(obj.toRgb          ) &&
        isFunction(obj.toHsv          ) &&
        isFunction(obj.toCIEXYZ       ) &&
        isFunction(obj.toString_CIEXYZ) &&
        isFunction(obj.toInt24        )
    );

    return isMeshColor;
}
//..............................................................................

//..............................................................................
function makeTinyColor(color)
{
    if (color == RANDOM)
        color = tinyColor.random();
    else
    if (is_mesh_color(color))
        color = color.toRgb();
    else
    if (is_Int24Color(color))
        color = serialize.int24.toRgb(color);
    else
    if (is_CIEXYZ_String(color))
        color = serialize.CIEXYZ_String.toHex(color);
    else
    if (is_CIEXYZ(color))
        color = serialize.CIEXYZ.toHex(color);

    return tinyColor(color);
}
//..............................................................................

//..............................................................................
function makeGetterSetter(getFn, setFn)
{
    function getterSetter(value)
    {
        return isDefined(value) ? setFn(value) : getFn();
    }

    return getterSetter;
}
//..............................................................................

//..............................................................................
function makeColor(initialColor)
{
    var color = makeTinyColor(initialColor);

    // Query methods (cannot be chained)

    //..........................................................................
    function equals(targetColor)
    {
        targetColor = makeColor(targetColor);
        return (toHex() === targetColor.toHex());
    }
    //..........................................................................
    function isValid()
    {
        // Return a boolean indicating whether the color was successfully parsed
        return color.isValid();
    }
    //..........................................................................
    function w3_brightness()
    {
        // See http://http//www.w3.org/TR/AERT#color-contrast
        // Returns brighness as a percent
        return color.getBrightness() / 255 * 100;
    }
    //..........................................................................
    function w3_isLight()
    {
        return color.isLight();
    }
    //..........................................................................
    function w3_isDark()
    {
        return color.isDark();
    }
    //..........................................................................

    // Serialization (cannot be chained)

    //..........................................................................
    function toRgb()
    {
        // { r: 255, g: 0, b: 0, a: 1 }
        return color.toRgb();
    }
    //..........................................................................
    function toHsv()
    {
        // { h: 0, s: 1, v: 1, a: 1 }
        return color.toHsv();
    }
    //..........................................................................
    function toHsl()
    {
        // { h: 0, s: 1, l: 0.5, a: 1 }
        return color.toHsl();
    }
    //..........................................................................
    function toCIEXYZ()
    {
        return serialize.hex.toCIEXYZ(toHex());
    }
    //..........................................................................
    function toString()
    {
        // "rgba(255, 0, 0, 0.5)"
        return color.toString('rgb');
    }
    //..........................................................................
    function toHex()
    {
        // "#FF00FF"
        return color.toHexString();
    }
    //..........................................................................
    function toString_CIEXYZ()
    {
        // "CIE_XYZ(255, 0, 0, 0.5)"
        var {x,y,z} = toCIEXYZ();
        return 'CIEXYZ(' + x + ',' + y + ',' + z + ')';
    }
    //..........................................................................
    function toInt24()
    {
        // A number between 0 and 16581375
        return serialize.hex.toInt24(toHex());
    }
    //..........................................................................

    // Channel adjustment

    //..........................................................................
    function getAlphaPercent()
    {
        // Returns the alpha value of a color, from 0-100.
        return color.getAlpha() * 100;
    }
    //..........................................................................
    function setAlphaPercent(percent=10)
    {
        // Set the alpha value of a color. Accepted range is in between 0 and 100.
        color.setAlpha(percent / 100);
        return publicScope;
    }
    //..........................................................................
    function getRedPercent()
    {
        return int8ToPercent(getRed8());
    }
    //..........................................................................
    function setRedPercent(percent=0)
    {
        var rgb = toRgb();
        rgb.r   = percentToInt8(percent);
        color   = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getGreenPercent()
    {
        return int8ToPercent(getGreen8());
    }
    //..........................................................................
    function setGreenPercent(percent=0)
    {
        var rgb = toRgb();
        rgb.g   = percentToInt8(percent);
        color   = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getBluePercent()
    {
        return int8ToPercent(getBlue8());
    }
    //..........................................................................
    function setBluePercent(percent=0)
    {
        var rgb = toRgb();
        rgb.b   = percentToInt8(percent);
        color   = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getRed8()
    {
        return toRgb().r;
    }
    //..........................................................................
    function setRed8(int8=0)
    {
        var rgb = toRgb();
        rgb.r   = int8;
        color   = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getGreen8()
    {
        return toRgb().g;
    }
    //..........................................................................
    function setGreen8(int8=0)
    {
        var rgb = toRgb();
        rgb.g   = int8;
        color   = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getBlue8()
    {
        return toRgb().b;
    }
    //..........................................................................
    function setBlue8(int8=0)
    {
        var rgb = toRgb();
        rgb.b   = int8;
        color   = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getAlpha()
    {
        return toRgb().a;
    }
    //..........................................................................
    function setAlpha(alpha)
    {
        // alpha = value between 0 and 1
        var rgb = toRgb();
        rgb.a   = alpha;
        color   = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getCIEXYZ_xPercent()
    {
        return toCIEXYZ().x / CIEXYZ_MAX_X * 100;
    }
    //..........................................................................
    function setCIEXYZ_xPercent(percent=0)
    {
        var xyz    = toCIEXYZ();
        xyz.x      = percent / 100 * CIEXYZ_MAX_X;
        var rgb    = serialize.CIEXYZ.toRgb(xyz);
        rgb.a      = getAlpha();

        color = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getCIEXYZ_yPercent()
    {
        return toCIEXYZ().y / 1 * 100;
    }
    //..........................................................................
    function setCIEXYZ_yPercent(percent=0)
    {
        var xyz    = toCIEXYZ();
        xyz.y      = percent / 100 * CIEXYZ_MAX_Y;
        var rgb    = serialize.CIEXYZ.toRgb(xyz);
        rgb.a      = getAlpha();

        color = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................
    function getCIEXYZ_zPercent()
    {
        return toCIEXYZ().z / CIEXYZ_MAX_Z * 100;
    }
    //..........................................................................
    function setCIEXYZ_zPercent(percent=0)
    {
        var xyz    = toCIEXYZ();
        xyz.z      = percent / 100 * CIEXYZ_MAX_Z;
        var rgb    = serialize.CIEXYZ.toRgb(cieXyz);
        rgb.a      = getAlpha();

        color = makeTinyColor(rgb);
        return publicScope;
    }
    //..........................................................................

    // Color Manipulation

    //..........................................................................
    function lighten(percent=10)
    {
        // Increase Luma Channel
        color.lighten(percent);
        return publicScope;
    }
    //..........................................................................
    function darken(percent=10)
    {
        // Decrease Luma Channel
        color.darken(percent);
        return publicScope;
    }
    //..........................................................................
    function desaturate(percent=10)
    {
        color.desaturate(percent);
        return publicScope;
    }
    //..........................................................................
    function saturate(percent=10)
    {
        color.saturate(percent);
        return publicScope;
    }
    //..........................................................................
    function spin(degrees=10)
    {
        color.spin(degrees);
        return publicScope;
    }
    //..........................................................................
    function mix(toColor, percent=10)
    {
        var srcColor  = toRgb();
        var destColor = makeColor(toColor).toRgb();
        color   = tinyColor.mix(srcColor, destColor, percent);
        return publicScope;
    }
    //..........................................................................
    function addWhite(percent=10)
    {
        mix('white', percent);
        return publicScope;
    }
    //..........................................................................
    function addBlack(percent=10)
    {
        mix('black', percent)
        return publicScope;
    }
    //..........................................................................
    function overlay(topColor)
    {
        function overlayChannel(top, bottom)
        {
            if (bottom <= 128)
                return (2 * top * bottom / 255);
            else
                return (255 - 2 * (255 - top) * (255 - bottom) / 255);
        }

        var topRgb    = makeColor(topColor).toRgb();
        var bottomRgb = toRgb();

        var rgb =
        {
            r: overlayChannel(topRgb.r, bottomRgb.r),
            g: overlayChannel(topRgb.g, bottomRgb.g),
            b: overlayChannel(topRgb.b, bottomRgb.b),
            a: bottomRgb.a
        }

        color = makeTinyColor(rgb)

        return publicScope;
    }
    //..........................................................................
    function randomize()
    {
        color = tinyColor.random();
        return publicScope;
    }
    //..........................................................................

    //..........................................................................
    const publicScope = Object.create(null);
    //..........................................................................

    addProperties
    (
        publicScope,
        {
            // Queries
            equals,
            isValid,
            w3_brightness,
            w3_isLight,
            w3_isDark,
            // Serialization
            toRgb,
            toHsv,
            toHsl,
            toCIEXYZ,
            toString,
            toString_CIEXYZ,
            toHex,
            toInt24,
            // Channel Adjustment
            red             : makeGetterSetter(getRed8           , setRed8           ),
            green           : makeGetterSetter(getGreen8         , setGreen8         ),
            blue            : makeGetterSetter(getBlue8          , setBlue8          ),
            alpha           : makeGetterSetter(getAlpha          , setAlpha          ),
            redPercent      : makeGetterSetter(getRedPercent     , setRedPercent     ),
            greenPercent    : makeGetterSetter(getGreenPercent   , setGreenPercent   ),
            bluePercent     : makeGetterSetter(getBluePercent    , setBluePercent    ),
            alphaPercent    : makeGetterSetter(getAlphaPercent   , setAlphaPercent   ),
            CIEXYZ_xPercent : makeGetterSetter(getCIEXYZ_xPercent, setCIEXYZ_xPercent),
            CIEXYZ_yPercent : makeGetterSetter(getCIEXYZ_yPercent, setCIEXYZ_yPercent),
            CIEXYZ_zPercent : makeGetterSetter(getCIEXYZ_zPercent, setCIEXYZ_zPercent),
            // Color Manipulation
            lighten,
            darken,
            desaturate,
            saturate,
            spin,
            mix,
            overlay,
            addWhite,
            addBlack,
            randomize,
        }
    );

    return publicScope;
}
//..............................................................................

//..............................................................................
function isColor(color)
{
    return makeColor(color).isValid();
}
//..............................................................................

addProperties(util, {makeColor, isColor});



