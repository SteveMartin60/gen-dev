const crypto = require('crypto');
//..............................................................................
const {fs, logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    randomBase32,
    processListParallel,
    isObject,
    getObjectFromString,
    meshNow,
    addHours,
    stringToSha256MultiHash,
} = util;
//..............................................................................

//..............................................................................
const log = logger('crypter');
log.setLevel('info');
//..............................................................................

//..............................................................................
const defaultIterations  = 10000;
const defaultAlgorithm   = 'aes-256-ctr';
//..............................................................................

//..............................................................................
function generateHash(password, salt, callback)
{
    //salt and password are strings
    //log.debug('generateHash.password   :',password  );
    //log.debug('generateHash.salt       :',salt      );

    var keyLength = 64;
    //..........................................................................
    function callback_Hash(err, derivedKey)
    {
        if (err)
        {
             callback(err);
        }
        else
        {
            var res = ['pbkdf2', defaultIterations, derivedKey.toString('hex'), salt].join('$');
            callback(null, res);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    crypto.pbkdf2(password, Buffer.from(salt, 'utf8'), defaultIterations, keyLength, 'sha1', callback_Hash);
}
//..............................................................................

//..............................................................................
function hashPassword(password, callback)
{
    console.log('hashingPassword:',password);
    var salt = randomBase32(32);//10 + Math.random()*40);
    //..........................................................................
    function callback_Hash(err, key)
    {
        if (err)
            callback(err);
        else
            callback(null, key);
    }
    ////////////////////////////////////////////////////////////////////////////
    if (password)
        generateHash(password, salt, callback_Hash);
    else
        callback('No password provided')
}
//..............................................................................

//..............................................................................
function hashKeyList(keyList, record, mainCallback)
{
    function processKey(id, callback)
    {
        var originalKey = record[id];
        if (originalKey)
        {
            hashPassword(originalKey, function(err, hashedKey)
            {
                if (!err)
                {
                    record[id] = hashedKey; //Replace original with hash value

                    //..........................................................
                    //Enable this line to store pre-hash value for debug only
                    //..........................................................
                    //record[id + '_display'] = originalKey;
                }
                callback(err);
            });
        }
        else
        {
            callback(null);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    processListParallel(keyList, processKey, function(err)
    {
        mainCallback(err, record);
    });
}
//..............................................................................

//..............................................................................
function verifyPasswordAgainst(password, hashedPassword, callback)
{
    function callback_Hash(err, generatedHash)
    {
        if (err)
            callback(err);
        else
            callback(null, generatedHash === hashedPassword);
    }
    ////////////////////////////////////////////////////////////////////////////
    if (hashedPassword && password)
    {
        var parts      = hashedPassword.split('$');
        var algorithm  = parts[0];
        var iterations = parts[1];
        var key        = parts[2];
        var salt       = parts[3];

      //log.debug('verifyPasswordAgainst.algorithm  :',algorithm );
      //log.debug('verifyPasswordAgainst.iterations :',iterations);
      //log.debug('verifyPasswordAgainst.key        :',key       );
      //log.debug('verifyPasswordAgainst.salt       :',salt      );

             if (parts.length !== 4 || !key || !salt)         callback('Bad Hash Format');
        else if (algorithm  !== 'pbkdf2' )                    callback('Wrong algorithm');
        else if (iterations !== defaultIterations.toString()) callback('Wrong Iterations');
        else
        {
             generateHash(password, salt, callback_Hash);
        }
    }
    else
    {
        callback(null, false);
    }
}
//..............................................................................

//..............................................................................
function testPasswords()
{
    var unHashedPassword = randomBase32(32);
    var hashedPassword;
    function callback_CheckPassword(err, result)
    {
        if (err)
            log.error('testPasswords - failed to check err:',err, 'password: ' + unHashedPassword, 'against:'+hashedPassword);
        else
            log.debug('testPasswords - result:',result, 'password: ' + unHashedPassword, 'against:'+hashedPassword);
    }
    //..........................................................................
    function callback_HashPassword(err, data)
    {
        if (err)
        {
            log.error('testPasswords - failed to hash password: ' + unHashedPassword);
        }
        else
        {
            hashedPassword = data;
            verifyPasswordAgainst(unHashedPassword, hashedPassword, callback_CheckPassword)
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    hashPassword(unHashedPassword, callback_HashPassword);
}
//..............................................................................

//..............................................................................
//testPasswords();
//..............................................................................

//..............................................................................
function encrypt(text, password, algorithm)
{
    algorithm = algorithm || defaultAlgorithm;
    var result;
    try
    {
        var cipher  = crypto.createCipher(algorithm,password);
        result = cipher.update(text,'utf8','hex');
        result += cipher.final('hex');
    }
    catch(e)
    {
        result = null;
        console.log('Exception in crypto.cipher:',text,password);
    }
    return result;
}
//..............................................................................

//..............................................................................
function decrypt(text, password, algorithm)
{
    algorithm = algorithm || defaultAlgorithm;
    var result;
    try
    {
        var decipher = crypto.createDecipher(algorithm,password);
        result = decipher.update(text,'hex','utf8');
        result += decipher.final('utf8');
    }
    catch(e)
    {
        result = null;
        console.log('Exception in crypto.decipher:',text,password);
    }
    return result;
}
//..............................................................................

//..............................................................................
function encryptObject(payload, password, algorithm)
{
    if (isObject(payload))
    {
        //Add some extra useful info - these don't make things any more secure
        var randomExtraLength = 10 + Math.random()*40;
        var obj = {};
        obj.__extraStuff = randomBase32(randomExtraLength);
        obj.__checksum   = meshHashHex(JSON.stringify(payload));
        obj.__now        = meshNow();
        obj.payload      = payload;

        return encrypt(JSON.stringify(obj), password, algorithm);
    }
    else
    {
        return null;
    }
}
//..............................................................................

//..............................................................................
function decryptObject(text, password, algorithm)
{
    var result = null;
    var s   = decrypt(text, password, algorithm);
    var obj = getObjectFromString(s);
    if (obj && isObject(obj))
    {
        //log.debug('objectExtra:',obj.__extraStuff);
        //log.debug('objectExtra:',obj.__now);
        var checksumFromObject = obj.__checksum;
        delete obj.__checksum;
        delete obj.__extraStuff;
        delete obj.__now;

        if (checksumFromObject)
        {
            //If checksum was added then should check it
            s = JSON.stringify(obj.payload);
            var calculatedCheckSum = meshHashHex(s);
            log.debug('objectCheckSums:',calculatedCheckSum,checksumFromObject);
            if (calculatedCheckSum == checksumFromObject)
                result = obj.payload;
        }
        else
        {
            result = obj.payload;
        }
    }
    return result;
}
//..............................................................................

//..............................................................................
function testCrypter()
{
    var startTime = meshNow();
    var endTime   = addHours(startTime, 24);
    var testKey   = randomBase32(10);
    var testObject =
    {
        id          : 'device-123',
        device_model: 'device-model-123',
        hardware_id : '12345678',
        token       :
        {
            person       : '0001',
            organization : '0000',
            time_start   : startTime,
            time_end     : endTime
        }
    };

    log.debug('testEncryptDecrypt key:', testKey);

    var encrytedString = encrypt('Testing Crypter ' + randomBase32(32),testKey);
    log.debug('testEncryptDecrypt:', decrypt(encrytedString, testKey), encrytedString);

    var encryptedObject = encryptObject(testObject     , testKey);
    var decryptedObject = decryptObject(encryptedObject, testKey);

    log.debug('testEncryptDecryptObject1:', testObject     );
    log.debug('testEncryptDecryptObject2:', decryptedObject);

    var s1 = JSON.stringify(testObject);
    var s2 = JSON.stringify(decryptedObject);

    log.debug('testEncryptDecryptObject-Result:', (s1 === s2));
}
//..............................................................................

//..............................................................................
function getRandomBytes(size=8, callback)
{
    crypto.randomBytes(size, function(err, buf)
    {
        if (err)
        {
            callback(err)
        }
        else
        {
            var result = [];
            for (var value of buf.values())
            {
                result.push(value);
            }
            callback(null,result);
        }
    });
}
//..............................................................................

//..............................................................................
function getRandomBytesHex(size=8, callback)
{
    if (callback)
    {
        crypto.randomBytes(size, function(err, buf)
        {
            if (err)
                callback(err);
            else
                callback(null,buf.toString('hex'));
        });
    }
    else
    {
        return crypto.randomBytes(size).toString('hex');
    }
}
//..............................................................................

//..............................................................................
function getRandomBytesBuffer(size=8, callback)
{
    return crypto.randomBytes(size, callback);
}
//..............................................................................

//..............................................................................
function encryptFile(sourceFilePath, targetFilePath, algorithm, password, callback)
{
    var reader  = fs    .createReadStream (sourceFilePath);
    var encrypt = crypto.createCipher     (algorithm, password);
    var writer  = fs    .createWriteStream(targetFilePath);

    reader .on('error', callback);
    encrypt.on('error', callback);
    writer .on('error', callback);

    writer.on('finish', callback);

    reader.pipe(encrypt).pipe(writer);
}
//..............................................................................

//..............................................................................
function decryptFile(sourceFilePath, targetFilePath, algorithm, password, callback)
{
    var reader  = fs    .createReadStream (sourceFilePath);
    var decrypt = crypto.createDecipher   (algorithm, password);
    var writer  = fs    .createWriteStream(targetFilePath);

    reader .on('error', callback);
    decrypt.on('error', callback);
    writer .on('error', callback);

    writer.on('finish', callback);
    reader.pipe(decrypt).pipe(writer);
}
//..............................................................................

// //..............................................................................
// function getRandomId(callback)
// {
//     const bytes = crypto.randomBytes(5, function(err, bytes)
//     {
//         if (err)
//         {
//             callback(err);
//         }
//         else
//         {
//             var result = base32.encode(bytes, true);
//             result = result.toLowerCase();
//             callback(null, result);
//         }
//     });
//
// }
// //..............................................................................
//
// //..............................................................................
// function getRandomIdSync()
// {
//     const bytes = crypto.randomBytes(5);
//     var result = base32.encode(bytes, true);
//     result = result.toLowerCase();
//     return result;
// }
// //..............................................................................

//testCrypter();

addProperties(util,
{
    encryptObject,
    decryptObject,
    hashPassword,
    hashKeyList,
    encrypt,
    decrypt,
    verifyPasswordAgainst,

    getRandomBytes,
    getRandomBytesHex,
    getRandomBytesBuffer,
    encryptFile,
    decryptFile,
});
