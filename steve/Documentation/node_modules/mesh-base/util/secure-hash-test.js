//..............................................................................
// Test runs in node.js and compares browser code, assuming browser is same
// V8 engine as used in node.js
//..............................................................................
const crypto = require('crypto');
require('../top-use');
const fn_node    = require('./secure-hash-node'   );
const fn_browser = require('./secure-hash-browser');

//..............................................................................
const {util, fs} = cxq;
//..............................................................................

//..............................................................................
const
{
    meshNow,
    meshNowMs,
    round1,
    jsonToSha256HashId,
    encodeSha256MultiHash,
    jsonToSha256MultiHash,
    decodeMultiHash,
    forceDirectorySync,
    getCanonicalJson
} = util;
//..............................................................................

//..............................................................................
const testDatax = {data:crypto.randomBytes(1000).toString('hex')};
const count    = 5000;
//..............................................................................

const testData     = {data:"123"};
const testFileDir  = '/a/hash-tests';
const testFilePath = [testFileDir, 'test-data.txt'].join('/');
const testFileData = Buffer.from(getCanonicalJson(testData));

//..............................................................................
forceDirectorySync(testFileDir);
fs.writeFileSync(testFilePath, testFileData);

//..............................................................................
function testHash(functions, caption)
{
    var result ='';
    console.log('----------------------------------------------------------');
    console.log('START:jsonToSha256:', caption);
    console.log('----------------------------------------------------------');
    
    const start = meshNowMs();
    for (var i=0; i<count; i++)
    {
        result += functions.jsonToSha256Hex({testData,index:i});
    }

    const elapsed = meshNowMs() - start;
    console.log('Count:'+count, 'elapsed:'+elapsed,'ms','  Average:', round1((elapsed/count)*1000), 'us');
    console.log('----------------------------------------------------------');
    console.log();
    return result;
}
//..............................................................................

//..............................................................................
const hash_Node        = fn_node   .jsonToSha256Hex(testData);
const hash_Browser     = fn_browser.jsonToSha256Hex(testData);
const encodedMultiHash = jsonToSha256MultiHash(testData);
const decodedMultiHash = decodeMultiHash(encodedMultiHash);
//..............................................................................

console.log('----------------------------------------------------------');
console.log('START TESTS:', meshNow());
console.log('----------------------------------------------------------');
console.log('Test-Record:', testData.data.length, testData);
console.log('----------------------------------------------------------');
console.log();
console.log('----------------------------------------------------------');
console.log('hash_Node   :',hash_Node   );
console.log('hash_Browser:',hash_Browser);
console.log('----------------------------------------------------------');
console.log('Matching Hash:', hash_Node === hash_Browser);
console.log('----------------------------------------------------------');
console.log();
console.log('----------------------------------------------------------');
console.log('encodedMultiHash  :', encodedMultiHash);
console.log('decodedMultiHash  :', decodedMultiHash);
console.log('----------------------------------------------------------');
console.log('Matching MultiHash:', hash_Node === decodedMultiHash);
console.log('----------------------------------------------------------');
console.log();

//..............................................................................
const res_Node    = testHash(fn_node   , 'Node'   );
const res_Browser = testHash(fn_browser, 'Browser');
//..............................................................................

console.log('----------------------------------------------------------');
console.log('Matching Hash Sum :', res_Node  === res_Browser ,'Data Length:',res_Node.length);
console.log('----------------------------------------------------------');
console.log();

const hashId = jsonToSha256HashId(testData);
console.log('----------------------------------------------------------');
console.log('hashId  :', hashId);
console.log('----------------------------------------------------------');
console.log();

fn_node.fileToSha256Hex(testFilePath, function(err, hash)
{
    console.log('----------------------------------------------------------');        
    console.log('fn_node.fileToSha256Hex (filepath)', testFilePath);        
    console.log('----------------------------------------------------------');            
    
    if (err)
    {        
        console.log('ERROR: fn_node.fileToSha256Hex:', err);        
    }
    else
    {               
        console.log('hash        :', hash);
        console.log('hashId      :', encodeSha256MultiHash(hash));
        console.log('Hashes match:', ((hash_Node == hash) && (hash_Browser == hash)));
    }

    console.log('----------------------------------------------------------');
    console.log();
});

fn_node.fileToSha256Hex(testFileData, function(err, hash)
{
    console.log('----------------------------------------------------------');        
    console.log('fn_node.fileToSha256Hex (buffer)', testFileData);        
    console.log('----------------------------------------------------------');
    
    if (err)
    {        
        console.log('ERROR: fn_node.fileToSha256Hex:', err);        
    }
    else
    {
        console.log('hash        :',hash        );
        console.log('hashId      :', encodeSha256MultiHash(hash));
        console.log('Hashes match:', ((hash_Node == hash) && (hash_Browser == hash)));
    }

    console.log('----------------------------------------------------------');
    console.log();
});