const walkdir = require('walkdir'   );
const mkdirp  = require('mkdirp'    );
const fs      = require('fs-extra'  );
fs.watch      = require('node-watch');

//..............................................................................
const {moment, path, util, pathDebug} = cxq;
//..............................................................................

//..............................................................................
const
{
    stringifyStrong,
    addProperties,
    addToNameSpace,
    isDefined,
    isString,
    padRight,
    getObjectFromString,
    processList,
    randomBase32,
    meshNowMs,
    propertyCount,
    processListSerial,
    normalizeSlashes,
} = util;
//..............................................................................

//..............................................................................
function forceDirectory(filepath, callback)
{
    mkdirp(filepath, function (err)
    {
        if (err)
            console.error(err);
        else
        {
            //console.log('forceDirectory:' + filepath, 'ext[' + path.extname(filepath) + ']');
        }

        if (callback) callback(err);
    });
}
//..............................................................................

//..............................................................................
function forceDirectorySync(filepath)
{
    try
    {
        return mkdirp.sync(filepath);
    }
    catch (err1)
    {
        console.log('Exception on forceDirectorySync', filepath, 'ext[' + path.extname(filepath) + ']');
    }
}
//..............................................................................

//..............................................................................
function saveTextToFile_DebugSync(s, name)
{
    var f = path.join(pathDebug, name + '.json');
    forceDirectorySync(path.dirname(f));
    fs.writeFileSync(f, s);
}
//..............................................................................

//..............................................................................
function saveDataToJSON_DebugSync(data, name)
{
    var s = JSON.stringify(data, null, 2);
    saveTextToFile_DebugSync(s, name);
}
//..............................................................................

//..............................................................................
function loadJsonSync(filePath)
{
    if (!fs.existsSync(filePath))
    {
        console.error('ERROR: loadJsonSync missing file:',filePath);

        return null;
    }

    try
    {
        var s = fs.readFileSync(filePath, 'utf8');
        //fs.writeFileSync(filePath+ '.save.json',s);
        return JSON.parse(s);
    }
    catch(e)
    {
        console.error('getObjectFromString - invalid JSON format: type:',typeof s, 'data:',s, e.stack);
        //console.trace();
        return null;
    }
}
//..............................................................................

//..............................................................................
function saveJsonSync(filePath, data)
{
    var s = '';
    try
    {
        try
        {
            s = stringifyStrong(data, null, 2);
        }
        catch(e)
        {
            console.error('ERROR: saveJsonSync - Failed to convert object:', filePath, err, e, data);
        }

        try
        {
            forceDirectorySync(path.dirname(filePath));
            fs.writeFileSync(filePath, s, 'utf8');
        }
        catch(e)
        {
            console.error('ERROR: saveJsonSync - Failed to save object:', filePath, 'err:',e, data);
        }
    }
    catch(e)
    {
        console.error('ERROR: saveJsonSync - Failed to save file to:', filePath, data);
    }
}
//..............................................................................

//..............................................................................
function loadJsonFileSync(filepath)
{
    var data = {};
    if (fs.existsSync(filepath))
    {
        try
        {
            //delete require.cache[require.resolve(filepath)];


            data.contents = loadJsonSync(filepath);//require(filepath);
            var stats = fs.statSync(filepath);
            data.atime = stats.atime;
            data.mtime = stats.mtime;
            data.ctime = stats.ctime;
        }
        catch(e)
        {
            console.log('Error:', e, typeof(e), JSON.stringify(e.message));
            data.errorName    = e.name;
            data.errorMessage = e.message;
        }
    }
    else
    {
        data.errorName    = 'File Not Found';
        data.errorMessage = 'Cannot ' + filepath + ' does not exist';
    }
    return data;
}
//..............................................................................

//..............................................................................
function convertNodeFileInfo(info)
{
    return {
        accessed_at : info.atime,
        status_at   : info.ctime, //When the status was last changed
        updated_at  : info.mtime, //When the file contents was last change
        created_at  : info.birthtime,
        size        : info.size
    };
}
//..............................................................................

//..............................................................................
function getFileInfo(filePath, callback)
{
    if (callback)
    {
        fs.stat(filePath, function(err, stats)
        {
            if (err)
                callback(err);
            else
                callback(null, convertNodeFileInfo(stats));
        });
    }
    else
    {
        try
        {
            const stat = fs.statSync(filePath);
            return convertNodeFileInfo(stat);
        }
        catch (err)
        {
            console.warn('WARN: getFileInfo:Unknown Path:',filePath,err);
            return null;
        }
    }
}
//..............................................................................

//..............................................................................
function fileInfoChanged(stats1, stats2)
{
    return (
        (stats1.accessed_at.getTime() != stats2.accessed_at.getTime()) ||
        (stats1.status_at  .getTime() != stats2.status_at  .getTime()) ||
        (stats1.updated_at .getTime() != stats2.updated_at .getTime()) ||
        (stats1.created_at .getTime() != stats2.created_at .getTime())
    );
}
//..............................................................................

//..............................................................................
function readJsonFile(filepath, callback)
{
    function callback_Read(err, fileContents)
    {
        if (err)
        {
            console.log('failed to read JSON file from path:', filepath, err.stack);
            callback(err);
        }
        else
        {
            callback(null, getObjectFromString(fileContents));
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    fs.readFile(filepath, callback_Read);
}
//..............................................................................

//..............................................................................
function writeJsonFile(filepath, data, callback)
{
    function callback_write(err)
    {
        if (err)
        {
            console.log('failed to write JSON file to path:', filepath, err.stack);
            callback(err);
        }
        else
        {
            callback(null);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    fs.writeFile(filepath, JSON.stringify(data,null,4), callback_write);
}
//..............................................................................
function readJsonFileSet(folder, filenames, mainCallback)
{
    var results = {};
    var errors  = {};
    //..........................................................................
    function loadSingle(filename, callback)
    {
        var filePath = filename;
        if (folder)
            filePath = path.join(folder, filename);

        if (!path.extname(filePath))
            filePath += '.json';

        readJsonFile(filePath, function(err, data)
        {
            //console.log('LoadSingle:'+filePath, err, data);
            if (err)
            {
                console.error('Failed to load JSON file from:'+filePath, err);
                errors [filename] = err;
                callback(null);
            }
            else
            {
                results[filename] = data;
                callback(null);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    processListSerial(filenames, loadSingle, function()
    {
        if (propertyCount(errors))
            mainCallback(errors, results);
        else
            mainCallback(null, results);
    });
}
//..............................................................................

//..............................................................................
function processFilesInFolderSync(folderPath, fn)
{
    var stats = fs.statSync(folderPath);
    if (stats.isDirectory())
    {
        var filesInFolder = fs.readdirSync(folderPath);
        processList(filesInFolder, fn);
    }
}
//..............................................................................

//..............................................................................
function processFilesInFolderDeepSync(primaryFolderPath, fnProcessFile, maxDepth)
{
    var depth = 0;
    maxDepth = maxDepth || 9999;
    //..........................................................................
    function recursivelyProcessItem(relativePath)
    {
        //console.log('###:', depth, indent(), relativePath);
        //......................................................................
        function processChild(childItem)
        {
            if (childItem != '.git')
            {
                var newRelativePath = path.join(relativePath, childItem);
                recursivelyProcessItem(newRelativePath);
            }
        }
        ////////////////////////////////////////////////////////////////////////
        depth++;
        if (depth > maxDepth)
        {
            depth--;
            return;
        }

        var fullPath = path.join(primaryFolderPath, relativePath);
        var stats    = fs.statSync(fullPath);
        if (stats.isDirectory())
        {
            var filesInFolder = fs.readdirSync(fullPath);
            processList(filesInFolder, processChild);
        }
        else
        {
            fnProcessFile(relativePath, fullPath, depth);
        }
        depth--;
    }
    ////////////////////////////////////////////////////////////////////////////
    recursivelyProcessItem('')
}
//..............................................................................

//..............................................................................
function processItemsInFolderDeep(primaryFolderPath, fnProcessItem, callback)
{
    var itemProcessed = [];
    var itemToProcess = [];
    //..........................................................................
    function processNextItem()
    {
        var item;
        //......................................................................
        function callback_Readdir(err, files)
        {
            if (err)
            {
                item.error = err;
            }
            else
            {
                for (var index in files)
                {
                    var newItem =
                    {
                        relativePath: path.join(item.relativePath, files[index]),
                        fullPath    : path.join(primaryFolderPath, item.relativePath, files[index])
                    };
                    itemToProcess.push(newItem);
                }
            }
            if (fnProcessItem) fnProcessItem(item);
            itemProcessed.push(item);
            processNextItem();
        }
        //......................................................................
        function callback_Stat(err, stats)
        {
            if (err)
            {
                item.error = err;
                if (fnProcessItem) fnProcessItem(item);
                itemProcessed.push(item);
                processNextItem();
            }
            else
            if (stats.isDirectory())
            {
                item.isDirectory = true;
                item.stats       = stats;
                fs.readdir(item.fullPath, callback_Readdir);
            }
            else
            {
                item.isDirectory = false;
                item.isFile      = stats.isFile();
                item.stats       = stats;
                if (fnProcessItem) fnProcessItem(item);
                itemProcessed.push(item);
                processNextItem();
            }
        }
        ////////////////////////////////////////////////////////////////////////
        if (itemToProcess.length)
        {
            item = itemToProcess.shift();
            fs.stat(item.fullPath, callback_Stat);
        }
        else
        if (callback)
        {
            callback(itemProcessed);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    var rootItem =
    {
        fullPath: primaryFolderPath,
        relativePath: '.'
    };
    itemToProcess.push(rootItem);
    processNextItem();
}
//..............................................................................

//..............................................................................
function getUniqueFilename (extra, options)
{
    if (!options)
    {
        options = {};
    }
    if (!options.hash)
    {
        options.hash = randomBase32();
    }
    if (!options.timestamp)
    {
        options.timestamp = meshNowMs();
    }
    if (!options.sep)
    {
        options.sep = '|';
    }
    var uniqueFilename = '' + moment(options.timestamp).utc().format('YYYY-MM-DD-HH-mm-ss-SSS') + options.sep + options.hash;
    if (extra)
    {
        uniqueFilename += options.sep + extra;
    }
    return uniqueFilename;
}
//..............................................................................

//..............................................................................
function getInfoFromFilename(filename, options)
{
    if (!options)
    {
        options = {};
    }
    if (!options.sep)
    {
        options.sep = "|";
    }
    if (!options.delimiter)
    {
        options.delimiter = "/";
    }
    var info = {};
    info.pathParts = filename.split(options.delimiter);
    info.basename  = path.basename(filename);
    info.dirname   = info.pathParts.slice(0, info.pathParts.length - 1).join(options.delimiter);
    var regexp = new RegExp("^(\\d{4}-\\d{2}-\\d{2}-\\d{2}-\\d{2}-\\d{2}-\\d{3})\\" + options.sep + "([^\\"+ options.sep +"]*)");
    var match      = info.basename.match(regexp);
    if (match)
    {
        info.time       = match[1];
        info.timestamp  = moment(info.time, 'YYYY-MM-DD-HH-mm-ss-SSS').toDate().getTime();
        info.hash       = match[2];
        info.extra      = filename.substr(match[0].length + 1);
    }
    return info;
}
//..............................................................................

//..............................................................................
function getFolderListFromFolder(topFolderPath, maxDepth, callback)
{
    var walker = walkdir(topFolderPath, {max_depth:maxDepth});
    var found = [];
    //..........................................................................
    walker.on('directory', function(folderPath,stat)
    {
        //console.log('walkdir_foundFolder:',folderPath);
        found.push(folderPath);
    });
    //..........................................................................
    walker.on('end', function()
    {
       // console.log('getFolderListFromFolder.Done:'+topFolderPath, 'depth:'+maxDepth, 'found:'+found.length);
        callback(null, found);
    });
}
//..............................................................................

//..............................................................................
function findFilesInFolder(folderPath, testFn, callback)
{
    //console.log('findFilesInFolder:',folderPath);
    //This function return first Level Files only
    function validateFiles(foundFiles)
    {
        var fileList = [];
        //......................................................................
        function processFile(filename)
        {

            filename = path.join(folderPath, filename);
            if (!testFn || testFn(filename))
                fileList.push(filename);

        }
        ////////////////////////////////////////////////////////////////////////
        processList(foundFiles, processFile);
        callback(null, fileList);
    }
    //..........................................................................
    function callback_ReadDir(err, fileList)
    {
        if (err)
            callback(err);
        else
            validateFiles(fileList);
    }
    ////////////////////////////////////////////////////////////////////////////
    fs.readdir(folderPath, callback_ReadDir);
}
//..............................................................................

//..............................................................................
function findFilesByExtension(topFolderPath, fileExtension, maxDepth, callback)
{
    fileExtension = fileExtension.toLowerCase(fileExtension);
    //..........................................................................
    function validateFile(filename)
    {
        var fileExt  = path.extname(filename);
        //console.log('validateFile:',filename, 'Find:',fileExtension, 'found:',fileExt);

        if (isDefined(fileExt) && (fileExt.toLowerCase() == fileExtension))
            return true;
    }
    ////////////////////////////////////////////////////////////////////////////
  //console.log('findFilesByExtension:'+topFolderPath, 'ext:'+fileExtension, 'depth:'+maxDepth);
    //..........................................................................
    var walker = walkdir(topFolderPath, {max_depth:maxDepth});
    var foundFiles = [];
    //..........................................................................
    walker.on('file', function(filename,stat)
    {
        //console.log('walkdir_foundFile:',filename);
        if (validateFile(filename))
        {
            foundFiles.push(filename);
            //console.log('walkdir_foundMatchingFile:',filename);
        }
    });
    //..........................................................................
    walker.on('end', function()
    {
      //console.log('findFilesByExtension.Done:'+topFolderPath, 'ext:'+fileExtension, 'depth:'+maxDepth, 'matching:'+foundFiles.length);
        callback(null, foundFiles);
    });
}
//..............................................................................

//..............................................................................
function findFiles(topFolderPath, fn, maxDepth, callback)
{
    //..........................................................................
    const walker = walkdir(topFolderPath, {max_depth:maxDepth});
    const foundFiles = [];

    //..........................................................................
    //console.log('findFilesByExtension:'+topFolderPath, 'ext:'+fileExtension, 'depth:'+maxDepth);
    function processFile(filePath,stat)
    {
        if (fn(filePath))
            foundFiles.push(filePath);
    }
    //..........................................................................
    function done()
    {
        //console.log('findFilesByName.Done:'+topFolderPath, 'ext:'+fileExtension, 'depth:'+maxDepth, 'matching:'+foundFiles.length);
        callback(null, foundFiles);
    }
    ////////////////////////////////////////////////////////////////////////////
    walker.on('file', processFile);
    walker.on('end',  done);
}
//..............................................................................

//..............................................................................
function findFilesByName(topFolderPath, testFilename, maxDepth, callback)
{
    testFilename = testFilename.toLowerCase();
    //..........................................................................
    function matchesByName(filePath)
    {
        const filename = path.basename(filePath);
        return (isDefined(filename) && (filename.toLowerCase() == testFilename));
    }
    ////////////////////////////////////////////////////////////////////////////
    findFiles(topFolderPath, matchesByName, maxDepth, callback)
}
//..............................................................................

//..............................................................................
function replaceFileExtension(filePath, newfileExtension)
{
    if (!isString(filePath)  ) return filePath;
    if (filePath.length === 0) return filePath;

    var filename = path.basename(filePath, path.extname(filePath)) + newfileExtension;
    return path.join(path.dirname(filePath), filename);
}
//..............................................................................

//..............................................................................
function deleteExistingFile(filePath, callback)
{
    fs.exists(filePath, function(existing)
    {
        if (existing)
        {
            fs.unlink(filePath, function(err)
            {
                console.log('DeletedFile:',filePath,err);
                if (err)
                {
                    console.log('ERROR: Failed To Remove File:',filePath,err);
                    callback('Failed To Remove: filePath');
                }
                else
                {
                    callback(null);
                }
            });
        }
        else
        {
            callback(null);
        }
    });
}
//..............................................................................

//..............................................................................
function deleteExistingFileSync(filePath)
{
    //TODO: NM: Replace with fs.removeSync (from fs.extra)
    if (fs.existsSync(filePath))
    {
        try
        {
            fs.unlinkSync(filePath);
            return true;
        }
        catch (err)
        {
            console.log('ERROR: Failed To Remove File:',filePath,err);
            console.log('Exception on deleteExistingFileSync', filePath, err);
            return false;
        }
    }
}
//..............................................................................

//..............................................................................
function deleteFilesInFolder(folder, mainCallback)
{
    var errors = [];
    //..........................................................................
    function deleteSingle(filePath, callback)
    {
        deleteExistingFile(filePath, function(err)
        {
            if (err)
                errors.push({path:filePath,error:err});
            callback(null);
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    findFilesInFolder(folder, null, function(err, filelist)
    {
        console.log('deleteFilesInFolder:',filelist);
        if (err)
            return mainCallback(err);

        processListSerial(filelist, deleteSingle, function(err)
        {
            if (errors.length)
                mainCallback(errors);
            else
                mainCallback(null, filelist);
        });
    });
}
//..............................................................................

//..............................................................................
function deleteFolder(folder, callback)
{
    deleteFilesInFolder(folder, function(err, filelist)
    {
        if (!err)
        {
            fs.rmdir(folder, function(err)
            {
                console.log('deleteFolderWithFiles:',err, filelist);
                if (err)
                    callback(err,filelist);
                else
                    callback(null,filelist);
            });
        }
        else
        {
            callback(err)
        }
    });
}
//..............................................................................

//..............................................................................
function getFileStats(folderPath, callback)
{
    function callback_stat(err, stats)
    {
        if (err)
            callback(folderPath + ' failed to get file info: ' + err.code);
        else 
            callback(null, stats);
    }
    //..........................................................................
    function callback_exists(exists)
    {
        if (exists)
            fs.stat(folderPath, callback_stat);
        else
            callback(folderPath + ' does not exist');
    }
    ////////////////////////////////////////////////////////////////////////////
    fs.exists(folderPath, callback_exists);
}
//..............................................................................

//..............................................................................
function isExistingFile(filePath, callback)
{
    function callback_getFileStats(err, stats)
    {
        if (err)
            callback(err);
        else
            callback(null, stats.isFile());
    }
    ////////////////////////////////////////////////////////////////////////////
    getFileStats(filePath, callback_getFileStats);
}
//..............................................................................

//..............................................................................
function isExistingFolder(folderPath, callback)
{
    function callback_getFileStats(err, stats)
    {
        if (err)
            callback(err);
        else
            callback(null, stats.isDirectory());
    }
    ////////////////////////////////////////////////////////////////////////////
    getFileStats(folderPath, callback_getFileStats);
}
//..............................................................................

//..............................................................................
function getRepoInfoFromUrl(url, folderPath)
{
    const parts  = url.split('/');
    const repo   = parts[parts.length-1];
    const org    = parts[parts.length-2];
    const folder = normalizeSlashes(path.join(folderPath, org, repo));

    return {org, repo, folder}
}
//..............................................................................

//..............................................................................
addProperties(util,
{
    forceDirectory,
    forceDirectorySync,
    saveDataToJSON_DebugSync,
    loadJsonSync,
    saveJsonSync,
    loadJsonFileSync,
    readJsonFile,
    readJsonFileSet,
    writeJsonFile,
    processFilesInFolderSync,
    processFilesInFolderDeepSync,
    processItemsInFolderDeep,
    getUniqueFilename,
    getInfoFromFilename,
    getFolderListFromFolder,
    findFilesInFolder,
    findFiles,
    findFilesByName,
    findFilesByExtension,
    replaceFileExtension,
    deleteExistingFile,
    deleteExistingFileSync,
    deleteFolder,
    getFileInfo,
    fileInfoChanged,
    isExistingFile,
    isExistingFolder,
    getRepoInfoFromUrl,
});
//..............................................................................

addToNameSpace(fs, 'fs');



