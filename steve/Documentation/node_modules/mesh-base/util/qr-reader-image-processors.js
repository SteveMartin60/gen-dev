// bilinearInterpolation method sourced from https://github.com/guyonroche/imagejs/blob/master/lib/resize.js
"use strict";

//..............................................................................
function contrast(src, contrast) //input range [-100..100]
{  
    var d = src.data;
    contrast = (contrast/100) + 1;  //convert to decimal & shift range: [0..2]
    var intercept = 128 * (1 - contrast);
    for(var i=0;i<d.length;i+=4)    //r,g,b,a
    {
        d[i]   = d[i]*contrast   + intercept;
        d[i+1] = d[i+1]*contrast + intercept;
        d[i+2] = d[i+2]*contrast + intercept;
    }
}
//..............................................................................

//..............................................................................
function bilinearInterpolation(src, dst) 
{        
    var wSrc = src.width;
    var hSrc = src.height;
    //console.log("wSrc="+wSrc + ", hSrc="+hSrc);
    
    var wDst = dst.width;
    var hDst = dst.height;
    //console.log("wDst="+wDst + ", hDst="+hDst);
    
    var bufSrc = src.data;
    var bufDst = dst.data;
    
    var interpolate = function(k, kMin, vMin, kMax, vMax) {
        // special case - k is integer
        if (kMin === kMax) {
            return vMin;
        }
        
        return Math.round((k - kMin) * vMax + (kMax - k) * vMin);
    };

    var assign = function(pos, offset, x, xMin, xMax, y, yMin, yMax) {
        var posMin = (yMin * wSrc + xMin) * 4 + offset;
        var posMax = (yMin * wSrc + xMax) * 4 + offset;
        var vMin = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]);
        
        // special case, y is integer
        if (yMax === yMin) {
            bufDst[pos+offset] = vMin;
        } else {
            posMin = (yMax * wSrc + xMin) * 4 + offset;
            posMax = (yMax * wSrc + xMax) * 4 + offset;
            var vMax = interpolate(x, xMin, bufSrc[posMin], xMax, bufSrc[posMax]);
            
            bufDst[pos+offset] = interpolate(y, yMin, vMin, yMax, vMax);
        }
    }
    
    for (var i = 0; i < hDst; i++) {
        for (var j = 0; j < wDst; j++) {
            var posDst = (i * wDst + j) * 4;
            
            // x & y in src coordinates
            var x = j * wSrc / wDst;
            var xMin = Math.floor(x);
            var xMax = Math.min(Math.ceil(x), wSrc-1);
            
            var y = i * hSrc / hDst;
            var yMin = Math.floor(y);
            var yMax = Math.min(Math.ceil(y), hSrc-1);
            
            assign(posDst, 0, x, xMin, xMax, y, yMin, yMax);
            assign(posDst, 1, x, xMin, xMax, y, yMin, yMax);
            assign(posDst, 2, x, xMin, xMax, y, yMin, yMax);
            assign(posDst, 3, x, xMin, xMax, y, yMin, yMax);
        }
    }
}
//..............................................................................

//..............................................................................
function convolute(src, dst, weights, opaque)
{
    const side = Math.round(Math.sqrt(weights.length));
    const halfSide = Math.floor(side/2);

    var srcPixels = src.data;
    var srcWidth  = src.width;
    var srcHeight = src.height;

    var dst       = dst.data;
    
    const alphaFac = opaque ? 1 : 0;
    for (var y=0; y<srcHeight; y++) {
        for (var x=0; x<srcWidth; x++) {
            var sy = y;
            var sx = x;
            var dstOff = (y*srcWidth+x)*4;
            // calculate the weighed sum of the source image pixels that
            // fall under the convolution matrix
            var r=0, g=0, b=0, a=0;
            for (var cy=0; cy<side; cy++) {
                for (var cx=0; cx<side; cx++) {
                    var scy = sy + cy - halfSide;
                    var scx = sx + cx - halfSide;
                    if (scy >= 0 && scy < srcHeight && scx >= 0 && scx < srcWidth) {
                        var srcOff = (scy*srcWidth+scx)*4;
                        var wt = weights[cy*side+cx];
                        r += srcPixels[srcOff] * wt;
                        g += srcPixels[srcOff+1] * wt;
                        b += srcPixels[srcOff+2] * wt;
                        a += srcPixels[srcOff+3] * wt;
                    }
                }
            }
            dst[dstOff] = r;
            dst[dstOff+1] = g;
            dst[dstOff+2] = b;
            dst[dstOff+3] = a + alphaFac*(255-a);
        }
    }
}
//..............................................................................

//..............................................................................
function threshold(src, threshold) 
{
    var d = src.data;

    for (var i=0; i<d.length; i+=4) 
    {
        var r = d[i];
        var g = d[i+1];
        var b = d[i+2];
        var v = (0.2126*r + 0.7152*g + 0.0722*b >= threshold) ? 255 : 0;
        d[i] = d[i+1] = d[i+2] = v
    }
};
//..............................................................................

/*
Superfast Blur - a fast Box Blur For Canvas

Version: 	0.5
Author:		Mario Klingemann
Contact: 	mario@quasimondo.com
Website:	http://www.quasimondo.com/BoxBlurForCanvas
Twitter:	@quasimondo

In case you find this class useful - especially in commercial projects -
I am not totally unhappy for a small donation to my PayPal account
mario@quasimondo.de

Or support me on flattr:
https://flattr.com/thing/140066/Superfast-Blur-a-pretty-fast-Box-Blur-Effect-for-CanvasJavascript

Copyright (c) 2011 Mario Klingemann

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
var mulTable = [ 1,57,41,21,203,34,97,73,227,91,149,62,105,45,39,137,241,107,3,173,39,71,65,238,219,101,187,87,81,151,141,133,249,117,221,209,197,187,177,169,5,153,73,139,133,127,243,233,223,107,103,99,191,23,177,171,165,159,77,149,9,139,135,131,253,245,119,231,224,109,211,103,25,195,189,23,45,175,171,83,81,79,155,151,147,9,141,137,67,131,129,251,123,30,235,115,113,221,217,53,13,51,50,49,193,189,185,91,179,175,43,169,83,163,5,79,155,19,75,147,145,143,35,69,17,67,33,65,255,251,247,243,239,59,29,229,113,111,219,27,213,105,207,51,201,199,49,193,191,47,93,183,181,179,11,87,43,85,167,165,163,161,159,157,155,77,19,75,37,73,145,143,141,35,138,137,135,67,33,131,129,255,63,250,247,61,121,239,237,117,29,229,227,225,111,55,109,216,213,211,209,207,205,203,201,199,197,195,193,48,190,47,93,185,183,181,179,178,176,175,173,171,85,21,167,165,41,163,161,5,79,157,78,154,153,19,75,149,74,147,73,144,143,71,141,140,139,137,17,135,134,133,66,131,65,129,1];       
var shgTable = [0,9,10,10,14,12,14,14,16,15,16,15,16,15,15,17,18,17,12,18,16,17,17,19,19,18,19,18,18,19,19,19,20,19,20,20,20,20,20,20,15,20,19,20,20,20,21,21,21,20,20,20,21,18,21,21,21,21,20,21,17,21,21,21,22,22,21,22,22,21,22,21,19,22,22,19,20,22,22,21,21,21,22,22,22,18,22,22,21,22,22,23,22,20,23,22,22,23,23,21,19,21,21,21,23,23,23,22,23,23,21,23,22,23,18,22,23,20,22,23,23,23,21,22,20,22,21,22,24,24,24,24,24,22,21,24,23,23,24,21,24,23,24,22,24,24,22,24,24,22,23,24,24,24,20,23,22,23,24,24,24,24,24,24,24,23,21,23,22,23,24,24,24,22,24,24,24,23,22,24,24,25,23,25,25,23,24,25,25,24,22,25,25,25,24,23,24,25,25,25,25,25,25,25,25,25,25,25,25,23,25,23,24,25,25,25,25,25,25,25,25,25,24,22,25,25,23,25,25,20,24,25,24,25,25,22,24,25,24,25,24,25,25,24,25,25,25,25,22,25,25,25,24,25,24,25,18];
		
function blur(imageData, r) 
{
    if (typeof r !== 'number')
        return throwError.call(this, 'r must be a number', cb);
    if (r < 1) return throwError.call(this, 'r must be greater than 0', cb);

    let rsum;
    let gsum;
    let bsum;
    let asum;
    let x;
    let y;
    let i;
    let p;
    let p1;
    let p2;
    let yp;
    let yi;
    let yw;
    let pa;

    const wm = imageData.width - 1;
    const hm = imageData.height - 1;
    // const wh = imageData.width * imageData.height;
    const rad1 = r + 1;

    const mulSum = mulTable[r];
    const shgSum = shgTable[r];

    const red = [];
    const green = [];
    const blue = [];
    const alpha = [];

    const vmin = [];
    const vmax = [];

    let iterations = 2;

    while (iterations-- > 0) {
        yi = 0;
        yw = 0;

        for (y = 0; y < imageData.height; y++) {
            rsum = imageData.data[yw] * rad1;
            gsum = imageData.data[yw + 1] * rad1;
            bsum = imageData.data[yw + 2] * rad1;
            asum = imageData.data[yw + 3] * rad1;

            for (i = 1; i <= r; i++) {
                p = yw + ((i > wm ? wm : i) << 2);
                rsum += imageData.data[p++];
                gsum += imageData.data[p++];
                bsum += imageData.data[p++];
                asum += imageData.data[p];
            }

            for (x = 0; x < imageData.width; x++) {
                red[yi] = rsum;
                green[yi] = gsum;
                blue[yi] = bsum;
                alpha[yi] = asum;

                if (y === 0) {
                    vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;
                    vmax[x] = (p = x - r) > 0 ? p << 2 : 0;
                }

                p1 = yw + vmin[x];
                p2 = yw + vmax[x];

                rsum += imageData.data[p1++] - imageData.data[p2++];
                gsum += imageData.data[p1++] - imageData.data[p2++];
                bsum += imageData.data[p1++] - imageData.data[p2++];
                asum += imageData.data[p1] - imageData.data[p2];

                yi++;
            }
            yw += imageData.width << 2;
        }

        for (x = 0; x < imageData.width; x++) {
            yp = x;
            rsum = red[yp] * rad1;
            gsum = green[yp] * rad1;
            bsum = blue[yp] * rad1;
            asum = alpha[yp] * rad1;

            for (i = 1; i <= r; i++) {
                yp += i > hm ? 0 : imageData.width;
                rsum += red[yp];
                gsum += green[yp];
                bsum += blue[yp];
                asum += alpha[yp];
            }

            yi = x << 2;

            for (y = 0; y < imageData.height; y++) {
                pa = (asum * mulSum) >>> shgSum;
                imageData.data[yi + 3] = pa;

                // normalize alpha
                if (pa > 255) {
                    imageData.data[yi + 3] = 255;
                }

                if (pa > 0) {
                    pa = 255 / pa;
                    imageData.data[yi] = ((rsum * mulSum) >>> shgSum) * pa;
                    imageData.data[yi + 1] =
                        ((gsum * mulSum) >>> shgSum) * pa;
                    imageData.data[yi + 2] =
                        ((bsum * mulSum) >>> shgSum) * pa;
                } else {
                    imageData.data[yi + 2] = 0;
                    imageData.data[yi + 1] = 0;
                    imageData.data[yi] = 0;
                }

                if (x === 0) {
                    vmin[y] =
                        ((p = y + rad1) < hm ? p : hm) * imageData.width;
                    vmax[y] = (p = y - r) > 0 ? p * imageData.width : 0;
                }

                p1 = x + vmin[y];
                p2 = x + vmax[y];

                rsum += red[p1] - red[p2];
                gsum += green[p1] - green[p2];
                bsum += blue[p1] - blue[p2];
                asum += alpha[p1] - alpha[p2];

                yi += imageData.width << 2;
            }
        }
    }
}

module.exports = {bilinearInterpolation, convolute, threshold, contrast, blur};