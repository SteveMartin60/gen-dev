//..............................................................................
//Simple fast hash from https://github.com/darkskyapp/string-hash
//..............................................................................
function meshHash(str)
{
    var hash = 5730132478;
    var len = str.length;
    for (var i=0; i<len; i++)
    {
        hash = (hash * 33) ^ str.charCodeAt(i);
    }
    //console.log('hash:',hash);
    return hash >>> 0;
}
//..............................................................................

//..............................................................................
function meshHash2(str)
{
    var hash = 0;
    var char;
    for (i = 0; i < str.length; i++)
    {
        char = str.charCodeAt(i);
        console.log('i:',i,char, (hash << 6), (hash << 16))
        hash = char + (hash << 6) + (hash << 16) - hash;
    }
    console.log('hash:',hash);
    return hash;
}
//..............................................................................

//..............................................................................
function meshHash3(str)
{
    var hash = 5381;
    var char;
    for (var i = 0; i < str.length; i++) {
        char = str.charCodeAt(i);
        hash = ((hash << 5) + hash) + char; /* hash * 33 + c */
    }
    return hash;
}
//..............................................................................

//..............................................................................
function meshHashHex(str)
{
    var hash = meshHash(str).toString(16);
    return ("000000000" + hash).substr(-8);
}
//..............................................................................

//..............................................................................
function meshHashBase32(str)    //04n397kj
{
    var hash = meshHash(str);
    return toBase32(hash,8);
}
//..............................................................................

//..............................................................................
var inputs   = {};
var outputs  = {};
var collisionCount = 0;
var sourceHits     = 0;
var hashHits       = {};
var totalCount = 1000000;
//..............................................................................

for (var i = 0; i < totalCount; i++)
{
    var source = cxq.util.randomBase32(8);
    var hash   = meshHashBase32(source);
    if (inputs[source])
    {
        sourceHits++;
    }
    else
    if (outputs[hash]) //already got this result
    {
        collisionCount++;
        //var collision = hashHits[hash];
        //if (!collision)
        //{
        //    collision = {};
        //    var firstSource = outputs[hash];
        //    collision[firstSource] = true; //add the first one
        //    hashHits[hash] = collision;
        //}
        //
        //console.log('colle
    }

    outputs[hash  ] = source;
    inputs [source] = source;
}

console.log('totalTests:',totalCount, 'sourceHits:',sourceHits, 'hashHits:',collisionCount);

console.log('meshHashBase32:',meshHashBase32('mesh-machine-server.0.0.0'));
console.log('meshHashBase32:',meshHashBase32('mesh-machine-server.0.0.1'));
console.log('meshHashBase32:',meshHashBase32('mesh-machine-server.0.0.2'));
console.log('meshHashBase32:',meshHashBase32('mesh-machine-server.0.0.3'));
