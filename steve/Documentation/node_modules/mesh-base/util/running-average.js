//..............................................................................
const {logger, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    isDefined,
    meshNowMs,
    oneSecond,
    functionAsProperty_ReadOnly,
    every,
    round1
} = util;
//..............................................................................

//..............................................................................
var log  = logger('running-average');
log.setLevel('info');
//..............................................................................

//..............................................................................
var trackerCount = 0;
//..............................................................................

//..............................................................................
function makeRunningAverager(options)
{
    var samples        = [];
    var sampleSum      = 0;
    var sampleAverage  = 0;
    var sampleLatest   = 0;
    var sampleMinimum  = 0;
    var sampleMaximum  = 0;
    var startTime      = meshNowMs();
    var allowedAge     = options.allowedAge     || 0; //No Limit
    var allowedSamples = options.allowedSamples || 0; //No Limit
    var id             = options.id             || 'tracker_' + trackerCount;
    var round          = options.round || 0;
    //..........................................................................

    //..........................................................................
    trackerCount++;
    //..........................................................................

    //..........................................................................
    function removeOldest()
    {
        var now = meshNowMs();

        //console.log('removeItemBefore count:', item.samples.length,'sum:'+item.samples[0].value);
        //console.log('age:',now - item.samples[0].time, 'allowed:',allowedAge);
        sampleSum -= samples[0].value;
        samples.shift();
        //console.log('removeItemAfter:', item.samples.length);
    }
    //..........................................................................
    function removeExpired()
    {
        var now = meshNowMs();

        if (allowedAge > 0)
        {
            while (samples.length > 0 && now - samples[0].time > allowedAge)
            {
                removeOldest();
            }
        }

        //if (allowedSamples > 0)
        //{
        //    while (samples.length > allowedSamples)
        //    {
        //        removeOldest();
        //    }
        //}

        if (samples.length > 0)
            sampleAverage = sampleSum/samples.length;
        else
            sampleAverage = sampleLatest;
    }
    //..........................................................................
    function showAverage()
    {
        console.log('  average:', id, 'latest:'+sampleLatest,'count:'+samples.length, 'sum:'+sampleSum, 'avg:'+sampleAverage);
    }
    //..........................................................................
    function doRound(n)
    {
        if (round)
            return round1(n * round) / round;
        else
            return n;
    }
    //..........................................................................
    function addSample(value)
    {
        //console.log('addSample:', id, 'newValue:'+value, 'old-count:'+samples.length, 'old-avg:'+sampleAverage, 'old-latest:'+sampleLatest);

        var now    = meshNowMs();
        samples.push({time:now, value:value});

        sampleLatest  = value;
        sampleLatest  = doRound(sampleLatest);

        removeExpired();
        sampleSum += value;

        sampleAverage = sampleSum/samples.length;
        sampleAverage = doRound(sampleAverage);
        //showAverage();
        //console.log('addSample:', id, 'newValue:'+value, 'new-count:'+samples.length, 'new-avg:'+sampleAverage, 'new-latest:'+sampleLatest);
    }
    //..........................................................................
    function setOptions(options)
    {
        if (isDefined(options.allowedAge    )) allowedAge     = options.allowedAge;
        if (isDefined(options.allowedSamples)) allowedSamples = options.allowedSamples;
        if (isDefined(options.round         )) round          = options.round;

        removeExpired();
    }
    //..........................................................................
    function getSamples()
    {
        return samples.map(function(sample)
        {
            return {value:sample.value, time:sample.time};
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    var publicScope = 
    {
        getSamples,
        addSample ,
        setOptions 
    };
    functionAsProperty_ReadOnly(publicScope, function(){return sampleAverage ;}, 'average' );
    functionAsProperty_ReadOnly(publicScope, function(){return sampleLatest  ;}, 'latest'  );
    functionAsProperty_ReadOnly(publicScope, function(){return samples.length;}, 'count'   );

    return publicScope;
}
//..............................................................................

module.exports = makeRunningAverager;

//..............................................................................
function exampleUsage()
{
    //Initialize
    var averagerA = [];
    var averagerB = [];

    var i;
    for (i=0; i<8; i++)
    {
        averagerA[i] = makeRunningAverager({allowedAge:oneSecond*5 , round:100});
        averagerB[i] = makeRunningAverager({allowedAge:oneSecond*10, round:100});
    }

    function addSamples()
    {
        //Add samples
        for (i=0; i<8; i++)
        {
            averagerA[i].addSample(Math.random()*100);
            averagerB[i].addSample(Math.random()*200);
        }
    }
    
    addSamples();
    every(50).do(function()
    {
        addSamples();
    });

    every(1000).do(function()
    {
        for (i=0; i<8; i++)
        {
            log.info('AveragerA:',i,averagerA[i].latest, 'Samples:',averagerA[i].count);
            log.info('AveragerB:',i,averagerB[i].latest, 'Samples:',averagerB[i].count);
        }
        
    });
}

//exampleUsage();