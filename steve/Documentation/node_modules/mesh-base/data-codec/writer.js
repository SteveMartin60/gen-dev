//..............................................................................
const {mtDataTypes, Int64, util} = cxq;
//..............................................................................

//..............................................................................
const 
{
    isNumeric,
    isString,
    functionAsProperty_ReadOnly,
    addToNameSpace,
} = util;
//..............................................................................

//..............................................................................
const
{
    DATA_TYPE_FLOAT,
    DATA_TYPE_BOOLEAN,
    DATA_TYPE_CHAR,
    DATA_TYPE_INT8,
    DATA_TYPE_INT16,
    DATA_TYPE_INT32,
    DATA_TYPE_INT64,
    DATA_TYPE_UINT8,
    DATA_TYPE_UINT16,
    DATA_TYPE_UINT32,
    DATA_TYPE_UINT64,
} = mtDataTypes;
//..............................................................................

//..............................................................................
function makeDataWriter(size)
{
    const buf   = Buffer.alloc(size || 64*1024);
    let   index = 0;

    //..........................................................................
    function U8(value)
    {
        buf.writeUInt8(value, index);
        index += 1;
        return publicScope
    }
    //..........................................................................
    function I8(value)
    {
        buf.writeInt8(value, index);
        index += 1;
        return publicScope
    }
    //..........................................................................
    function U16(value)
    {
        buf.writeUInt16BE(value, index);
        index += 2;
        return publicScope
    }
    //..........................................................................
    function I16(value)
    {
        buf.writeInt16BE(value, index);
        index += 2;
        return publicScope
    }
    //..........................................................................
    function U32(value)
    {
        buf.writeUInt32BE(value, index);
        index += 4;
        return publicScope
    }
    //..........................................................................
    function I32(value)
    {
        buf.writeInt32BE(value, index);
        index += 4;
        return publicScope
    }
    //..........................................................................
    function U48(value)
    {
        buf.writeUIntBE(value, index, 6);
        index += 6;
        return publicScope
    }
    //..........................................................................
    function I48(value)
    {
        buf.writeIntBE(value, index, 6);
        index += 6;
        return publicScope
    }
    //..........................................................................
    function U64(value)
    {
        var msb;
        var lsb;
        if (isNumeric(value))
            value = Int64.fromNumber(value, true);

        if (Int64.isLong(value))
        {
            msb = value.getHighBitsUnsigned();
            lsb = value.getLowBitsUnsigned();
        }

        buf.writeUInt32BE(msb, index);
        buf.writeUInt32BE(lsb, index+4);

        index += 8;
        return publicScope
    }
    //..........................................................................
    function I64(value)
    {
        var msb;
        var lsb;
        if (isNumeric(value))
            value = Int64.fromNumber(value, false);

        if (Int64.isLong(value))
        {
            msb = value.getHighBitsUnsigned();
            lsb = value.getLowBitsUnsigned();
        }

        buf.writeUInt32BE(msb, index);
        buf.writeUInt32BE(lsb, index+4);

        index += 8;
        return publicScope
    }
    //..........................................................................
    function F32(value)
    {
        buf.writeFloatBE(Math.fround(value), index);
        index += 4;
        return publicScope
    }
    //..........................................................................
    function F64(value)
    {
        buf.writeDoubleBE(value, index);
        index += 8;
        return publicScope
    }
    //..........................................................................
    function BIN(value)
    {
        U32(value.length);
        value.copy(buf,index);
        index += value.length;
        return publicScope
    }
    //..........................................................................
    function STR(value)
    {
        return BIN(Buffer.from(value, 'utf8'))
    }
    //..........................................................................
    function JSN(value)
    {
        const dataString = JSON.stringify(value);
        const dataBuffer = Buffer.from(dataString);
        return BIN(Buffer.from(dataBuffer, 'utf8'))
    }
    //..........................................................................
    function Bool(value)
    {
        if (value)
            value = 1;
        else
            value = 0;
        return U8(value);
    }
    //..........................................................................
    function byType(type, value)
    {
        if (writeByType[type])
        {
            return writeByType[type](value);
        }
        else
        {
            throw {error:'writeByType', type, value};
        }
    }
    //..........................................................................
    function toString(encoding)
    {
        return publicScope.data.toString(encoding);
    }
    ////////////////////////////////////////////////////////////////////////////
    const writeByType =
    {
        [DATA_TYPE_FLOAT  ] : F32,
        [DATA_TYPE_BOOLEAN] : Bool,
        [DATA_TYPE_CHAR   ] : I8 ,
        [DATA_TYPE_INT8   ] : I8 ,
        [DATA_TYPE_INT16  ] : I16,
        [DATA_TYPE_INT32  ] : I32,
        [DATA_TYPE_INT64  ] : I64,
        [DATA_TYPE_UINT8  ] : U8 ,
        [DATA_TYPE_UINT16 ] : U16,
        [DATA_TYPE_UINT32 ] : U32,
        [DATA_TYPE_UINT64 ] : U64
    };
    // console.log('writeByType:',writeByType);
    //...........................................................................
    const publicScope =
    {
        U8 , U16, U32, U48, U64,
        I8 , I16, I32, I48, I64,
                  F32,      F64,
        BIN,
        STR,
        JSN,
        Bool,
        uint8       : U8 ,
        uint16      : U16,
        uint32      : U32,
        uint48      : U48,
        uint64      : U64,
        int8        : I8 ,
        int16       : I16,
        int32       : I32,
        int48       : I48,
        int64       : I64,
        writeF32    : F32,
        writeF64    : F64,
        writeBinary : BIN,
        writeString : STR,
        byType,
        toString,
    };

    functionAsProperty_ReadOnly(publicScope, function(){return buf.slice(0,index);}, 'data'  );
    functionAsProperty_ReadOnly(publicScope, function(){return index             ;}, 'length');

    return publicScope;
}
//..............................................................................

addToNameSpace(makeDataWriter, 'makeDataWriter');