require('mesh-base');

//..............................................................................
const {Int64, mtDataTypes, makeDataReader, makeDataWriter, util} = cxq;
const {abort, getRandomBytesBuffer, padRight, padLeft} = util;
//..............................................................................

//..............................................................................
const
{
    DATA_TYPE_FLOAT,
    DATA_TYPE_BOOLEAN,
    DATA_TYPE_CHAR,
    DATA_TYPE_INT8,
    DATA_TYPE_INT16,
    DATA_TYPE_INT32,
    DATA_TYPE_INT64,
    DATA_TYPE_UINT8,
    DATA_TYPE_UINT16,
    DATA_TYPE_UINT32,
    DATA_TYPE_UINT64,
} = mtDataTypes;
//..............................................................................

//..............................................................................
const MIN_I64 = Int64.MIN_VALUE;
const MAX_I64 = Int64.MAX_VALUE;
const MAX_U64 = Int64.MAX_VALUE;
//..............................................................................

//..............................................................................
function doStringTest()
{
    const testString = makeDataWriter().writeString('创享桥-123').writeString('创享桥-456');
    const stringRead = makeDataReader(testString.data);
    const s1 = stringRead.readString();
    const s2 = stringRead.readString();
    console.log('String:','|'+s1+'|'+s2+'|');
    process.exit();
}
// doStringTest();
//..............................................................................


//..............................................................................
const writer = makeDataWriter();
//..............................................................................

writer. U8(10). U8(          0xFF). I8(+10). I8(-10);
writer.U16(10).U16(        0xFFFF).I16(+10).I16(-10);
writer.U32(10).U32(    0xFFFFFFFF).I32(+10).I32(-10);
writer.U48(10).U48(0xFFFFFFFFFFFF).I48(+10).I48(-10);

//..............................................................................

const values_U64 =
[
/* 0 */ 0x00,
/* 1 */ 0x33,
/* 2 */  0x1000000020000000,
/* 3 */ new Int64.fromString('FFFFFFFFFFFFFFFF',true, 16),
/* 4 */ new Int64.fromString('FFFF0000EEEE1111',true, 16),
/* 5 */ new Int64(0x20000000,0x30000000,true, 16),
/* 6 */ MAX_U64,
/* 7 */ 0x44,
];
//..............................................................................

//..............................................................................
const values_I64 =
[
/* 0 */ 55,
/* 1 */ new Int64.fromString(  '7FFFFFFFffffffff', false, 16),
/* 2 */ new Int64.fromString( '-8000000000000000', false, 16),
/* 3 */ new Int64.fromString('+8877665544332211' , false, 10),
/* 4 */ new Int64.fromString('-8877665544332211' , false, 10),
/* 5 */ Number.MAX_SAFE_INTEGER,
/* 6 */ Number.MIN_SAFE_INTEGER,
/* 7 */ MAX_I64,
/* 8 */ MIN_I64,
/* 9 */ 66,
];
//..............................................................................

//..............................................................................
// These will be changed since Javascript is F64 internally
//..............................................................................
const values_F32 =
[
/* 0 */ 0,
/* 1 */ +3.40282E+38,
/* 2 */ -3.40282E+38,
/* 3 */ +1.17549E-38,
/* 4 */ -1.17549E-38,
/* 5 */ +0.9999E-38,
/* 6 */ -0.9999E-38,
];
//..............................................................................

//..............................................................................
const values_F64 =
[
/* 0 */ +1234.5678, // These will be changed since Javascript is F64 internally
/* 1 */ -1234.5678, // These will be changed since Javascript is F64 internally
/* 2 */ Number.MAX_SAFE_INTEGER,
/* 3 */ Number.MIN_SAFE_INTEGER,
/* 4 */ Number.MAX_VALUE,
/* 5 */ Number.MIN_VALUE,
];
//..............................................................................

//..............................................................................
const value_binary = getRandomBytesBuffer(1000);
const value_string = '创享桥-123-' + value_binary.toString('hex');
//..............................................................................

//..............................................................................
values_U64.map(writer.U64);
values_I64.map(writer.I64);
values_F32.map(writer.F32);
values_F64.map(writer.F64);
//..............................................................................

//..............................................................................
writer.STR(value_string);
writer.BIN(value_binary);
//..............................................................................

//..............................................................................
writer.byType(DATA_TYPE_FLOAT   , 27);
writer.byType(DATA_TYPE_BOOLEAN , true );
writer.byType(DATA_TYPE_BOOLEAN , false);
writer.byType(DATA_TYPE_CHAR    , 28);
writer.byType(DATA_TYPE_INT8    , 29);
writer.byType(DATA_TYPE_INT16   , 30);
writer.byType(DATA_TYPE_INT32   , 31);
writer.byType(DATA_TYPE_INT64   , 32);
writer.byType(DATA_TYPE_UINT8   , 33);
writer.byType(DATA_TYPE_UINT16  , 34);
writer.byType(DATA_TYPE_UINT32  , 35);
writer.byType(DATA_TYPE_UINT64  , 36);
//..............................................................................

//..............................................................................
function compare(actual, expected, caption)
{
    var result;
    if (actual === expected) 
        result = 'OK!'; else result ='ERROR!';

    actual   = (''+actual  ).slice(0,25);
    expected = (''+expected).slice(0,25);

    console.log(padRight(caption,20), padRight(result,6), padLeft(expected,25), padLeft(actual,25));
}
//..............................................................................

//..............................................................................
const reader = makeDataReader(writer.data);
//..............................................................................

//..............................................................................
compare (reader.U8() ,  10             , 'U8-1 ');
compare (reader.U8() ,  0xFF           , 'U8-2 ');
compare (reader.I8() , +10             , 'I8-1 ');
compare (reader.I8() , -10             , 'I8-2 ');
compare (reader.U16(),  10             , 'U16-1');
compare (reader.U16(),  0xFFFF         , 'U16-2');
compare (reader.I16(),  10             , 'I16-1');
compare (reader.I16(), -10             , 'I16-2');
compare (reader.U32(),  10             , 'U32-1');
compare (reader.U32(), 0xFFFFFFFF      , 'U32-2');
compare (reader.I32(),  10             , 'I32-1');
compare (reader.I32(), -10             , 'I32-2');
compare (reader.U48(),  10             , 'U48-1');
compare (reader.U48(),  0xFFFFFFFFFFFF , 'U48-2');
compare (reader.I48(),  10             , 'I48-1');
compare (reader.I48(), -10             , 'I48-2');
//..............................................................................

//..............................................................................
console.log();
values_U64.map(function(testValue, i)
{
    const expected = testValue   .toString(16);
    const actual   = reader.U64().toString(16);
    compare(actual,expected,'U64-'+i);
    // console.log('U64-'+i,':', expected===actual, expected, actual);
});
//..............................................................................

//..............................................................................
console.log();
values_I64.map(function(testValue, i)
{
    const expected = testValue;
    const actual   = reader.I64();
    const expected10 = expected.toString(10);
    const actual10   = actual  .toString(10);
    const expected16 = expected.toString(16);
    const actual16   = actual  .toString(16);
    compare(actual10,expected10,'I64-'+i);
    compare(actual16,expected16,'I64-'+i);
    // console.log('I64-'+i,':', expected10===actual10, expected10, actual10, expected16, actual16);
});
//..............................................................................

//..............................................................................
console.log();
values_F32.map(function(testValue, i)
{
    const expected = Math.fround(testValue);
    const actual   = reader.F32();
    compare(actual,expected,'F32-'+i);
});
//..............................................................................

//..............................................................................
console.log();
values_F64.map(function(testValue, i)
{
    const expected = testValue;
    const actual   = reader.F64();
    compare(actual,expected,'F64-'+i);
});
//..............................................................................

//..............................................................................
console.log();
compare(reader.STR()                 , value_string                   , 'STR-1');
compare(reader.BIN().toString('hex') , value_binary.toString('hex')   , 'BIN-1');
//..............................................................................

//..............................................................................
console.log();
compare(reader.byType(DATA_TYPE_FLOAT   )              , 27           , 'DATA_TYPE_FLOAT  ');
compare(reader.byType(DATA_TYPE_BOOLEAN )              , true         , 'DATA_TYPE_BOOLEAN');
compare(reader.byType(DATA_TYPE_BOOLEAN )              , false        , 'DATA_TYPE_BOOLEAN');
compare(reader.byType(DATA_TYPE_CHAR    )              , 28           , 'DATA_TYPE_CHAR   ');
compare(reader.byType(DATA_TYPE_INT8    )              , 29           , 'DATA_TYPE_INT8   ');
compare(reader.byType(DATA_TYPE_INT16   )              , 30           , 'DATA_TYPE_INT16  ');
compare(reader.byType(DATA_TYPE_INT32   )              , 31           , 'DATA_TYPE_INT32  ');
compare(reader.byType(DATA_TYPE_INT64   ).toString(10) ,'32'          , 'DATA_TYPE_INT64  ');
compare(reader.byType(DATA_TYPE_UINT8   )              , 33           , 'DATA_TYPE_UINT8  ');
compare(reader.byType(DATA_TYPE_UINT16  )              , 34           , 'DATA_TYPE_UINT16 ');
compare(reader.byType(DATA_TYPE_UINT32  )              , 35           , 'DATA_TYPE_UINT32 ');
compare(reader.byType(DATA_TYPE_UINT64  ).toString(10) ,'36'          , 'DATA_TYPE_UINT64 ');
//..............................................................................