//..............................................................................
const {cloud, fs, logger, makeEventEmitter, path, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    functionAsProperty_ReadOnly,
    propertyCount,
    addToNameSpace,
    wait,
    processListLimit,
    meshNow,
    meshNowMs,
    makeDate,
    processList,
} = util;
//..............................................................................

//..............................................................................
var log = logger('folder-sync');
log.setLevel('info');
//..............................................................................

//..............................................................................
const syncers = {};
//..............................................................................

//..............................................................................
function getFolderContents(targetPath, callback)
{
    var parts = targetPath.split('/');
    var fileStoreId = parts[0];
    //..........................................................................
    function isFile(item)
    {
        return (item.type == 'file');
    }
    //..........................................................................
    function isFolder(item)
    {
        return (item.type == 'folder');
    }
    //..........................................................................
    function callback_getFileItemInfo(err, raw)
    {
        if (err || !raw)
        {
            log.error('getFolderContents_error:', targetPath, err);
            //updateItem(targetPath, false);
            callback(err, raw);
        }
        else
        {
            var items = raw.items || [];
            processList(items, function(item)
            {
                item.fullPath = fileStoreId + '/' + item.path;
            });
            var folders = items.filter(isFolder);
            var files   = items.filter(isFile);
            log.debug('getFolderContents_complete:', err, 'folders:',folders.length, 'files:',files.length);
            callback(null, {folders,files});
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    log.debug('getFolderContents', targetPath);
    log.debug('getFolderContents_fileStoreId:', fileStoreId);

    cloud.getFileItemInfo({targetPath}, callback_getFileItemInfo);
}
//..............................................................................

//..............................................................................
function downloadItem(cloudFilePath, localFolderPath, timestamp, callback)
{
    var cloudParts    = cloudFilePath.split('/');
    var cloudFileName = cloudParts[cloudParts.length-1];
    var localFilePath = path.join(localFolderPath, cloudFileName);
    var result        = null;

    //log.info('localFilePath:',localFilePath);
    //..........................................................................    
    function doDownload(downloadType)
    {
        var options =
        {
            localPath  : localFilePath,
            targetPath : cloudFilePath
        };
        //..................................................................
        /*
       name: 'mesh-mb2000.jpg',
       path: 'avatars/device-models/mesh-mb2000.jpg',
       size: 18667,
       type: 'file',
       lastModified: '2016-07-31T08:05:29.000Z',
         */
        cloud.downloadFile(options, function(err)
        {
            if (err)
            {
                log.error('downloadItem.Failed to download:',err, cloudFilePath, ' =>', localFolderPath);
                callback(err);
            }
            else
            {
                var atime = timestamp;
                var mtime = timestamp;
                //log.info('lastModifiedXXX:',cloudFileName,':','atime:',atime, 'mtime:',mtime);
                //log.info('downloadItem.downloaded to:'+ localFolderPath);
                fs.utimesSync(localFilePath, atime, mtime);
                result = {type:downloadType, path:cloudFilePath, modified:timestamp, saved:meshNow()};
                callback(null,result);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////
    //log.info('downloadItem:', cloudFilePath, '=>',localFilePath);

    fs.exists(localFilePath, function(existing)
    {
     // if (existing && Math.random() > 0.05)
        if (existing)
        {
            var stat = fs.statSync(localFilePath);
            var fileModifiedTime = stat.mtime.getTime();
            var timeStampTime    = timestamp.getTime();

         // if (fileModifiedTime == timeStampTime && Math.random() > 0.05)
            if (fileModifiedTime == timeStampTime)
            {
                //log.info('Skipping_Unchanged:',localFilePath);
                callback(null);
            }
            else
            {
                doDownload('updated');
            }
        }
        else
        {
            doDownload('added');
        }
    });
}
//..............................................................................

//..............................................................................
function makeFolderSync(props)
{
    var  {id, filestoreFolderPath, localFolderPath, period, autostart=true, track=true} = props;
    if (!id)
         id = filestoreFolderPath;

    if (track && syncers[id])
    {
        log.warn('Attempt to add second filestore-folder sync on:',props);
        return syncers[id];
    }

    log.debug('makeFolderSync:',filestoreFolderPath, localFolderPath, period);
    var timer   = null;
    var active  = false;
    var emitter = makeEventEmitter();
    //..........................................................................
    function doSync(callback)
    {
        const maxDownloadCount = 999;
        var   downloadCount    = 0;
        var   changes          = {added:[], updated:[]};
        const startedAt        = meshNowMs();
        //......................................................................
        function downloadSingle(file, callbackSingle)
        {
            if (downloadCount >= maxDownloadCount)
                return doCallback(callbackSingle);

            var timestamp = makeDate(file.lastModified);
            downloadItem(file.fullPath, localFolderPath, timestamp, function(err,data)
            {
                //log.info('DownloadItem_Callback:',err,data);
                downloadCount++;
                if (data)
                {
                         if (data.type == 'updated') changes.updated.push(data);
                    else if (data.type == 'added'  ) changes.added  .push(data);
                }
                callbackSingle(null);
            })
        }
        //......................................................................
        function downloadFileList(files)
        {
            log.debug('downloadFileList:', files);
            processListLimit(files, 50, downloadSingle, function(err)
            {
                if (err)
                {
                    log.error('makeFolderSync_RemoteAccessError:',filestoreFolderPath, err);
                }
                log.debug('Get List of files from Filestore[' + filestoreFolderPath + '] elapsed:', meshNowMs() - startedAt,'ms');
                if (!changes.updated.length) delete changes.updated;
                if (!changes.added  .length) delete changes.added;
                callback(null, changes);
            });
        }
        //......................................................................
        function processFolderContents(err, folderContents)
        {
            if (err)
            {
                log.error('ERROR: getFolderContents:',id, 'err:',err);
                return callback(err);
            }

            log.debug('After_GetFolderContents:',id,
                     'folders:', propertyCount(folderContents.folders),
                       'files:', propertyCount(folderContents.files  ));

            log.debug('folderContents:',err, folderContents);
            if (folderContents && folderContents.files)
            {
                downloadFileList(folderContents.files)
            }
        }
        ////////////////////////////////////////////////////////////////////////
        //log.info('BeginFolderCheck:',filestoreFolderPath);
        getFolderContents(filestoreFolderPath, processFolderContents);
    }
    //..........................................................................
    function doCheck()
    {
        doSync(function(err, changes)
        {
            if (changes)
            {
                emitter.emit('changes',changes);
            }
            if (active)
                scheduleNextCheck()
        });
    }
    //..........................................................................
    function scheduleNextCheck()
    {
        timer = wait(period * 1000).then(doCheck);
    }
    //..........................................................................
    function clearTimer()
    {
        if (timer)
        {
            clearTimeout(timer);
            timer = null;
        }
    }
    //..........................................................................
    function stop()
    {
        active = false;
        clearTimer();
    }
    //..........................................................................
    function start()
    {
        active = true;
        doCheck();
    }
    //..........................................................................
    function single(callback)
    {
        doSync(callback);
    }
    ////////////////////////////////////////////////////////////////////////////
    var publicScope =
    {
        on : emitter.on,
        start,
        stop,
        single,
    };
    if (track)
        syncers[id] = publicScope;

    if (autostart)
        wait(1).then(start); //So client can add listeners before we do anything

    functionAsProperty_ReadOnly(publicScope, function(){return id                 ;}, 'id'                 );
    functionAsProperty_ReadOnly(publicScope, function(){return filestoreFolderPath;}, 'filestoreFolderPath');
    functionAsProperty_ReadOnly(publicScope, function(){return localFolderPath    ;}, 'localFolderPath'    );
    functionAsProperty_ReadOnly(publicScope, function(){return period             ;}, 'period'             );

    return publicScope;
}
//..............................................................................

//..............................................................................
function getSyncers()
{
    return syncers;
}
//..............................................................................

addToNameSpace(makeFolderSync, 'makeFolderSync');
