//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const
{
    isString,
    isNumeric,
    addProperties,
    processList
} = util;
//..............................................................................

//..............................................................................
function isIpAddressV4(ip)
{
    function validNumber(n)
    {
        if (!isNumeric(n)) return false;

        n = parseFloat(n);
        return (n >= 0 && n <= 255);
    }
    ////////////////////////////////////////////////////////////////////////////
    if (!ip || !isString(ip)) return false;

    var parts = ip.split('.');
    return (parts                 &&
            parts.length === 4    &&
            validNumber(parts[0]) &&
            validNumber(parts[1]) &&
            validNumber(parts[2]) &&
            validNumber(parts[3]));
}
//..............................................................................

//..............................................................................
function testIsIpAddressV4()
{
    var invalidIPs =
    [
        '192.0.2.16:80/30',
        '192.0.2.16a',
        'qwerty',
        '127.0.0.1:8000',
        'ftp://www.example.com',
        'javascript:alert(\'hello\');',
        'abc.0.1.2',
        'This is not a v4 IP',
        '2001:db8::7',
        'FEDC:BA98:7654:3210:FEDC:BA98:7654:3210',
        '1080:0:0:0:8:800:200C:417A',
        'v1.09azAZ-._~!$&\'()*+,;=:',
        'a:b:c:d:e::1.2.3.4'
    ];

    var validIPs =
    [
        '0.0.0.0',
        '0.0.0.1',
        '0.0.0.3',
        '0.0.0.7',
        '0.0.0.15',
        '0.0.0.31',
        '0.0.0.63',
        '0.0.0.127',
        '0.0.0.255',
        '0.0.1.255',
        '0.0.3.255',
        '0.0.7.255',
        '0.0.15.255',
        '0.0.31.255',
        '0.0.63.255',
        '0.0.127.255',
        '0.0.255.255',
        '0.1.255.255',
        '0.3.255.255',
        '0.7.255.255',
        '0.15.255.255',
        '0.31.255.255',
        '0.63.255.255',
        '0.127.255.255',
        '0.255.255.255',
        '1.255.255.255',
        '3.255.255.255',
        '7.255.255.255',
        '15.255.255.255',
        '31.255.255.255',
        '63.255.255.255',
        '127.255.255.255',
        '255.255.255.255',
        '255.255.255.254',
        '255.255.255.252',
        '255.255.255.248',
        '255.255.255.240',
        '255.255.255.224',
        '255.255.255.192',
        '255.255.255.128',
        '255.255.255.000',
        '255.255.254.000',
        '255.255.252.000',
        '255.255.248.000',
        '255.255.240.000',
        '255.255.224.000',
        '255.255.192.000',
        '255.255.128.000',
        '255.255.000.000',
        '255.254.000.000',
        '255.252.000.000',
        '255.248.000.000',
        '255.240.000.000',
        '255.224.000.000',
        '255.192.000.000',
        '255.128.000.000',
        '255.000.000.000',
        '254.000.000.000',
        '252.000.000.000',
        '248.000.000.000',
        '240.000.000.000',
        '224.000.000.000',
        '192.000.000.000',
        '128.000.000.000',
        '000.000.000.000'
    ];
    log.info('testingIpAddresses');
    processList(validIPs,function(ip)
    {
        if (!isIpAddressV4(ip)) log.error('ERROR: Failed to recognize IpAddressV4:',ip);
    });
    processList(invalidIPs,function(ip)
    {
        if (isIpAddressV4(ip)) log.error('ERROR: Falsely recognized IpAddressV4:',ip);
    });
}
//..............................................................................

//..............................................................................
function isAbsoluteUrl(path)
{
    return (path.indexOf('://') > 0 || path.indexOf('//') === 0);
}
//..............................................................................

//..............................................................................
function test_isAbsoluteUrl()
{
    const cases =
    [
        {u:'chrome-devtools://devtools/remote/serve_file/' , result:true },
        {u:'http://example.com'                            , result:true },
        {u:'HTTP://EXAMPLE.COM'                            , result:true },
        {u:'https://www.example.com'                       , result:true },
        {u:'ftp://example.com/file.txt'                    , result:true },
        {u:'//cdn.example.com/lib.js'                      , result:true },
        {u:'/myfolder/test.txt'                            , result:false},
        {u:'test'                                          , result:false},
    ];

    processList(cases, function(item)
    {
        var result = isAbsoluteUrl(item.u);
        if (result !== item.result)
            console.error('ERROR: isAbsoluteUrl:', item.u, 'is:'+result, 'should be:'+item.result);
        else
            console.log('isAbsoluteUrl:', item.u, 'is:'+result);

    });
}
// test_isAbsoluteUrl();
//..............................................................................

//testIsIpAddressV4();

addProperties(util,
{
    isIpAddressV4,
    isAbsoluteUrl
});
