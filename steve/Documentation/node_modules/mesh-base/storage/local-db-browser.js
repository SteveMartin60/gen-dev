//..............................................................................
const {logger, util} = cxq;
//..............................................................................

//..............................................................................
const 
{
    processList, 
    doCallback,
    addToNameSpace,
    functionAsProperty_ReadOnly 
} = util;
//..............................................................................

//..............................................................................
const log = logger('local-db');
log.setLevel('info');
//..............................................................................

//..............................................................................
const indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;
//..............................................................................

//..............................................................................
function makeLocalDB(databaseId, requiredTables)
{
    var db;
    var opened    = false;
    var tableIds  = {};
    var dbVersion = 1;
    //..........................................................................
    function reset()
    {
        db       = null;
        opened   = false;
        tableIds = {};
    }
    //..........................................................................
    function updateInfo(newDB)
    {
        db        = newDB;
        opened    = true;
        tableIds  = {};
        dbVersion = db.version;
        log.debug('updateInfo:', db.objectStoreNames, db);
        for (var i=0; i<db.objectStoreNames.length; i++)
        {
            var id = db.objectStoreNames.item(i);
            tableIds[id] = id;
        }
        log.debug('updateInfo:tableIds:', tableIds);
    }
    //..........................................................................
    function getMissingTablesList()
    {
        var result = [];
        if (requiredTables && requiredTables.length)
        {
            processList(requiredTables, function(tableId)
            {
                if (!tableIds[tableId])
                {
                    log.info('missingRequestedTable:',tableId);
                    result.push(tableId);
                }
            });
        }
        if (!result.length)
             result = null;

        return result;
    }
    //..........................................................................
    function getInfo(callback)
    {
        var request = indexedDB.open(databaseId);
        request.onsuccess = function()
        {
            updateInfo(request.result);
            log.info('handleGetInfoSuccess');
            callback(null);
        };
        request.onerror = function handleFailure(event)
        {
            log.error('handleGetInfoFailure:', event);
            callback(event);
        };
    }
    //..........................................................................
    function doOpen(version, tablesToAdd, callback)
    {
        var request;
        //......................................................................
        function handleUpgradeNeeded()
        {
            updateInfo(request.result);
            log.info('handleUpgradeNeeded version:', version, 'add:', tablesToAdd);

            processList(tablesToAdd, function(tableId)
            {
                log.info('addingRequestedTable:',tableId);
                var store = db.createObjectStore(tableId, {keyPath: 'id'});
              //var index = store.createIndex("NameIndex", ["name.last", "name.first"]);
            });
        }
        //......................................................................
        function handleOpenSuccess()
        {
            updateInfo(request.result);
            log.info('handleOpenSuccess');
            callback(null);
        }
        //......................................................................
        function handleOpenFailure(event)
        {
            log.error('handleOpenFailure:', event);
            callback(event);
        }
        ////////////////////////////////////////////////////////////////////////
        if (version)
            request = indexedDB.open(databaseId, version);
        else
            request = indexedDB.open(databaseId);
        request.onupgradeneeded = handleUpgradeNeeded;
        request.onsuccess       = handleOpenSuccess;
        request.onerror         = handleOpenFailure;
    }
    //..........................................................................
    function open(callback)
    {
        getInfo(function(err)
        {
            if (err)
            {
                callback(err);
            }
            else
            {
                var version     = dbVersion;
                var tablesToAdd = getMissingTablesList();

                // If we have some missing tables then need to upgrade DB
                if (tablesToAdd)
                {
                    version++;
                    log.info('upgrading_database:', version, 'addingTables:', tablesToAdd);
                }

                log.info('getMissingTablesList:', version, tablesToAdd);
                db.close();
                reset();
                doOpen(version, tablesToAdd, callback);
            }
        });
    }
    //..........................................................................
 // function addTables(tableId, callback)
 // {
 //     var request;
 //     var oldVersion = db.version;
 //     //......................................................................
 //     function handleCreateSuccess()
 //     {
 //         tableIds[tableId] = tableId;
 //         log.info('handleCreateSuccess:',tableId);
 //         callback(null);
 //     }
 //     //......................................................................
 //     function handleCreateFailure(event)
 //     {
 //         log.error('handleCreateFailure:', event);
 //         callback(event);
 //     }
 //     //......................................................................
 //     close();
 //     request = db.createObjectStore(tableId, {keyPath: "id"});
 //     request.onsuccess = handleCreateSuccess;
 //     request.onerror   = handleCreateFailure;
 // }
    //..........................................................................
    function close(callback)
    {
        if (opened)
            reset();
        if (callback)
            doCallback(callback);
    }
    //..........................................................................
    function notOpenError(callback)
    {
        callback('ERROR: DB has not been opened');
    }
    //..........................................................................
    function getTableNames()
    {
        return Object.keys(tableIds);
    }
    //..........................................................................
    function doSaveEntities(tableId, doClear, entities, callback)
    {
        if (!opened) return notOpenError(callback);

        //......................................................................
        function handleTransactionSuccess()
        {
            log.debug('saveEntities_handleTransactionSuccess:', tableId);
        }
        //......................................................................
        function handleTransactionFailure(event)
        {
            log.error('saveEntities_handleTransactionFailure:', tableId, event);
        }
        //......................................................................
        function handleTransactionComplete()
        {
            log.trace('saveEntities_handleTransactionComplete:', tableId);
            //callback(null);
        }
        ////////////////////////////////////////////////////////////////////////
        var tx = db.transaction(tableId, 'readwrite');
        log.trace('saveEntities:',tableId, entities.length);

        tx.onerror    = handleTransactionFailure;
        tx.oncomplete = handleTransactionComplete;
        tx.onsuccess  = handleTransactionSuccess;

        var store = tx.objectStore(tableId);

        var i = 0;
        //......................................................................
        function processNext()
        {
            if (i < entities.length)
            {
                var entity = entities[i];
                store.put({id: entity.id, entity}).onsuccess = processNext;
                ++i;
            }
            else
            {
                if (callback)
                {
                    callback(null);
                }
            }
        }
        processNext();
        //......................................................................
        //processList(entities, function(entity)
        //{
        //    var request = store.put({id: entity.id, entity});
        //    request.onsuccess = function()
        //    {
        //        log.info('saveEntities_SaveSingle_Success:', tableId, entity.id);
        //    };
        //    request.onerror = function(event)
        //    {
        //        log.error('saveEntities_SaveSingle_Failure:', tableId, entity.id, event);
        //    };
        //});
    }
    //..........................................................................
    function saveEntities(tableId, entities, callback)
    {
        doSaveEntities(tableId, false, entities, callback);
    }
    //..........................................................................
    function replaceEntities(tableId, entities, callback)
    {
        doSaveEntities(tableId, true, entities, callback);
    }
    //..........................................................................
    function removeEntities(tableId, entityIDs, callback)
    {
        //TODO NM: Add remove items function to localDB
        doCallback(callback);
    }
    //..........................................................................
    function loadAll(tableId, callback)
    {
        log.trace('loadAllFromTable:',tableId);
        if (!opened) return notOpenError(callback);
        var records = [];
        //......................................................................
        function handleTransactionSuccess()                                                                         
        {
            log.debug('loadAll_handleTransactionSuccess:', tableId, records.length);
        }
        //......................................................................
        function handleTransactionFailure(event)
        {
            log.error('loadAll_handleTransactionFailure:', tableId, event);
        }
        //......................................................................
        function handleTransactionComplete()
        {
            log.debug('loadAll_handleTransactionComplete:', tableId, 'count:',records.length);
            callback(null, records);
        }
        ////////////////////////////////////////////////////////////////////////
        if (!opened) return notOpenError(callback);

        var tx = db.transaction(tableId, 'readwrite');

        tx.onerror    = handleTransactionFailure;
        tx.oncomplete = handleTransactionComplete;
        tx.onsuccess  = handleTransactionSuccess;

        var store   = tx.objectStore(tableId);
        var request = store.openCursor();
        request.onsuccess = function(event)
        {
            //log.info('loadAll_read_Success:', tableId, request.result);
            var cursor = event.target.result;
            if (cursor)                    
            {
                records.push(cursor.value.entity);
                cursor.continue();
            }
        };
        request.onerror = function(event)
        {
            log.error('loadAll_read_Failure:', tableId, event);
        };
    }
    //..........................................................................
    function clear(tableId, callback)
    {
        if (!opened) return notOpenError(callback);
        log.debug('TableClear_Ready:',tableId);

        var request = db.transaction(tableId, 'readwrite').objectStore(tableId).clear();
        request.onsuccess = function (event)
        {
            log.debug('TableClear_success:',tableId);
            callback(null);
        };
        request.onerror = function (event)
        {
            log.error('ERROR:tableClear:', tableId, event);
            callback(null);
        };
    }
    ////////////////////////////////////////////////////////////////////////////
    const publicScope =
    {
        open,
        close,
        clear,
        saveEntities,
        replaceEntities,
        removeEntities,
        loadAll
    };
    functionAsProperty_ReadOnly(publicScope, function(){return databaseId ;}, 'databaseId');
    functionAsProperty_ReadOnly(publicScope, getTableNames                  , 'tableNames');

    return publicScope;
}
//..............................................................................

addToNameSpace(makeLocalDB, 'makeLocalDB');