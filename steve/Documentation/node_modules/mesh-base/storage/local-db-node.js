//..............................................................................
const {fs, logger, path, pathLocalStorage, util} = cxq;
//..............................................................................

//..............................................................................
const 
{
    processList,
    processListLimit,
    processFunctionListSerial,
    propertyCount,
    doCallback,
    addToNameSpace,
    functionAsProperty_ReadOnly,
    findFilesInFolder,
    readJsonFile,
    writeJsonFile,
    forceDirectorySync,
    isString
} = util;
//..............................................................................

//..............................................................................
var log = logger('local-db');
log.setLevel('info');
//..............................................................................

//..............................................................................
const addedTableFolders = {};
//..............................................................................

//..............................................................................
function getRootStorePath()
{
    if (cxq.capability && cxq.capability.definition && cxq.capability.definition.id)
        return path.join(pathLocalStorage + '-db', cxq.capability.definition.id);
    else
        return path.join(pathLocalStorage + '-db', 'db');
}
//..............................................................................

//..............................................................................
function getCollectionFolder(collectionId)
{
    return path.join(getRootStorePath(), collectionId);
}
//..............................................................................

//..............................................................................
function ensureFolder(collectionId)
{
    if (!addedTableFolders[collectionId])
    {
        addedTableFolders[collectionId] = true;
        forceDirectorySync(getCollectionFolder(collectionId))
    }
}
//..............................................................................

//..............................................................................
function saveToDB(collectionId, entityId, data, callback)
{
    ensureFolder(collectionId);
    if (!collectionId) return console.error('ERROR: Local-DB: Attempt to save to null collection:',entityId    , data);
    if (!entityId    ) return console.error('ERROR: Local-DB: Attempt to save null entity:'       ,collectionId, data);

    collectionId = collectionId.toLowerCase();
    entityId     = entityId    .toLowerCase();

    const folderPath = getCollectionFolder(collectionId);
    const filePath   = path.join(folderPath, entityId + '.json');
    writeJsonFile(filePath, data, function(err)
    {
        if (err)
        {
            console.error('ERROR: Failed_toSaveToLocalStorage:', collectionId, entityId, data, e.stack);
            callback(err);
        }
        else
        {
            callback(null);
        }
    });
}
//..............................................................................

//..............................................................................
// Don't create the folder if it doesn't exist, just skip it
//..............................................................................
function readWholeCollectionAsync(collectionId, mainCallback)
{
    const results        = [];
    const errors         = [];
    const fullFolderPath = getCollectionFolder(collectionId);
    var   fileList       = [];
    //..........................................................................
    function loadSingle(filePath, callback)
    {
        readJsonFile(filePath, function(err, data)
        {
            if (err || !data)
            {
                console.error('Failed to load JSON file from:'+filePath, err);
                errors.push({code:'load_failed',filePath, err});
            }
            else
            if (data.id)
            {
                results.push(data);
            }
            else
            {
                console.error('Failed to load JSON file from:'+filePath, err, data);
                errors.push({code:'data_invalid',filePath, data});
            }
            callback(null);
        });
    }
    //..........................................................................
    function checkFolderExists(callback)
    {
        fs.exists(fullFolderPath, function(existing)
        {
            // console.log('checkFolderExists:2:',existing, collectionId, fullFolderPath);
            if (existing)
                callback(null);
            else
                callback('no_folder');
        });
    }
    //..........................................................................
    function checkFolderValid(callback)
    {
        fs.stat(fullFolderPath, function(err,stats)
        {
            if (err || !stats)
                callback(err);
            else
            if (stats.isDirectory())
                callback(null);
            else
                callback('not_a_folder');
        });
    }
    //..........................................................................
    function getFileList(callback)
    {
        findFilesInFolder(fullFolderPath, null, function(err, data)
        {
            if (err || !data)
            {
                callback(err || 'failed_folder_read');
            }
            else
            {
                fileList = data;
                callback(null);
            }
        });
    }
    //..........................................................................
    function readFiles(callback)
    {
        processListLimit(fileList, 50, loadSingle, function()
        {
            callback(null);
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    processFunctionListSerial([checkFolderExists, checkFolderValid, getFileList, readFiles], function()
    {
        if (propertyCount(errors))
            mainCallback(errors, results);
        else
            mainCallback(null, results);
    });
}
//..............................................................................

//..............................................................................
// This function will create required folders synchronously
//..............................................................................
function makeLocalDB(databaseId, requiredTables=[])
{
    const tableIds = {};
    processList(requiredTables, function(id){tableIds[id] = id});
    //..........................................................................
    function open(callback)
    {
        if (callback)
            doCallback(callback);
    }
    //..........................................................................
    function close(callback)
    {
        if (callback)
            doCallback(callback);
    }
    //..........................................................................
    function getTableNames()
    {
        return Object.keys(tableIds);
    }
    //..........................................................................
    function doSaveEntities(tableId, doClear, entities, callback)
    {
        function saveSingle(entity, callback)
        {
            if (isString(entity.id))
                saveToDB(tableId, entity.id, entity, callback)
        }
        ////////////////////////////////////////////////////////////////////////
        processListLimit(entities, 50, saveSingle, function()
        {
            if (callback)
                doCallback(callback);
        });
    }
    //..........................................................................
    function saveEntities(tableId, entities, callback)
    {
        doSaveEntities(tableId, false, entities, callback);
    }
    //..........................................................................
    function replaceEntities(tableId, entities, callback)
    {
        doSaveEntities(tableId, true, entities, callback);
    }
    //..........................................................................
    function removeEntities(tableId, entityIDs, callback)
    {
        //TODO NM: Add remove items function to localDB
        if (callback)
            doCallback(callback);
    }
    //..........................................................................
    function loadAll(tableId, callback)
    {
        readWholeCollectionAsync(tableId, function(err, data)
        {
            if (err)
            {
                console.warn('ERROR:LoadedSingleTable:', tableId, err);
                callback(null, []);
            }
            else
            {
                callback(null, data);
            }
        });
    }
    //..........................................................................
    function clear(tableId, callback)
    {
        if (callback)
            doCallback(callback);
    }
    ////////////////////////////////////////////////////////////////////////////
    var publicScope =
    {
        open,
        close,
        clear,
        saveEntities,
        replaceEntities,
        removeEntities,
        loadAll
    };
    functionAsProperty_ReadOnly(publicScope, function(){return databaseId ;}, 'databaseId');
    functionAsProperty_ReadOnly(publicScope, getTableNames                  , 'tableNames');

    return publicScope;
}
//..............................................................................

addToNameSpace(makeLocalDB, 'makeLocalDB');