//..............................................................................
const {fs, path, pathLocalStorage, util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    loadJsonSync,
    saveJsonSync,
    processList,
    forceDirectorySync,
    deleteExistingFileSync,
    asString
} = util;
//..............................................................................

//..............................................................................
var rootPath  = pathLocalStorage;
var storeName = 'generic';
var stores    = {};
//..............................................................................
forceDirectorySync(rootPath);

//..............................................................................
function getRootStorePath()
{
    if (cxq.capability && cxq.capability.definition && cxq.capability.definition.id)
        return path.join(pathLocalStorage, cxq.capability.definition.id);
    else
        return path.join(pathLocalStorage, 'generic');
}
//..............................................................................

//..............................................................................
function getCollectionFolder(collectionId)
{
    return path.join(getRootStorePath(), collectionId);
}
//..............................................................................

//..............................................................................
var started = false;
function initLocalStorage()
{
    if (started) return true;

    var extendedPath = getRootStorePath();
    if (extendedPath)
    {
        rootPath = extendedPath;
        forceDirectorySync(rootPath);
        started = true;
    }
    else
    {
        console.error('ERROR: Failed to start localstorage:',extendedPath);
    }
    return started;
}
//..............................................................................

//..............................................................................
function saveToLocalStorage(collectionId, entityId, data)
{
    if (!initLocalStorage()) return false;

    if (!collectionId) return console.error('ERROR: Local-Storage: Attempt to save to null collection:',entityId    , data);
    if (!entityId    ) return console.error('ERROR: Local-Storage: Attempt to save null entity:'       ,collectionId, data);

    collectionId = collectionId.toLowerCase();
    entityId     = entityId    .toLowerCase();

    console.log('saveToLocalStorage:',collectionId, entityId);

    const folderPath = path.join(rootPath, collectionId);
    const filePath   = path.join(folderPath, entityId + '.json');

    saveJsonSync(filePath, data);
}
//..............................................................................

//..............................................................................
function readFromLocalStorage(collectionId, entityId)
{
    if (!initLocalStorage()) return null;

    if (!collectionId) return console.error('ERROR: Local-Storage: Attempt to read from null collection:',entityId    );
    if (!entityId    ) return console.error('ERROR: Local-Storage: Attempt to read null entity:'         ,collectionId);

    collectionId = collectionId.toLowerCase();
    entityId     = entityId    .toLowerCase();

    const folderPath = getCollectionFolder(collectionId);
    if (!fs.existsSync(folderPath))
        return null;

    const filePath = path.join(folderPath, entityId + '.json');
    if (!fs.existsSync(filePath))
        return null;

    // console.log('readFromLocalStorage:',collectionId, entityId);

    const result = loadJsonSync(filePath);
    if (!result)
        console.error('ERROR: Failed_toReadFromLocalStorage:', e, collectionId, entityId);

    return result;
}
//..............................................................................

//..............................................................................
function removeFromLocalStorage(collectionId, entityId)
{
    if (!initLocalStorage()) return null;

    if (!collectionId) return console.error('ERROR: Local-Storage: Attempt to remove from null collection:',entityId    );
    if (!entityId    ) return console.error('ERROR: Local-Storage: Attempt to remove null entity:'         ,collectionId);

    collectionId = collectionId.toLowerCase();
    entityId     = entityId    .toLowerCase();

    const folderPath = getCollectionFolder(collectionId);
    const filePath   = path.join(folderPath, entityId + '.json');
    const oldData    = readFromLocalStorage(collectionId, entityId);

    if (oldData)
    {
        deleteExistingFileSync(filePath);

        if (fs.existsSync(filePath))
            console.error('ERROR: Failed to remove entity from Local-Storage:', filePath);

        return oldData;
    }
    else
    if (fs.existsSync(filePath))
    {
        deleteExistingFileSync(filePath);
        return null;
    }
}
//..............................................................................

//..............................................................................
function readLocalStorageContentsSingle(collectionId)
{
    if (!initLocalStorage()) return null;

    var stored         = {};
    var entityCount    = 0;
    var errorCount     = 0;
    var fullFolderPath = path.join(rootPath, collectionId);

    if (!fs.existsSync(fullFolderPath))
        return {stored, entityCount, errorCount};

    var stats = fs.statSync(fullFolderPath);
    if (stats.isDirectory())
    {
        var entityFilenames = fs.readdirSync(fullFolderPath);
        processList(entityFilenames, function(entityFilename)
        {
            var fullpath = path.join(fullFolderPath, entityFilename);
          //console.log('   readingEntity:', fullpath);
            var parts = entityFilename.split('.');
            if (parts.length < 2 || parts[1] !== 'json')
            {
                console.error('ERROR: Local-Storage invalid filename:',fullpath);
                errorCount++;
            }
            else
            {
                var data = loadJsonSync(fullpath);
                if (data)
                {
                    entityCount++;
                    var entityId = parts[0];
                    stored[entityId] = data;
                }
                else
                {
                    console.error('ERROR: Local-Storage failed to load JSON filename:',fullpath);
                    errorCount++;
                }
            }
        });
    }
    return {stored, entityCount, errorCount};
}
//..............................................................................

//..............................................................................
function readLocalStorageContents()
{
    if (!initLocalStorage()) return null;

    console.log('readLocalStorageContents:',rootPath);
    var stored         = {};
    var entityCount    = 0;
    var errorCount     = 0;
    var collectionList = fs.readdirSync(rootPath);

    if (collectionList)
    {
        console.log('loading_collectionList:',collectionList);

        processList(collectionList, function(collectionId)
        {
            var single = readLocalStorageContentsSingle(collectionId);
            if (single)
            {
                stored[collectionId] = single.stored;
                entityCount         += single.entityCount;
                errorCount          += single.errorCount;
            }
        });
    }

  //console.log('readLocalStorageContents:result:',stored);
    console.log('readLocalStorageContents', collectionList.length,'collections,:', collectionList.length, 'entities:',entityCount, 'errors:',errorCount);
    return stored;
}
//..............................................................................

addProperties(util,
{
    saveToLocalStorage,
    removeFromLocalStorage,
    readFromLocalStorage,
    readLocalStorageContents,
});
