//..............................................................................
const metrics = 'metrics';
const control = 'control';
const dynamic = 'dynamic';
const none    = 'none';
const fast    = 'fast';
const slow    = 'slow';
const machine = 'machine';
//..............................................................................


//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const
{
    processList,
} = util;
//..............................................................................

//..............................................................................
// Meshtalk commands
// Use 2-Byte format
// First Byte represents the area
// Second byte represents the command within that area.
//..............................................................................
const commandPrefix =
{
    SYSTEM   : 0x00,
    REGISTER : 0x01,
    BLOB     : 0x02,
    ACTION   : 0x03,
    EVENT    : 0x04,
};
//..............................................................................

//..............................................................................
// These constants need to be mapped into whatever local structure is required
// by the transport adapter.
// If we can keep as bytes then do not need to do any mapping.
//..............................................................................
const commands =
[
    // Non-Authenticated (Not Encrypted)
    {id:'SYS_ADVERTISEMENT'            , number: 0x0000},

    // System - 0x01
    // These should not be required between device and machine

    // Maybe not required?
    // Feels like they are just used at Meshtalk layer to indicate to higher-level software that something happened?
    {id:'SYS_CONNECT'                  , number: 0x0011},
    {id:'SYS_CONNECTED'                , number: 0x0012}, // Maybe not required?
    {id:'SYS_DISCONNECT'               , number: 0x0013}, // Maybe not required?

    {id:'SYS_HEARTBEAT'                , number: 0x0014}, // Same as SYS_ADVERTISEMENT but encrypted

    // Registers - 0x01
    {id:'REGISTER_READ'                , number: 0x0101}, // Sent by machine to read register(s)
    {id:'REGISTER_READ_ACK'            , number: 0x0102}, // Sent by device to respond to REGISTER_READ
    {id:'REGISTER_WRITE'               , number: 0x0103}, // Sent by machine to set register(s)
    {id:'REGISTER_WRITE_ACK'           , number: 0x0104}, // Sent by device to respond to REGISTER_WRITE
    {id:'REGISTER_WRITE_PROGRESS'      , number: 0x0105}, // Async Progress for REGISTER_WRITE seeking
    {id:'REGISTER_WRITE_COMPLETE'      , number: 0x0106}, // Async Completed for REGISTER_WRITE seeking (Fail or Succeed)
    {id:'REGISTER_NOTIFY'              , number: 0x0107}, // Unsolicited send from device - when hit delta-limit or period-timeout

    // Blobs - 0x02
    {id:'BLOB_GET_LIST'                , number: 0x0200},
    {id:'BLOB_GET_LIST_ACK'            , number: 0x0201},
    {id:'BLOB_GET_INFO'                , number: 0x0202},
    {id:'BLOB_GET_INFO_ACK'            , number: 0x0203},
    {id:'BLOB_GET'                     , number: 0x0204},
    {id:'BLOB_GET_ACK'                 , number: 0x0205},
    {id:'BLOB_ADD'                     , number: 0x0206},
    {id:'BLOB_ADD_ACK'                 , number: 0x0207},
    {id:'BLOB_GET'                     , number: 0x0208},
    {id:'BLOB_DELETE'                  , number: 0x0209},
    {id:'BLOB_DELETE_ACK'              , number: 0x020A},
    {id:'BLOB_UPDATE'                  , number: 0x020B},
    {id:'BLOB_UPDATE_ACK'              , number: 0x020C},

    // Actions - 0x03
    {id:'ACTION_REQUEST'               , number: 0x0300}, // Sent by machine to request device action
    {id:'ACTION_REQUEST_ACK'           , number: 0x0301}, // Sent by device to respond to ACTION_REQUEST
    {id:'ACTION_REQUEST_PROGRESS'      , number: 0x0302}, // Progress notification for ACTION_REQUEST
    {id:'ACTION_REQUEST_COMPLETE'      , number: 0x0303}, // Completion notification for ACTION_REQUEST (Fail or Succeed)

    //Events - 0x04
    {id:'EVENT_NOTIFY'                 , number: 0x0400}, // Send by device - Unsolicited named event

    {id:'META_GET'                     , number: 0x0501}, //Send by machine to get metadata definition of device from device
    {id:'META_GET_ACK'                 , number: 0x0502},

    // System actions - Sent as ACTION_REQUEST by machine to device.
    // These are not part of the above commands since set as action-ID in action request
    {id:'ACTION_REBOOT'                , number: 0x0001}, // Restart the MCU
    {id:'ACTION_SLEEP_DEEP'            , number: 0x0002}, // Deep sleep and wake at supplied time
    {id:'ACTION_SLEEP_LIGHT'           , number: 0x0003}, // Light sleep and wake at supplied time
    {id:'ACTION_CHANGE_SOFTWARE'       , number: 0x0004}, // Machine sends to device with blob ID. Assumes we have already uploaded firmware as blob
    {id:'ACTION_CHANGE_KEY'            , number: 0x0005}, // Machine sends new key to device (32-Bytes)

];
//..............................................................................

const t1 =
[
    {id:'REGISTER_READ'                , number: 0x0101}, // Sent by machine to read register(s)
    {id:'REGISTER_WRITE'               , number: 0x0103}, // Sent by machine to set register(s)
    {id:'REGISTER_WRITE_PROGRESS'      , number: 0x0105}, // Async Progress for REGISTER_WRITE seeking
    {id:'REGISTER_WRITE_COMPLETE'      , number: 0x0106}, // Async Completed for REGISTER_WRITE seeking (Fail or Succeed)
    {id:'REGISTER_NOTIFY'              , number: 0x0107}, // Unsolicited send from device - when hit delta-limit or period-timeout
    {id:'BLOB_GET_LIST'                , number: 0x0200},
    {id:'BLOB_GET_INFO'                , number: 0x0202},
    {id:'BLOB_GET'                     , number: 0x0204},
    {id:'BLOB_ADD'                     , number: 0x0206},
    {id:'BLOB_GET'                     , number: 0x0208},
    {id:'BLOB_DELETE'                  , number: 0x0209},
    {id:'BLOB_UPDATE'                  , number: 0x020B},
    {id:'EVENT'                        , number: 0x0400}, // Send by device - Unsolicited named event
    {id:'ACTION'                       , number: 0x0300}, // Sent by machine to request device action
    {id:'ACTION_PROGRESS'              , number: 0x0302}, // Progress notification for ACTION_REQUEST
    {id:'ACTION_COMPLETE'              , number: 0x0303}, // Completion notification for ACTION_REQUEST (Fail or Succeed)
];
//..............................................................................

//..............................................................................
// Use hard-coded ports for UDP communications.
// Different ports in different directions.
// Addresses can change but the ports remain constant.
//..............................................................................
const machineCommsPort =  31880;
// Devices will send to this port on the machine
// Machine will listen on this port for messages from devices

const deviceCommsPort  =  31881;
// Machine will send to this port on devices.
// Devices will listen on this port for messages from the machine
//..............................................................................

//..............................................................................
// Device will broadcast on multicast address and machines will detect.
//..............................................................................
const udpDiscoveryAddress = '233.255.255.255';
const udpDiscoveryPort    =  31879;
//..............................................................................

//..............................................................................
const publicScope =
{
    machine,
    metrics,
    control,
    dynamic,
    none,
    fast,
    slow,
    deviceCommsPort,
    machineCommsPort,
    udpDiscoveryAddress,
    udpDiscoveryPort,
};
//..............................................................................

//..............................................................................
processList(commands, function(command)
{
    publicScope[command.id    ] = command;
    publicScope[command.number] = command;
});
//..............................................................................

module.exports = publicScope;


