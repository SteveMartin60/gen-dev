const unitTypes      = require('./unit-types');
const unitTypeGroups = require('./unit-type-groups');
//..............................................................................
const {util} = cxq;
//..............................................................................

//..............................................................................
const
{
    addProperties,
    celsiusToFahrenheit,
    fahrenheitToCelsius,
    celsiusToKelvin,
    kelvinToCelsius,
    fahrenheitToKelvin,
    kelvinToFahrenheit,
    gravityToMpss,
    mpssToGravity,       
} = util;
//..............................................................................

//..............................................................................
unitTypeGroups.temperature.converters =
{
    kelvin:
    {
        celsius    : kelvinToCelsius,
        fahrenheit : kelvinToFahrenheit
    },
    celsius:
    {
        kelvin     : celsiusToKelvin,
        fahrenheit : celsiusToFahrenheit
    },
    fahrenheit:
    {
        kelvin     : fahrenheitToKelvin,
        celsius    : fahrenheitToCelsius
    }
};
//..............................................................................

//..............................................................................
unitTypeGroups.acceleration.converters =
{
    metre_per_sec_sec:
    {
        gravity : mpssToGravity,
    },
    gravity:
    {
        metre_per_sec_sec : gravityToMpss,
    }
};
//..............................................................................

//..............................................................................
function formatUnit(value, type, options)
{
    // Options:
    //    decimals : 2
    //    autounit : true   // switch to best scaled
    //    longunit : false  // if true use long description like "Meters" instead of M

    // Use the type string to get the unit, then use this to format the string.
    // Default to "default" decimals
    // Allow some smarts, so if the units are in meters, 1005m => 1.005 KM, 12345 KB => 12.35 MB
}
//..............................................................................

//..............................................................................
function makeUnit(unit, value)
{
    function to(otherUnit)
    {
        if (unit == otherUnit)
            return value;
        else
        if (converters[unit] && converters[unit][otherUnit])
            return converters[unit][otherUnit](value);
        else
            return NaN;
    }
    ////////////////////////////////////////////////////////////////////////////
    const unitType = unitTypes[unit];
    if (!unitType)
        return null;
    const group = unitTypeGroups[unitType.group];
    const converters = group.converters;
    const publicScope =
    {
        to
    }
}
//..............................................................................

//..............................................................................
// var c = makeUnit('celsius', 27.3);
// var k = c.to('kelvin');
//..............................................................................

addProperties(util,
{
    formatUnit
});



























