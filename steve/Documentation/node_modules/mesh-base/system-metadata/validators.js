const passwordValidator = require('password-validator');
const helpers           = require('validator'         );

//..............................................................................
const {Int64, util} = cxq;
//..............................................................................
const 
{
    isDefined,  
    isString,   
    isNumeric,  
    asString,
    isColor
} = util;
//..............................................................................

//..............................................................................
function isEmail(str)
{
    return (isString(str) && helpers.isEmail(str));
}
//..............................................................................

//..............................................................................
function isUrl(str)
{
    return (isString(str) && helpers.isURL(str));
}
//..............................................................................

//..............................................................................
function isJSON(jsonStr)
{
    return (isString(jsonStr) && helpers.isJSON(jsonStr));
}
//..............................................................................

//..............................................................................
function isNumber(num)
{
    var n = parseFloat('' + num);
    return isNumeric(n);
}
//..............................................................................

//..............................................................................
function isInteger(num)
{
    var numStr = num + '';
    return helpers.isInt(numStr);
}
//..............................................................................

//..............................................................................
function isLongInt(val)
{
    var ceiling = Int64.MAX_VALUE;
    var floor   = Int64.MIN_VALUE;
    var number;

    if (typeof val === 'string' || typeof val === 'number')
        val = Int64.fromString(val + '', false);

    return ceiling.compare(val) >= 0 && floor.compare(val) <= 0;
}
//..............................................................................

//..............................................................................
function isUnsignedLongInt(val)
{
    var ceiling = Int64.MAX_UNSIGNED_VALUE;
    var floor   = Int64.fromString('0'   , true);
    var number  = Int64.fromString(val + '', true);
    return ceiling.compare(number) >= 0 && floor.compare(number) <= 0;
}
//..............................................................................

//..............................................................................
function isFloat(num)
{
    var numStr = num + '';
    return helpers.isFloat(numStr);
}
//..............................................................................

//..............................................................................
function hasUppercase(s)
{
    if (!isString(s)) return false;
    return (s.toLowerCase() !== s);
}
//..............................................................................

//..............................................................................
function hasLowercase(s)
{
    if (!isString(s)) return false;
    return (s.toUpperCase() !== s);
}
//..............................................................................

//..............................................................................
const passwordChecker = new passwordValidator();
passwordChecker
    .is ().min(8)          // Minimum length 8
    .is ().max(50)         // Maximum length 50
    .has().uppercase()     // Must have uppercase letters
    .has().lowercase()     // Must have lowercase letters
    .has().digits()        // Must have digits
    .has().letters()       // Must have letters
    .has().not().spaces(); // Should not have spaces
//..............................................................................

//..............................................................................
function isPassword(value)
{
    return passwordChecker.validate(value);
}
//..............................................................................

//..............................................................................
function isPercent(num)
{
    return isNumber(num);
}
//..............................................................................

//..............................................................................
function toBoolean(value)
{
         if (typeof value === 'boolean') return value;
    else if (value === 'true'          ) return true;
    else if (value === 'false'         ) return false;
    else if (value === 1               ) return true;
    else if (value === 0               ) return false;
    else if (value === 'yes'           ) return true;
    else if (value === 'no'            ) return false;
    else                                 return value;
}
//..............................................................................

//..............................................................................
function isBoolean(value)
{
    return typeof toBoolean(value) === 'boolean';
}
//..............................................................................

//..............................................................................
function isISO8601(isoDate)
{
    return (isString(isoDate) && helpers.isISO8601(isoDate));
}
//..............................................................................

//..............................................................................
function isPresent(value)
{
//  console.log('isPresent['+value+']',asString (value));
    if (value === null   ) return false;
    if (!isDefined(value)) return false;
    if (!asString (value)) return false;

    return true;
}
//..............................................................................

//..............................................................................
const passwordInfo =
{
    description_en : 'Passwords must be 8 or more characters,including at least 1 number, 1 uppercase letter and 1 lowercase letter',
    description_zh : '密码长度必须至少为8，包含至少一个数字，一个大写字母以及一个小写字母'
};
//..............................................................................

//..............................................................................
var msg =
{
    string  : { code: 201, caption_en: 'Input must be a string'                , description_en: 'Input must be a string'                        , caption_zh: '值必须是字符串'},
    json    : { code: 202, caption_en: 'Invalid JSON'                          , description_en: 'Input must be JSON'                            , caption_zh: '值必须是JSON'},
    number  : { code: 203, caption_en: 'Invalid number'                        , description_en: 'Input must be a number'                        , caption_zh: '值必须是数字'},
    integer : { code: 204, caption_en: 'Invalid integer'                       , description_en: 'Input must be an integer'                      , caption_zh: '值必须是整数'},
    int64   : { code: 205, caption_en: 'Invalid signed 64-bit integer'         , description_en: 'Input must be a signed 64-bit integer'         , caption_zh: '值必须是64位整数'},
    uint64  : { code: 206, caption_en: 'Requires unsigned 64-bit integer'      , description_en: 'Input must be an unsigned 64-bit integer'      , caption_zh: '值必须是无符号64位整数'},
    float   : { code: 207, caption_en: 'Invalid floating-point number'         , description_en: 'Input must be a floating-point number'         , caption_zh: '值必须是浮点数'},
    double  : { code: 208, caption_en: 'Invalid floating-point number'         , description_en: 'Input must be a double floating-point number'  , caption_zh: '值必须是双精度浮点数'},
    boolean : { code: 208, caption_en: 'Invalid boolean value'                 , description_en: 'Input must be a boolean value'                 , caption_zh: '值必须是布尔值'},
    percent : { code: 209, caption_en: 'Percentage required'                   , description_en: 'Input must be a number in percent format'      , caption_zh: '值必须是百分数'},
    ISO8601 : { code: 211, caption_en: 'Invalid date-time'                     , description_en: 'Input must be a date-time value'               , caption_zh: '值必须是时间日期值'},
    hrtime  : { code: 212, caption_en: 'Invalid time value'                    , description_en: 'Input must be a high-resolution time value'    , caption_zh: '值必须是高精确度时间值'},
    email   : { code: 301, caption_en: 'Invalid email address'                 , description_en: 'Input must be an email string'                 , caption_zh: '值必须是电子邮件字符串'},
    url     : { code: 302, caption_en: 'Invalid URL string'                    , description_en: 'Input must be a URL string'                    , caption_zh: '值必须是超链接字符串'},
    color   : { code: 303, caption_en: 'Invalid color'                         , description_en: 'Input must be a formatted CSS color'           , caption_zh: '非法颜色值'},
    required: { code: 400, caption_en: 'Required'                              , description_en: 'A value is required'                           , caption_zh: '必需'},
    password: { code: 304, caption_en: 'Invalid password'                      , description_en:  passwordInfo.description_en                    , caption_zh: '非法密码',
                                                                                 description_zh:  passwordInfo.description_zh}
};
//..............................................................................

//..............................................................................
var validators =
{
    isString         :{fn:isString         , info:msg.string         },
    isEmail          :{fn:isEmail          , info:msg.email          },
    isUrl            :{fn:isUrl            , info:msg.url            },
    isJSON           :{fn:isJSON           , info:msg.json           },
    isBoolean        :{fn:isBoolean        , info:msg.boolean        },
    isInteger        :{fn:isInteger        , info:msg.integer        },
    isFloat          :{fn:isFloat          , info:msg.float          },
    isNumber         :{fn:isNumber         , info:msg.number         },
    isPercent        :{fn:isPercent        , info:msg.percent        },
    isColor          :{fn:isColor          , info:msg.color          },
    isISO8601        :{fn:isISO8601        , info:msg.ISO8601        },
    isLongInt        :{fn:isLongInt        , info:msg.int64          },
    isUnsignedLongInt:{fn:isUnsignedLongInt, info:msg.uint64         },
    isPresent        :{fn:isPresent        , info:msg.required       },
    isPassword       :{fn:isPassword       , info:msg.password       }
};
//..............................................................................

module.exports = validators;
