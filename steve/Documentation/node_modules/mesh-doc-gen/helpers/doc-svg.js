//..............................................................................

const
{
    fs,
    path,
    util,
} = cxq;

const
{
    forceDirectorySync,
    isInteger,
    makeColor,
    compareObjects,
    isArrayWithElements,
} = util;
//..............................................................................

//..............................................................................

const
{
    colorsHex,
    getColorByNet,
    sides,
    commentLines,
    svgClassNames,
    getCoordinateFromLetter,
    stringsTemplate,
    mbDetails,
} = cxq.meshDocGen;

//..............................................................................

//..............................................................................
const elementConstants =
{
    radiusPadMB           : 0.42,
    radiusPadFiducialMB   : 0.125,
    fontFamilyMB          : 'consolas',
    fontSizeMB            : 0.22,
    fontSizeNetMB         : 0.24,
    textAnchorMB          : 'middle',
    svgElementTypeRect    : 'rect',
    widthStrokeOutlineMB  : 0.01,
    radiusCornerOutlineMB : 0.695,
    offsetTextAbove       : -0.09,
    offsetTextBelow       : +0.2,
};
//..............................................................................

//..............................................................................
function getOutlineMB(componentMB, side)
{
    var dimensions = {};

    var footprint = componentMB.footprint;

    var footprintUC = footprint.toUpperCase();
    var color;

    if (side === sides.top)
    {
        color = colorsHex.colorFillLightMB;
    }
    else
    {
        color = colorsHex.colorFillDarkMB;
    }

    if (footprintUC === 'MB10X10'    ) dimensions = {x:10, y:10};
    if (footprintUC === 'MB10X14'    ) dimensions = {x:14, y:10};
    if (footprintUC === 'MB14X10'    ) dimensions = {x:14, y:10};
    if (footprintUC === 'MB14X14'    ) dimensions = {x:14, y:14};
    if (footprintUC === 'MB22X14'    ) dimensions = {x:22, y:14};
    if (footprintUC === 'MB14X22'    ) dimensions = {x:22, y:14};

    if (footprintUC === 'MB14X10-MCU') dimensions = {x:14, y:10};
    if (footprintUC === 'MB10X14-MCU') dimensions = {x:14, y:10};

    return '    <'          + elementConstants.svgElementTypeRect    + ' ' +
           'rx="'           + elementConstants.radiusCornerOutlineMB + '" ' +
           'ry="'           + elementConstants.radiusCornerOutlineMB + '" ' +
           'id="'           + 'outline'                              + '" ' +
           'x="'            + 0                                      + '" ' +
           'y="'            + 0                                      + '" ' +
           'width="'        + dimensions.x                           + '" ' +
           'height="'       + dimensions.y                           + '" ' +
           'fill="'         + color                                  + '" ' +
           'stroke="'       + colorsHex.colorStroke                  + '" ' +
           'stroke-width="' + elementConstants.widthStrokeOutlineMB  + '" />';
}
//..............................................................................

//..............................................................................
function getDimensionsMB(footprint)
{
    var footprintUC = footprint.toUpperCase();

    if (footprintUC === 'MB10X10'    ) return {x:10, y:10};
    if (footprintUC === 'MB10X14'    ) return {x:14, y:10};
    if (footprintUC === 'MB14X10'    ) return {x:14, y:10};
    if (footprintUC === 'MB14X14'    ) return {x:14, y:14};
    if (footprintUC === 'MB22X14'    ) return {x:22, y:14};
    if (footprintUC === 'MB14X22'    ) return {x:22, y:14};

    if (footprintUC === 'MB14X10-MCU') return {x:14, y:10};
    if (footprintUC === 'MB10X14-MCU') return {x:14, y:10};
}
//..............................................................................

//..............................................................................
function getPadFiducialMB(component, side)
{
    var color;

    var dimensions = getDimensionsMB(component.footprint);

    var cx = ((dimensions.x/2) - 0.4)*-1;
    var cy = ((dimensions.y/2) - 0.4)*-1;

    if (side === sides.top   )
    {
        color = colorsHex.colorQrCode;
    }

    if (side === sides.bottom)
    {
        color = colorsHex.colorGold;
        cx = 0.4;
        cy = 0.4;
    }

     return '            ' +
           '<circle '      +
           'cx="'          + cx                                   + '" ' +
           'cy="'          + cy                                   + '" ' +
           'r="'           + elementConstants.radiusPadFiducialMB + '" ' +
           'fill="'        + color                                + '" ' +
           'class="no-net' +                                        '" ' +
           'id="fiducial" />';
}
//..............................................................................

//..............................................................................
function getNetNameTrunc(netName)
{
    var netNameTrunc = '';

    if (netName.length > 6)
    {
        netNameTrunc = netName.substring(0,5);

        if (netNameTrunc[netNameTrunc.length -1] === '_')
        {
            netNameTrunc = netNameTrunc.substring(0, netNameTrunc.length -1);
        }

        netNameTrunc = netNameTrunc + 'â€¦'
    }
    else netNameTrunc = netName;

    return netNameTrunc;
}
//..............................................................................

//..............................................................................
function getElementTextNet(elementsObjectSVG)
{
    var x = elementsObjectSVG.x;
    var y = elementsObjectSVG.y + elementConstants.offsetTextBelow;

    var designator   = elementsObjectSVG.designator;
    var textId       = designator + '-Net';
    var netName      = elementsObjectSVG.netNameTrunc;
    var netNameTrunc = elementsObjectSVG.netNameTrunc;
    var svgClass     = elementsObjectSVG.classElementsNet;
    var color        = elementsObjectSVG.colorDark.toHex();

    return '    '          +
        '<text   '         +
        'id="'             + textId                         + '"  ' +
        'x="'              + x                              + '"  ' +
        'y="'              + y                              + '"  ' +
        'designator="'     + designator                     + '" '  +
        'net-name="'       + netName                        + '" '  +
        'net-name-trunc="' + netNameTrunc                   + '" '  +
        'fill="'           + color                          + '" '  +
        'class="'          + svgClass                       + '" '  +
        'font-family="'    + elementConstants.fontFamilyMB  + '" '  +
        'font-size="'      + elementConstants.fontSizeNetMB + '" '  +
        'text-anchor="'    + elementConstants.textAnchorMB  + '" '  +
        '>'                + netName                        +
        '</text>';
}
//..............................................................................

//..............................................................................
function getElementTextNoNet(elementsObjectSVG)
{
    var x          =  elementsObjectSVG.x;
    var y          = (elementsObjectSVG.y) + 0.1;
    var designator =  elementsObjectSVG.designator;
    var color      =  elementsObjectSVG.colorDark.toHex();

    var textId     = designator + '-NoNet';

    return '    '          +
        '<text   '        +
        'id="'             + textId                         + '"  ' +
        'x="'              + x                              + '"  ' +
        'y="'              + y                              + '"  ' +
        'designator="'     + designator                     + '" ' +
        'fill="'           + color                          + '" ' +
        'font-family="'    + elementConstants.fontFamilyMB  + '" ' +
        'font-size="'      + elementConstants.fontSizeNetMB + '" ' +
        'text-anchor="'    + elementConstants.textAnchorMB  + '" ' +
        '>'                + designator                     +
        '</text>';
}
//..............................................................................

//..............................................................................
function getElementTextDesig(elementsObjectSVG)
{
    var x = elementsObjectSVG.x;
    var y = elementsObjectSVG.y + elementConstants.offsetTextAbove;

    var designator   = elementsObjectSVG.designator;
    var netName      = elementsObjectSVG.netNameTrunc;
    var netNameTrunc = elementsObjectSVG.netNameTrunc;
    var svgClass     = elementsObjectSVG.classElementsNet;
    var color        = elementsObjectSVG.colorDark.toHex();

    var textId       = designator + '-Des';

    return '    '          +
        '<text   '         +
        'id="'             + textId                        + '"  ' +
        'x="'              + x                             + '"  ' +
        'y="'              + y                             + '" '  +
        'designator="'     + designator                    + '" '  +
        'net-name="'       + netName                       + '" '  +
        'net-name-trunc="' + netNameTrunc                  + '" '  +
        'fill="'           + color                         + '" '  +
        'class="'          + svgClass                      + '" '  +
        'font-family="'    + elementConstants.fontFamilyMB + '" '  +
        'font-size="'      + elementConstants.fontSizeMB   + '" '  +
        'text-anchor="'    + elementConstants.textAnchorMB + '" '  +
        '>'                + designator                    +
        '</text>';
}
//..............................................................................

//..............................................................................
function getHeatPad(elementsObjectSVG, side)
{
    var padColor;

    if (side=== sides.bottom)
    {
        returnRectOnly = true;
    }
    else
    {
       returnRectOnly = false;
    }

    var x = testXXX;

    var heatPad   = [];
    var width     = elementsObjectSVG.x2 - elementsObjectSVG.x1;
    var height    = elementsObjectSVG.y2 - elementsObjectSVG.y1;
    var padX      = stringsTemplate.heatPadX;
    var padY      = stringsTemplate.heatPadY;
    var textColor = colorsHex.colorTextDark;
    var textID    = 'heat-pad-text';
    var padID     = 'heat-pad-rect';
    var groupID   = 'heat-pad-group';
    var net       = elementsObjectSVG.caption_en;

    if (returnRectOnly)
    {
        padColor = colorsHex.colorGold;
    }
    else
    {
        padColor  = getColorByNet(elementsObjectSVG.netName);

        var heatPadText =  '        '         +
                           '<text '           +
                           'x="'              + 0                             + '" ' +
                           'y="'              + 0.15                          + '" ' +
                           'font-family="'    + elementConstants.fontFamilyMB + '" ' +
                           'font-size="'      + 0.5                           + '" ' +
                           'fill="'           + textColor                     + '" ' +
                           'text-anchor="'    + elementConstants.textAnchorMB + '" ' +
                           'id="'             + textID                        + '" ' +
                           '>'                + net                           +
                           '</text>';
    }

    var heatPadRect =  '        ' +
                       '<rect '   +
                       'x="'      + padX     + '" ' +
                       'y="'      + padY     + '" ' +
                       'width="'  + width    + '" ' +
                       'height="' + height   + '" ' +
                       'net="'    + elementsObjectSVG.netName   + '" ' +
                       'fill="'   + padColor + '" ' +
                       'id="'     + padID    + '" ' +
                       ' />';

    heatPad.push('    <g');
    heatPad.push('        caption_en="'     + elementsObjectSVG.caption_en     + '"');
    heatPad.push('        caption_zh="'     + elementsObjectSVG.caption_zh     + '"');
    heatPad.push('        description_en="' + elementsObjectSVG.description_en + '"');
    heatPad.push('        description_zh="' + elementsObjectSVG.description_zh + '"');
    heatPad.push('        net="'            + elementsObjectSVG.id             + '"');
    heatPad.push('        pin_type="'       + elementsObjectSVG.pin_type       + '"');
    heatPad.push('        id="'             + groupID            + '"');
    heatPad.push('        class="'          + 'elements-net'     + '"');
    heatPad.push('        >'                                          );
    heatPad.push(heatPadRect);

    if (!returnRectOnly)
    {
        heatPad.push(heatPadText);
    }

    heatPad.push('    </g>');

    if (returnRectOnly)
    {
        return heatPadRect;
    }
    else
    {
        return heatPad.join('\n');
    }
}
//..............................................................................

//..............................................................................
function getElementPad(elementsObjectSVG, side)
{
    if (elementsObjectSVG.isHeatPad)
    {
        return getHeatPad(elementsObjectSVG, side)
    }


    return  '    '         +
        '<circle '         +
        'id="'             + elementsObjectSVG.padId            + '" '    +
        'cx="'             + elementsObjectSVG.x                + '" '    +
        'cy="'             + elementsObjectSVG.y                + '"    ' +
        'designator="'     + elementsObjectSVG.designator       + '" '    +
        'net-name="'       + elementsObjectSVG.netName          + '" '    +
        'net-name-trunc="' + elementsObjectSVG.netNameTrunc     + '" '    +
        'fill="'           + elementsObjectSVG.color.toHex()    + '" '    +
        'class="'          + elementsObjectSVG.classElementsNet + '" '    +
        'r="'              + elementsObjectSVG.radius           + '" '    +
        ' />';
}
//..............................................................................

//..............................................................................
function getElementsPinsMB(pin, ref, side)
{
    var elementsObjectSVG = {};

    var x = testXXX;

    if (pin.isHeatPad)
    {
        elementsObjectSVG.isHeatPad = true;
        elementsObjectSVG.x1 = pin.x1;
        elementsObjectSVG.x2 = pin.x2;
        elementsObjectSVG.y1 = pin.y1;
        elementsObjectSVG.y2 = pin.y2;
    }
    else
    {
        elementsObjectSVG.x      = ref.substring(1);
        elementsObjectSVG.y      = getCoordinateFromLetter(ref.substring(0, 1));
        elementsObjectSVG.radius = elementConstants.radiusPadMB;
    }

    if (side === sides.bottom)
    {
        elementsObjectSVG.color = makeColor(colorsHex.colorGold);
    }
    else
    {
        elementsObjectSVG.color = makeColor(getColorByNet(pin.id, '', 'pad'));
    }

    var colorDark  = makeColor(getColorByNet(pin.id, '', 'pad'));
    var colorLight = makeColor(getColorByNet(pin.id, '', 'pad'));

    elementsObjectSVG.classElementsNet = svgClassNames.elementsNet;
    elementsObjectSVG.colorDark        = colorDark .darken (35);
    elementsObjectSVG.colorLight       = colorLight.lighten(35);
    elementsObjectSVG.designator       = ref;
    elementsObjectSVG.netName          = pin.id;
    elementsObjectSVG.caption_en       = pin.caption_en;
    elementsObjectSVG.caption_zh       = pin.caption_zh;
    elementsObjectSVG.description_en   = pin.description_en;
    elementsObjectSVG.description_zh   = pin.description_zh;

    elementsObjectSVG.netNameTrunc     = getNetNameTrunc(elementsObjectSVG.netName);
    elementsObjectSVG.padElement       = getElementPad  (elementsObjectSVG, side);
    elementsObjectSVG.padId            = elementsObjectSVG.designator + '-Pad';

    if (pin.id === 'NoNet')
    {
        elementsObjectSVG.textElementNoNet = getElementTextNoNet(elementsObjectSVG);
    }
    else
    {
        elementsObjectSVG.textElementDesig = getElementTextDesig(elementsObjectSVG);
        elementsObjectSVG.textElementNet   = getElementTextNet  (elementsObjectSVG);
    }

    return elementsObjectSVG;
}
//..............................................................................

//..............................................................................
function getPinRefs(pin)
{
    var refs = pin.refs.split(',');

    for (var i = 0; i < refs.length; i++)
    {
        refs[i] = refs[i].trim()
    }

    return refs;
}
//..............................................................................

//..............................................................................
function setHeatPadCoords(svgElementsObject, dimensions)
{
    var elementsObject = svgElementsObject
    var padElement     = elementsObject.padElement;

    var width  = dimensions.x;
    var height = dimensions.y;

    var offsetX = Math.abs(svgElementsObject.x1 - svgElementsObject.x2)/2;
    var offsetY = Math.abs(svgElementsObject.y1 - svgElementsObject.y2)/2;

    var x = (width/2) - offsetX;
    var y = (height/2) - offsetY;

    padElement = padElement.replace(stringsTemplate.heatPadX, x);
    padElement = padElement.replace(stringsTemplate.heatPadY, y);

    elementsObject.padElement = padElement;

    return elementsObject;
}
//..............................................................................
var testXXX;
//..............................................................................
function getNoNetPads(netRefs, componentMB)
{
    var noNetPads = [];

    var pinDiffs = compareObjects(netRefs, componentMB.defaultPins)

    if (!pinDiffs)
    {
        return undefined;
    }

    for (i = 0; i < pinDiffs.length; i++)
    {
        var diffElement = pinDiffs[i];

        if (diffElement.kind === 'N')
        {
            noNetPads.push(diffElement.rhs);
        }
    };

    if (isArrayWithElements(noNetPads))
    {
        return noNetPads;
    }
    else
    {
        return undefined;
    }
}
//..............................................................................

//..............................................................................
function getElementsPadsMB(componentMB, side, returnText = true)
{
    var svgElementsObject = '';
    var svgElements = [];

    var netRefs = {};

    testXXX = componentMB.id

    svgElements .push(getOutlineMB    (componentMB, side));
    svgElements .push(getPadFiducialMB(componentMB, side));

    for (var i = 0; i < componentMB.pins.length; i++)
    {
        var pin = componentMB.pins[i];

        if (pin.pin_type === 'ground' && !pin.isHeatPad)
        {
            var noNetPin = pin;
        }

        var refs = getPinRefs(pin);

        for (var j = 0; j < refs.length; j++)
        {
            svgElementsObject = getElementsPinsMB(pin, refs[j], side);

            netRefs[refs[j]] = refs[j];

            if (svgElementsObject.isHeatPad)
            {
                svgElementsObject = setHeatPadCoords(svgElementsObject, componentMB.dimensions);
            }

            svgElements.push('    ' + commentLines.svg         );
            //svgElements.push(svgElementsObject.padElement.join('\n'));
            svgElements.push(svgElementsObject.padElement);

            if (returnText)
            {
                if (pin.id === 'NoNet')
                {
                    svgElements.push(svgElementsObject.textElementNoNet  );
                }
                else
                {
                    svgElements.push(svgElementsObject.textElementNet  );
                    svgElements.push(svgElementsObject.textElementDesig);
                }
            }

            svgElements.push('    ' + commentLines.svg         );
            svgElements.push(''                                );
        }
    }

/*
    var noNetPads = getNoNetPads(netRefs, componentMB);

    if(noNetPads)
    {
        console.log('Has No-Net Pads!')

        noNetPin.id = 'NoNet';

        for (i = 0; i < noNetPads.length; i++)
        {
            svgElementsObject = getElementsPinsMB(noNetPin, noNetPads[i], side);

            svgElements.push('    ' + commentLines.svg         );
            svgElements.push(svgElementsObject.padElement);

            svgElements.push(svgElementsObject.textElementNoNet  );

            svgElements.push('    ' + commentLines.svg         );
            svgElements.push(''                                );
        }
    }
    else
    {
        console.log("Doesn't Have No-Net Pads!")
    }

*/
    return svgElements;
}
//..............................................................................

//..............................................................................
const exported =
{
    getElementsPadsMB,
    getOutlineMB,
    getPadFiducialMB,
    getDimensionsMB,
    elementConstants,
};
module.exports = exported;
