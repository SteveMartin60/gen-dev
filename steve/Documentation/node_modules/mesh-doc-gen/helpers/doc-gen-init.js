//..............................................................................

const{util, fs, path} = cxq;

const {deleteExistingFileSync, addProperties} = util;

const
{
    findFiles,
    directoryNames,
    loadTextFileIntoString,
    validateModuleDefs,
} = cxq.meshDocGen;


//..............................................................................

//..............................................................................
function deleteFolderRecursive(path)
{
    if( fs.existsSync(path) )
    {
        fs.readdirSync(path).forEach(function(file)
        {
            var curPath = path + "/" + file;

            if(fs.lstatSync(curPath).isDirectory())
            {
                deleteFolderRecursive(curPath);
            }
            else
            {
                fs.unlinkSync(curPath);
            }
        });

        fs.rmdirSync(path);
    }
}
//..............................................................................

//..............................................................................
function flushDirectory(directory)
{
    if(!fs.existsSync(directory))
    {
        console.log("Directory Doesn't Exist: " +  directory);

        return;
    }

    try
    {
        var files = findFiles(directory, '*.*', 'Flushing Directory');

        for (var i = 0; i < files.length; i++)
        {
            try
            {
                console.log('Deleting ' + (i+1) + ' of ' + files.length)
                deleteExistingFileSync(files[i]);
            }
            catch (error)
            {
                console.log(error);
                return;
            }
        }
    }
    catch (e)
    {
        console.log(e);
        return;
    }
}
//..............................................................................

//..............................................................................
function flushOutputFiles(flushPath)
{
    if(!fs.existsSync(flushPath))
    {
        console.log("Directory Doesn't Exist: " +  flushPath);

        return true;
    }

    console.log('Flushing Directory: ' + flushPath);

    try
    {
        flushDirectory(flushPath);

        if (fs.existsSync(flushPath))
        {
            deleteFolderRecursive(path.resolve(flushPath));

            if (fs.existsSync(flushPath)) fs.rmdirSync(flushPath);
        }

        return true;
    }
    catch (error)
    {
        console.log('=========================================');
        console.log('Failed to flush: ' + flushPath);
        console.log('----------------------------------');
        console.log('Error Details');
        console.log('----------------------------------');
        console.log(error);
        console.log('=========================================');

        return false;
    }
}
//..............................................................................

//..............................................................................
function flushOutputs()
{
    console.time   ('All Outputs Flushed                    ');

    console.log    ('=======================================');
    console.log    ('Flushing Outputs...                    ');

    if(!flushOutputFiles(directoryNames.outputFinal       , '*'))
    {
        console.log('Process failed');
        return false;
    }

    if(!flushOutputFiles(directoryNames.outputReports     , '*'))
    {
        console.log('Process failed');
        return false;
    }

    if(!flushOutputFiles(directoryNames.outputIntermediate, '*'))
    {
        console.log('Process failed');
        return false;
    }

    if(!flushOutputFiles(directoryNames.outputTemp        , '*'))
    {
        console.log('Process failed');
        return false;
    }

    if(!flushOutputFiles(directoryNames.outputAnalysis    , '*'))
    {
        console.log('Process failed');
        return false;
    }

    console.log    ('---------------------------------------');
    console.timeEnd('All Outputs Flushed                    ');
    console.log    ('---------------------------------------');

    return true;
}
//..............................................................................

//..............................................................................
function initializeDocGen()
{
    if (!flushOutputs      ()) return false;
    if (!validateModuleDefs()) return false;

    return true;
}
//..............................................................................

//..............................................................................
addProperties(cxq.meshDocGen,
{
    initializeDocGen,
});
